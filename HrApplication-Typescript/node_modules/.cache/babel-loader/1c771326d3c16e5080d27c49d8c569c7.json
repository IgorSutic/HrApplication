{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/timeZoneCalculator.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nexport var PathTimeZoneConversion = {\n  fromSourceToAppointment: \"toAppointment\",\n  fromAppointmentToSource: \"fromAppointment\",\n  fromSourceToGrid: \"toGrid\",\n  fromGridToSource: \"fromGrid\"\n};\nexport class TimeZoneCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n\n  createDate(sourceDate, info) {\n    var date = new Date(sourceDate);\n\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this._getConvertedDate(date, info.appointmentTimeZone, true);\n\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this._getConvertedDate(date, info.appointmentTimeZone, false);\n\n      case PathTimeZoneConversion.fromGridToSource:\n        return this._getConvertedDate(date, info.appointmentTimeZone, false, true);\n    }\n\n    throw new Error(\"not specified pathTimeZoneConversion\");\n  }\n\n  getOffsets(date, appointmentTimezone) {\n    var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\n\n    var commonOffset = this._getCommonOffset(date);\n\n    var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\n\n    return {\n      client: clientOffset,\n      common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  }\n\n  _getClientOffset(date) {\n    return this.options.getClientOffset(date);\n  }\n\n  _getCommonOffset(date) {\n    return this.options.getCommonOffset(date);\n  }\n\n  _getAppointmentOffset(date, appointmentTimezone) {\n    return this.options.getAppointmentOffset(date, appointmentTimezone);\n  }\n\n  _getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n\n    return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  }\n\n  _getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\n    return new Date(utcDate + direction * targetOffset * toMs(\"hour\"));\n  }\n\n}","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/timeZoneCalculator.js"],"names":["isDefined","dateUtils","toMs","dateToMilliseconds","PathTimeZoneConversion","fromSourceToAppointment","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","TimeZoneCalculator","constructor","options","createDate","sourceDate","info","date","Date","path","_getConvertedDate","appointmentTimeZone","Error","getOffsets","appointmentTimezone","clientOffset","_getClientOffset","commonOffset","_getCommonOffset","appointmentOffset","_getAppointmentOffset","client","common","appointment","getClientOffset","getCommonOffset","getAppointmentOffset","useAppointmentTimeZone","isBack","newDate","getTime","offsets","_getConvertedDateByOffsets","targetOffset","direction","utcDate"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/timeZoneCalculator.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nexport var PathTimeZoneConversion = {\r\n    fromSourceToAppointment: \"toAppointment\",\r\n    fromAppointmentToSource: \"fromAppointment\",\r\n    fromSourceToGrid: \"toGrid\",\r\n    fromGridToSource: \"fromGrid\"\r\n};\r\nexport class TimeZoneCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    createDate(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false, true)\r\n        }\r\n        throw new Error(\"not specified pathTimeZoneConversion\")\r\n    }\r\n    getOffsets(date, appointmentTimezone) {\r\n        var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\r\n        var commonOffset = this._getCommonOffset(date);\r\n        var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !isDefined(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    }\r\n    _getClientOffset(date) {\r\n        return this.options.getClientOffset(date)\r\n    }\r\n    _getCommonOffset(date) {\r\n        return this.options.getCommonOffset(date)\r\n    }\r\n    _getAppointmentOffset(date, appointmentTimezone) {\r\n        return this.options.getAppointmentOffset(date, appointmentTimezone)\r\n    }\r\n    _getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    }\r\n    _getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\r\n        return new Date(utcDate + direction * targetOffset * toMs(\"hour\"))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}