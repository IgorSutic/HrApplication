{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport HorizontalAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.horizontal\";\nimport dateUtils from \"../../../core/utils/date\";\nimport query from \"../../../data/query\";\nvar HOURS_IN_DAY = 24;\nvar MINUTES_IN_HOUR = 60;\nvar MILLISECONDS_IN_MINUTE = 6e4;\nvar ZERO_APPOINTMENT_DURATION_IN_DAYS = 1;\n\nclass HorizontalMonthLineRenderingStrategy extends HorizontalAppointmentsStrategy {\n  calculateAppointmentWidth(appointment, position) {\n    var startDate = dateUtils.trimTime(position.info.appointment.startDate);\n    var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    var duration = Math.ceil(this._getDurationInDays(startDate, endDate));\n    var width = this.cropAppointmentWidth(duration * cellWidth, cellWidth);\n\n    if (this.instance.isVirtualScrolling()) {\n      var workSpace = this.instance.getWorkSpace();\n      var skippedDays = workSpace.viewDataProvider.getSkippedDaysCount(position.groupIndex, startDate, endDate, duration);\n      width -= skippedDays * cellWidth;\n    }\n\n    return width;\n  }\n\n  _getDurationInDays(startDate, endDate) {\n    var adjustedDuration = this._adjustDurationByDaylightDiff(endDate.getTime() - startDate.getTime(), startDate, endDate);\n\n    return adjustedDuration / dateUtils.dateToMilliseconds(\"day\") || ZERO_APPOINTMENT_DURATION_IN_DAYS;\n  }\n\n  getDeltaTime(args, initialSize) {\n    return HOURS_IN_DAY * MINUTES_IN_HOUR * MILLISECONDS_IN_MINUTE * this._getDeltaWidth(args, initialSize);\n  }\n\n  isAllDay() {\n    return false;\n  }\n\n  createTaskPositionMap(items, skipSorting) {\n    if (!skipSorting) {\n      this.instance.getAppointmentsInstance()._sortAppointmentsByStartDate(items);\n    }\n\n    return super.createTaskPositionMap(items);\n  }\n\n  _getSortedPositions(map, skipSorting) {\n    var result = super._getSortedPositions(map);\n\n    if (!skipSorting) {\n      result = query(result).sortBy(\"top\").thenBy(\"left\").thenBy(\"cellPosition\").thenBy(\"i\").toArray();\n    }\n\n    return result;\n  }\n\n  needCorrectAppointmentDates() {\n    return false;\n  }\n\n}\n\nexport default HorizontalMonthLineRenderingStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line.js"],"names":["HorizontalAppointmentsStrategy","dateUtils","query","HOURS_IN_DAY","MINUTES_IN_HOUR","MILLISECONDS_IN_MINUTE","ZERO_APPOINTMENT_DURATION_IN_DAYS","HorizontalMonthLineRenderingStrategy","calculateAppointmentWidth","appointment","position","startDate","trimTime","info","endDate","normalizeEndDateByViewEnd","cellWidth","getDefaultCellWidth","getAppointmentMinSize","duration","Math","ceil","_getDurationInDays","width","cropAppointmentWidth","instance","isVirtualScrolling","workSpace","getWorkSpace","skippedDays","viewDataProvider","getSkippedDaysCount","groupIndex","adjustedDuration","_adjustDurationByDaylightDiff","getTime","dateToMilliseconds","getDeltaTime","args","initialSize","_getDeltaWidth","isAllDay","createTaskPositionMap","items","skipSorting","getAppointmentsInstance","_sortAppointmentsByStartDate","_getSortedPositions","map","result","sortBy","thenBy","toArray","needCorrectAppointmentDates"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport HorizontalAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.horizontal\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport query from \"../../../data/query\";\r\nvar HOURS_IN_DAY = 24;\r\nvar MINUTES_IN_HOUR = 60;\r\nvar MILLISECONDS_IN_MINUTE = 6e4;\r\nvar ZERO_APPOINTMENT_DURATION_IN_DAYS = 1;\r\nclass HorizontalMonthLineRenderingStrategy extends HorizontalAppointmentsStrategy {\r\n    calculateAppointmentWidth(appointment, position) {\r\n        var startDate = dateUtils.trimTime(position.info.appointment.startDate);\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        var duration = Math.ceil(this._getDurationInDays(startDate, endDate));\r\n        var width = this.cropAppointmentWidth(duration * cellWidth, cellWidth);\r\n        if (this.instance.isVirtualScrolling()) {\r\n            var workSpace = this.instance.getWorkSpace();\r\n            var skippedDays = workSpace.viewDataProvider.getSkippedDaysCount(position.groupIndex, startDate, endDate, duration);\r\n            width -= skippedDays * cellWidth\r\n        }\r\n        return width\r\n    }\r\n    _getDurationInDays(startDate, endDate) {\r\n        var adjustedDuration = this._adjustDurationByDaylightDiff(endDate.getTime() - startDate.getTime(), startDate, endDate);\r\n        return adjustedDuration / dateUtils.dateToMilliseconds(\"day\") || ZERO_APPOINTMENT_DURATION_IN_DAYS\r\n    }\r\n    getDeltaTime(args, initialSize) {\r\n        return HOURS_IN_DAY * MINUTES_IN_HOUR * MILLISECONDS_IN_MINUTE * this._getDeltaWidth(args, initialSize)\r\n    }\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    createTaskPositionMap(items, skipSorting) {\r\n        if (!skipSorting) {\r\n            this.instance.getAppointmentsInstance()._sortAppointmentsByStartDate(items)\r\n        }\r\n        return super.createTaskPositionMap(items)\r\n    }\r\n    _getSortedPositions(map, skipSorting) {\r\n        var result = super._getSortedPositions(map);\r\n        if (!skipSorting) {\r\n            result = query(result).sortBy(\"top\").thenBy(\"left\").thenBy(\"cellPosition\").thenBy(\"i\").toArray()\r\n        }\r\n        return result\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return false\r\n    }\r\n}\r\nexport default HorizontalMonthLineRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}