{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\n\nclass HorizontalGroupedStrategy extends GroupedStrategy {\n  prepareCellIndexes(cellCoordinates, groupIndex, inAllDay) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    if (!groupByDay) {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\n      };\n    } else {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\n      };\n    }\n  }\n\n  calculateCellIndex(rowIndex, cellIndex) {\n    cellIndex %= this._workSpace._getCellCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  }\n\n  getGroupIndex(rowIndex, cellIndex) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    var groupCount = this._workSpace._getGroupCount();\n\n    if (groupByDay) {\n      return cellIndex % groupCount;\n    } else {\n      return Math.floor(cellIndex / this._workSpace._getCellCount());\n    }\n  }\n\n  calculateHeaderCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  }\n\n  insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  getTotalCellCount(groupCount) {\n    groupCount = groupCount || 1;\n    return this._workSpace._getCellCount() * groupCount;\n  }\n\n  getTotalRowCount() {\n    return this._workSpace._getRowCount();\n  }\n\n  addAdditionalGroupCellClasses(cellClass, index, i, j) {\n    var applyUnconditionally = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n    cellClass = this._addLastGroupCellClass(cellClass, index, applyUnconditionally);\n    return this._addFirstGroupCellClass(cellClass, index, applyUnconditionally);\n  }\n\n  _addLastGroupCellClass(cellClass, index, applyUnconditionally) {\n    if (applyUnconditionally) {\n      return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n    }\n\n    var groupByDate = this._workSpace.isGroupedByDate();\n\n    if (groupByDate) {\n      if (index % this._workSpace._getGroupCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n      }\n    } else if (index % this._workSpace._getCellCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n    }\n\n    return cellClass;\n  }\n\n  _addFirstGroupCellClass(cellClass, index, applyUnconditionally) {\n    if (applyUnconditionally) {\n      return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n    }\n\n    var groupByDate = this._workSpace.isGroupedByDate();\n\n    if (groupByDate) {\n      if ((index - 1) % this._workSpace._getGroupCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n      }\n    } else if ((index - 1) % this._workSpace._getCellCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n    }\n\n    return cellClass;\n  }\n\n  getHorizontalMax(groupIndex) {\n    return this._workSpace.getMaxAllowedPosition(groupIndex);\n  }\n\n  getVerticalMax(groupIndex) {\n    var isVirtualScrolling = this._workSpace.isVirtualScrolling();\n\n    var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\n    return this._workSpace.getMaxAllowedVerticalPosition(correctedGroupIndex);\n  }\n\n  calculateTimeCellRepeatCount() {\n    return 1;\n  }\n\n  getWorkSpaceMinWidth() {\n    return getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth();\n  }\n\n  getAllDayOffset() {\n    return this._workSpace.getAllDayHeight();\n  }\n\n  getAllDayTableHeight() {\n    return getBoundingRect(this._workSpace._$allDayTable.get(0)).height || 0;\n  }\n\n  getGroupCountAttr(groups) {\n    return {\n      attr: HORIZONTAL_GROUPED_ATTR,\n      count: null === groups || void 0 === groups ? void 0 : groups.length\n    };\n  }\n\n  getLeftOffset() {\n    return this._workSpace.getTimePanelWidth();\n  }\n\n  _createGroupBoundOffset(startCell, endCell, cellWidth) {\n    var extraOffset = cellWidth / 2;\n    var startOffset = startCell ? startCell.offset().left - extraOffset : 0;\n    var endOffset = endCell ? endCell.offset().left + cellWidth + extraOffset : 0;\n    return {\n      left: startOffset,\n      right: endOffset,\n      top: 0,\n      bottom: 0\n    };\n  }\n\n  _getGroupedByDateBoundOffset($cells, cellWidth) {\n    var lastCellIndex = $cells.length - 1;\n    var startCell = $cells.eq(0);\n    var endCell = $cells.eq(lastCellIndex);\n    return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n  }\n\n  getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    if (this._workSpace.isGroupedByDate()) {\n      return this._getGroupedByDateBoundOffset($cells, cellWidth);\n    }\n\n    var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n    var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n    var startCellIndex = groupIndex * cellCount;\n    var startCell = $cells.eq(startCellIndex);\n    var endCell = $cells.eq(startCellIndex + cellCount - 1);\n    return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n  }\n\n  getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap) {\n    if (this._workSpace.isGroupedByDate()) {\n      return this._getGroupedByDateBoundOffset($cells, cellWidth);\n    }\n\n    var startCell;\n    var endCell;\n\n    var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n    var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n    var currentCellGroup = groupedDataMap.dateTableGroupedMap[groupIndex];\n\n    if (currentCellGroup) {\n      var groupRowLength = currentCellGroup[0].length;\n      var groupStartPosition = currentCellGroup[0][0].position;\n      var groupEndPosition = currentCellGroup[0][groupRowLength - 1].position;\n      startCell = $cells.eq(groupStartPosition.cellIndex);\n      endCell = $cells.eq(groupEndPosition.cellIndex);\n    }\n\n    return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n  }\n\n  shiftIndicator($indicator, height, rtlOffset, groupIndex) {\n    var offset = this._getIndicatorOffset(groupIndex);\n\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    $indicator.css(\"left\", horizontalOffset);\n    $indicator.css(\"top\", height);\n  }\n\n  _getIndicatorOffset(groupIndex) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    return groupByDay ? this._calculateGroupByDateOffset(groupIndex) : this._calculateOffset(groupIndex);\n  }\n\n  _calculateOffset(groupIndex) {\n    return this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex + this._workSpace.getIndicatorOffset(groupIndex) + groupIndex;\n  }\n\n  _calculateGroupByDateOffset(groupIndex) {\n    return this._workSpace.getIndicatorOffset(0) * this._workSpace._getGroupCount() + this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex;\n  }\n\n  getShaderOffset(i, width) {\n    var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\n    return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).width - offset - this._workSpace.getTimePanelWidth() - width : offset;\n  }\n\n  getShaderTopOffset(i) {\n    return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0);\n  }\n\n  getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    return height;\n  }\n\n  getShaderMaxHeight() {\n    return getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).height;\n  }\n\n  getShaderWidth(i) {\n    return this._workSpace.getIndicationWidth(i);\n  }\n\n  getScrollableScrollTop(allDay) {\n    return !allDay ? this._workSpace.getScrollable().scrollTop() : 0;\n  }\n\n  getGroupIndexByCell($cell) {\n    var rowIndex = $cell.parent().index();\n    var cellIndex = $cell.index();\n    return this.getGroupIndex(rowIndex, cellIndex);\n  }\n\n}\n\nexport default HorizontalGroupedStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js"],"names":["getBoundingRect","GroupedStrategy","HORIZONTAL_GROUPED_ATTR","HorizontalGroupedStrategy","prepareCellIndexes","cellCoordinates","groupIndex","inAllDay","groupByDay","_workSpace","isGroupedByDate","rowIndex","cellIndex","_getCellCount","_getGroupCount","calculateCellIndex","_getRowCount","getGroupIndex","groupCount","Math","floor","calculateHeaderCellRepeatCount","insertAllDayRowsIntoDateTable","getTotalCellCount","getTotalRowCount","addAdditionalGroupCellClasses","cellClass","index","i","j","applyUnconditionally","arguments","length","_addLastGroupCellClass","_addFirstGroupCellClass","concat","getLastGroupCellClass","groupByDate","getFirstGroupCellClass","getHorizontalMax","getMaxAllowedPosition","getVerticalMax","isVirtualScrolling","correctedGroupIndex","getMaxAllowedVerticalPosition","calculateTimeCellRepeatCount","getWorkSpaceMinWidth","$element","get","width","getTimePanelWidth","getAllDayOffset","getAllDayHeight","getAllDayTableHeight","_$allDayTable","height","getGroupCountAttr","groups","attr","count","getLeftOffset","_createGroupBoundOffset","startCell","endCell","cellWidth","extraOffset","startOffset","offset","left","endOffset","right","top","bottom","_getGroupedByDateBoundOffset","$cells","lastCellIndex","eq","getGroupBoundsOffset","cellCount","coordinates","getCellIndexByCoordinates","startCellIndex","getVirtualScrollingGroupBoundsOffset","groupedDataMap","currentCellGroup","dateTableGroupedMap","groupRowLength","groupStartPosition","position","groupEndPosition","shiftIndicator","$indicator","rtlOffset","_getIndicatorOffset","horizontalOffset","css","_calculateGroupByDateOffset","_calculateOffset","getRoundedCellWidth","getIndicatorOffset","getShaderOffset","option","_dateTableScrollable","$content","getShaderTopOffset","getShaderMaxHeight","getShaderHeight","getIndicationHeight","getShaderWidth","getIndicationWidth","getScrollableScrollTop","allDay","getScrollable","scrollTop","getGroupIndexByCell","$cell","parent"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\r\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\r\nclass HorizontalGroupedStrategy extends GroupedStrategy {\r\n    prepareCellIndexes(cellCoordinates, groupIndex, inAllDay) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        if (!groupByDay) {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\r\n            }\r\n        } else {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\r\n            }\r\n        }\r\n    }\r\n    calculateCellIndex(rowIndex, cellIndex) {\r\n        cellIndex %= this._workSpace._getCellCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    }\r\n    getGroupIndex(rowIndex, cellIndex) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        var groupCount = this._workSpace._getGroupCount();\r\n        if (groupByDay) {\r\n            return cellIndex % groupCount\r\n        } else {\r\n            return Math.floor(cellIndex / this._workSpace._getCellCount())\r\n        }\r\n    }\r\n    calculateHeaderCellRepeatCount() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    }\r\n    insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    getTotalCellCount(groupCount) {\r\n        groupCount = groupCount || 1;\r\n        return this._workSpace._getCellCount() * groupCount\r\n    }\r\n    getTotalRowCount() {\r\n        return this._workSpace._getRowCount()\r\n    }\r\n    addAdditionalGroupCellClasses(cellClass, index, i, j) {\r\n        var applyUnconditionally = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n        cellClass = this._addLastGroupCellClass(cellClass, index, applyUnconditionally);\r\n        return this._addFirstGroupCellClass(cellClass, index, applyUnconditionally)\r\n    }\r\n    _addLastGroupCellClass(cellClass, index, applyUnconditionally) {\r\n        if (applyUnconditionally) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n        }\r\n        var groupByDate = this._workSpace.isGroupedByDate();\r\n        if (groupByDate) {\r\n            if (index % this._workSpace._getGroupCount() === 0) {\r\n                return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n            }\r\n        } else if (index % this._workSpace._getCellCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n        }\r\n        return cellClass\r\n    }\r\n    _addFirstGroupCellClass(cellClass, index, applyUnconditionally) {\r\n        if (applyUnconditionally) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n        }\r\n        var groupByDate = this._workSpace.isGroupedByDate();\r\n        if (groupByDate) {\r\n            if ((index - 1) % this._workSpace._getGroupCount() === 0) {\r\n                return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n            }\r\n        } else if ((index - 1) % this._workSpace._getCellCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n        }\r\n        return cellClass\r\n    }\r\n    getHorizontalMax(groupIndex) {\r\n        return this._workSpace.getMaxAllowedPosition(groupIndex)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        var isVirtualScrolling = this._workSpace.isVirtualScrolling();\r\n        var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\r\n        return this._workSpace.getMaxAllowedVerticalPosition(correctedGroupIndex)\r\n    }\r\n    calculateTimeCellRepeatCount() {\r\n        return 1\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth()\r\n    }\r\n    getAllDayOffset() {\r\n        return this._workSpace.getAllDayHeight()\r\n    }\r\n    getAllDayTableHeight() {\r\n        return getBoundingRect(this._workSpace._$allDayTable.get(0)).height || 0\r\n    }\r\n    getGroupCountAttr(groups) {\r\n        return {\r\n            attr: HORIZONTAL_GROUPED_ATTR,\r\n            count: null === groups || void 0 === groups ? void 0 : groups.length\r\n        }\r\n    }\r\n    getLeftOffset() {\r\n        return this._workSpace.getTimePanelWidth()\r\n    }\r\n    _createGroupBoundOffset(startCell, endCell, cellWidth) {\r\n        var extraOffset = cellWidth / 2;\r\n        var startOffset = startCell ? startCell.offset().left - extraOffset : 0;\r\n        var endOffset = endCell ? endCell.offset().left + cellWidth + extraOffset : 0;\r\n        return {\r\n            left: startOffset,\r\n            right: endOffset,\r\n            top: 0,\r\n            bottom: 0\r\n        }\r\n    }\r\n    _getGroupedByDateBoundOffset($cells, cellWidth) {\r\n        var lastCellIndex = $cells.length - 1;\r\n        var startCell = $cells.eq(0);\r\n        var endCell = $cells.eq(lastCellIndex);\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            return this._getGroupedByDateBoundOffset($cells, cellWidth)\r\n        }\r\n        var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n        var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\r\n        var startCellIndex = groupIndex * cellCount;\r\n        var startCell = $cells.eq(startCellIndex);\r\n        var endCell = $cells.eq(startCellIndex + cellCount - 1);\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap) {\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            return this._getGroupedByDateBoundOffset($cells, cellWidth)\r\n        }\r\n        var startCell;\r\n        var endCell;\r\n        var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n        var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\r\n        var currentCellGroup = groupedDataMap.dateTableGroupedMap[groupIndex];\r\n        if (currentCellGroup) {\r\n            var groupRowLength = currentCellGroup[0].length;\r\n            var groupStartPosition = currentCellGroup[0][0].position;\r\n            var groupEndPosition = currentCellGroup[0][groupRowLength - 1].position;\r\n            startCell = $cells.eq(groupStartPosition.cellIndex);\r\n            endCell = $cells.eq(groupEndPosition.cellIndex)\r\n        }\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    shiftIndicator($indicator, height, rtlOffset, groupIndex) {\r\n        var offset = this._getIndicatorOffset(groupIndex);\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        $indicator.css(\"left\", horizontalOffset);\r\n        $indicator.css(\"top\", height)\r\n    }\r\n    _getIndicatorOffset(groupIndex) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        return groupByDay ? this._calculateGroupByDateOffset(groupIndex) : this._calculateOffset(groupIndex)\r\n    }\r\n    _calculateOffset(groupIndex) {\r\n        return this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex + this._workSpace.getIndicatorOffset(groupIndex) + groupIndex\r\n    }\r\n    _calculateGroupByDateOffset(groupIndex) {\r\n        return this._workSpace.getIndicatorOffset(0) * this._workSpace._getGroupCount() + this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex\r\n    }\r\n    getShaderOffset(i, width) {\r\n        var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\r\n        return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).width - offset - this._workSpace.getTimePanelWidth() - width : offset\r\n    }\r\n    getShaderTopOffset(i) {\r\n        return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0)\r\n    }\r\n    getShaderHeight() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        return height\r\n    }\r\n    getShaderMaxHeight() {\r\n        return getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).height\r\n    }\r\n    getShaderWidth(i) {\r\n        return this._workSpace.getIndicationWidth(i)\r\n    }\r\n    getScrollableScrollTop(allDay) {\r\n        return !allDay ? this._workSpace.getScrollable().scrollTop() : 0\r\n    }\r\n    getGroupIndexByCell($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        var cellIndex = $cell.index();\r\n        return this.getGroupIndex(rowIndex, cellIndex)\r\n    }\r\n}\r\nexport default HorizontalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"module"}