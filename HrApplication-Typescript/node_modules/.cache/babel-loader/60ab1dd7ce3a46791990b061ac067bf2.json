{"ast":null,"code":"var _jsxFileName = \"/home/igor/welcomedev-react-starter/src/calendar/Calendar.tsx\",\n    _s = $RefreshSig$();\n\n// import { useState } from 'react';\n// import { DateRange ,DateRangePicker} from 'react-date-range';\n// import 'react-date-range/dist/styles.css';\n// import 'react-date-range/dist/theme/default.css';\n// import { addDays } from 'date-fns';\n// interface Props{\n//     title?:string,\n//     startDate?: Date  ,\n//     end?:Date ,\n//     allDay?: boolean | null\n// }\n// const events = [\n//     {\n//         title: \"Big Meeting\",\n//         allDay: true,\n//         startDate: new Date(2021, 10, 0),\n//         end: new Date(2021, 10, 0),\n//     },\n//     {\n//         title: \"Vacation\",\n//         startDate: new Date(2021, 11, 7),\n//         end: new Date(2021, 11, 10),\n//     },\n//     {\n//         title: \"Conference\",\n//         startDate: new Date(2021, 10, 20),\n//         end: new Date(2021, 10, 23),\n//     },\n// ];\n// function Calendar(){\n//     const [state, setState] = useState({\n//         selection: {\n//             startDate: new Date(),\n//             endDate: new Date(),\n//             key: 'selection'\n//         }\n//         });\n//     const [newEvent, setNewEvent] = useState({title:\"\", startDate:new Date(), end: new Date()})\n//     const [allEvents, setAllEvents] = useState(events)    \n//     function handleEvent(){\n//         setAllEvents([...allEvents, newEvent])\n//     }\n//     return(\n//         <DateRange\n//             editableDateInputs={true}\n//             onChange={(item: Date | any) => {\n//                 setState({ ...state, ...item })\n//                 setNewEvent({ ...newEvent, startDate:item }) \n//                 handleEvent()\n//             }}\n//             moveRangeOnFirstSelection={false}\n//             ranges={[state.selection]}\n//         />\n//     );\n// }\n// export default Calendar;\n//--------------------------------------------------------------------------------------------\nimport { useCallback, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport allLocales from \"@fullcalendar/core/locales-all\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentEvents, setCurrentEvents] = useState([]);\n  const handleEvents = useCallback(events => setCurrentEvents(events), []);\n  const handleDateSelect = useCallback(selectInfo => {\n    var _prompt;\n\n    let title = (_prompt = prompt(\"イベントのタイトルを入力してください\")) === null || _prompt === void 0 ? void 0 : _prompt.trim();\n    let calendarApi = selectInfo.view.calendar;\n    calendarApi.unselect();\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      });\n    }\n  }, []);\n  const handleEventClick = useCallback(clickInfo => {\n    if (window.confirm(`このイベント「${clickInfo.event.title}」を削除しますか`)) {\n      clickInfo.event.remove();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"demo-app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app-main\",\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, interactionPlugin],\n        initialView: \"dayGridMonth\",\n        selectable: true,\n        editable: true,\n        initialEvents: INITIAL_EVENTS,\n        locales: allLocales,\n        locale: \"ja\",\n        eventsSet: handleEvents,\n        select: handleDateSelect,\n        eventClick: handleEventClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"C260AW2P1vGWG+z/D8Czncuwkjk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/calendar/Calendar.tsx"],"names":["useCallback","useState","FullCalendar","dayGridPlugin","allLocales","interactionPlugin","INITIAL_EVENTS","createEventId","App","currentEvents","setCurrentEvents","handleEvents","events","handleDateSelect","selectInfo","title","prompt","trim","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","window","confirm","event","remove"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,YAAP,MAIO,qBAJP;AAKA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAa,EAAb,CAAlD;AACA,QAAMU,YAAY,GAAGX,WAAW,CAC7BY,MAAD,IAAwBF,gBAAgB,CAACE,MAAD,CADV,EAE9B,EAF8B,CAAhC;AAIA,QAAMC,gBAAgB,GAAGb,WAAW,CAAEc,UAAD,IAA+B;AAAA;;AAClE,QAAIC,KAAK,cAAGC,MAAM,CAAC,oBAAD,CAAT,4CAAG,QAA8BC,IAA9B,EAAZ;AACA,QAAIC,WAAW,GAAGJ,UAAU,CAACK,IAAX,CAAgBC,QAAlC;AACAF,IAAAA,WAAW,CAACG,QAAZ;;AACA,QAAIN,KAAJ,EAAW;AACTG,MAAAA,WAAW,CAACI,QAAZ,CAAqB;AACnBC,QAAAA,EAAE,EAAEhB,aAAa,EADE;AAEnBQ,QAAAA,KAFmB;AAGnBS,QAAAA,KAAK,EAAEV,UAAU,CAACW,QAHC;AAInBC,QAAAA,GAAG,EAAEZ,UAAU,CAACa,MAJG;AAKnBC,QAAAA,MAAM,EAAEd,UAAU,CAACc;AALA,OAArB;AAOD;AACF,GAbmC,EAajC,EAbiC,CAApC;AAcA,QAAMC,gBAAgB,GAAG7B,WAAW,CAAE8B,SAAD,IAA8B;AACjE,QACEC,MAAM,CAACC,OAAP,CAAgB,UAASF,SAAS,CAACG,KAAV,CAAgBlB,KAAM,UAA/C,CADF,EAEE;AACAe,MAAAA,SAAS,CAACG,KAAV,CAAgBC,MAAhB;AACD;AACF,GANmC,EAMjC,EANiC,CAApC;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAE,CAAC/B,aAAD,EAAgBE,iBAAhB,CADX;AAEE,QAAA,WAAW,EAAC,cAFd;AAGE,QAAA,UAAU,EAAE,IAHd;AAIE,QAAA,QAAQ,EAAE,IAJZ;AAKE,QAAA,aAAa,EAAEC,cALjB;AAME,QAAA,OAAO,EAAEF,UANX;AAOE,QAAA,MAAM,EAAC,IAPT;AAQE,QAAA,SAAS,EAAEO,YARb;AASE,QAAA,MAAM,EAAEE,gBATV;AAUE,QAAA,UAAU,EAAEgB;AAVd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GA7CQrB,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["// import { useState } from 'react';\n// import { DateRange ,DateRangePicker} from 'react-date-range';\n// import 'react-date-range/dist/styles.css';\n// import 'react-date-range/dist/theme/default.css';\n// import { addDays } from 'date-fns';\n\n\n// interface Props{\n//     title?:string,\n//     startDate?: Date  ,\n//     end?:Date ,\n//     allDay?: boolean | null\n// }\n\n// const events = [\n//     {\n//         title: \"Big Meeting\",\n//         allDay: true,\n//         startDate: new Date(2021, 10, 0),\n//         end: new Date(2021, 10, 0),\n//     },\n//     {\n//         title: \"Vacation\",\n//         startDate: new Date(2021, 11, 7),\n//         end: new Date(2021, 11, 10),\n//     },\n//     {\n//         title: \"Conference\",\n//         startDate: new Date(2021, 10, 20),\n//         end: new Date(2021, 10, 23),\n//     },\n// ];\n\n\n// function Calendar(){\n//     const [state, setState] = useState({\n//         selection: {\n//             startDate: new Date(),\n//             endDate: new Date(),\n//             key: 'selection'\n//         }\n//         });\n//     const [newEvent, setNewEvent] = useState({title:\"\", startDate:new Date(), end: new Date()})\n//     const [allEvents, setAllEvents] = useState(events)    \n    \n//     function handleEvent(){\n//         setAllEvents([...allEvents, newEvent])\n//     }\n\n//     return(\n//         <DateRange\n//             editableDateInputs={true}\n//             onChange={(item: Date | any) => {\n//                 setState({ ...state, ...item })\n//                 setNewEvent({ ...newEvent, startDate:item }) \n//                 handleEvent()\n//             }}\n//             moveRangeOnFirstSelection={false}\n//             ranges={[state.selection]}\n//         />\n//     );\n// }\n\n// export default Calendar;\n\n//--------------------------------------------------------------------------------------------\nimport { useCallback, useState } from \"react\";\nimport FullCalendar, {\n  DateSelectArg,\n  EventApi,\n  EventClickArg\n} from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport allLocales from \"@fullcalendar/core/locales-all\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\n\nfunction App() {\n  const [currentEvents, setCurrentEvents] = useState<EventApi[]>([]);\n  const handleEvents = useCallback(\n    (events: EventApi[]) => setCurrentEvents(events),\n    []\n  );\n  const handleDateSelect = useCallback((selectInfo: DateSelectArg) => {\n    let title = prompt(\"イベントのタイトルを入力してください\")?.trim();\n    let calendarApi = selectInfo.view.calendar;\n    calendarApi.unselect();\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      });\n    }\n  }, []);\n  const handleEventClick = useCallback((clickInfo: EventClickArg) => {\n    if (\n      window.confirm(`このイベント「${clickInfo.event.title}」を削除しますか`)\n    ) {\n      clickInfo.event.remove();\n    }\n  }, []);\n  return (\n    <div className=\"demo-app\">\n      <div className=\"demo-app-main\">\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          selectable={true}\n          editable={true}\n          initialEvents={INITIAL_EVENTS}\n          locales={allLocales}\n          locale=\"ja\"\n          eventsSet={handleEvents}\n          select={handleDateSelect}\n          eventClick={handleEventClick}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}