{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS } from \"../constants\";\nimport timeZoneUtils from \"../utils.timeZone\";\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar HORIZONTAL = \"horizontal\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_HEADER_MARGIN = 10;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerTimeline extends SchedulerWorkSpace {\n  get verticalGroupTableClass() {\n    return GROUP_TABLE_CLASS;\n  }\n\n  get viewDirection() {\n    return \"horizontal\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrTimelineDateHeader;\n  }\n\n  _init() {\n    super._init();\n\n    this.$element().addClass(TIMELINE_CLASS);\n    this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS);\n  }\n\n  _getCellFromNextRow(direction, isMultiSelection) {\n    if (!isMultiSelection) {\n      return super._getCellFromNextRow(direction, isMultiSelection);\n    }\n\n    return this._$focusedCell;\n  }\n\n  _getDefaultGroupStrategy() {\n    return \"vertical\";\n  }\n\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace());\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      groupOrientation: \"vertical\"\n    });\n  }\n\n  _getRowCount() {\n    return 1;\n  }\n\n  _getCellCount() {\n    return this._getCellCountInDay() * this.option(\"intervalCount\");\n  }\n\n  getGroupTableWidth() {\n    return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0;\n  }\n\n  _getTotalRowCount(groupCount) {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._getRowCount();\n    } else {\n      groupCount = groupCount || 1;\n      return this._getRowCount() * groupCount;\n    }\n  }\n\n  _getDateForHeaderText(index) {\n    var firstViewDate = this._getValidFirstViewDateWithoutDST();\n\n    return this._getDateByIndexCore(firstViewDate, index);\n  }\n\n  _getDateByIndexCore(date, index) {\n    var result = new Date(date);\n    var dayIndex = Math.floor(index / this._getCellCountInDay());\n    result.setTime(date.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\n    return result;\n  }\n\n  _getDateByIndex(index) {\n    var firstViewDate = this._getValidFirstViewDateWithoutDST();\n\n    var result = this._getDateByIndexCore(firstViewDate, index);\n\n    if (timeZoneUtils.isTimezoneChangeInDate(this._firstViewDate)) {\n      result.setDate(result.getDate() - 1);\n    }\n\n    return result;\n  }\n\n  _getValidFirstViewDateWithoutDST() {\n    var newFirstViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this._firstViewDate);\n    newFirstViewDate.setHours(this.option(\"startDayHour\"));\n    return newFirstViewDate;\n  }\n\n  _getFormat() {\n    return \"shorttime\";\n  }\n\n  _needApplyLastGroupCellClass() {\n    return true;\n  }\n\n  _calculateHiddenInterval(rowIndex, cellIndex) {\n    var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\n    return dayIndex * this._getHiddenInterval();\n  }\n\n  _getMillisecondsOffset(rowIndex, cellIndex) {\n    cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\n    return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex);\n  }\n\n  _createWorkSpaceElements() {\n    this._createWorkSpaceScrollableElements();\n  }\n\n  _getWorkSpaceHeight() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      return getBoundingRect(this._$dateTable.get(0)).height;\n    }\n\n    return getBoundingRect(this.$element().get(0)).height;\n  }\n\n  _dateTableScrollableConfig() {\n    var config = super._dateTableScrollableConfig();\n\n    var timelineConfig = {\n      direction: HORIZONTAL\n    };\n    return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig);\n  }\n\n  _needCreateCrossScrolling() {\n    return true;\n  }\n\n  _headerScrollableConfig() {\n    var config = super._headerScrollableConfig();\n\n    return extend(config, {\n      scrollByContent: true\n    });\n  }\n\n  _renderTimePanel() {\n    return noop();\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _getTableAllDay() {\n    return false;\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"timeCellTemplate\");\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _changeAllDayVisibility() {\n    return noop();\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  _getGroupHeaderContainer() {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._$thead;\n    }\n\n    return this._$sidebarTable;\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  _createAllDayPanelElements() {\n    return noop();\n  }\n\n  _renderDateHeader() {\n    var $headerRow = super._renderDateHeader();\n\n    if (this._needRenderWeekHeader()) {\n      var firstViewDate = new Date(this._firstViewDate);\n      var currentDate = new Date(firstViewDate);\n      var $cells = [];\n\n      var groupCount = this._getGroupCount();\n\n      var cellCountInDay = this._getCellCountInDay();\n\n      var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\n      var cellTemplate = this.option(\"dateCellTemplate\");\n      var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n      var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\n      var cellsCount = cellsInGroup * horizontalGroupCount;\n\n      for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\n        var $th = $(\"<th>\");\n\n        var text = this._formatWeekdayAndDay(currentDate);\n\n        if (cellTemplate) {\n          var templateOptions = {\n            model: _extends({\n              text: text,\n              date: new Date(currentDate)\n            }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\n            container: $th,\n            index: templateIndex\n          };\n          cellTemplate.render(templateOptions);\n        } else {\n          $th.text(text);\n        }\n\n        $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\n        $cells.push($th);\n\n        if (templateIndex % cellsInGroup === cellsInGroup - 1) {\n          currentDate = new Date(firstViewDate);\n        } else {\n          this._incrementDate(currentDate);\n        }\n      }\n\n      var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\n      $headerRow.before($row);\n    }\n  }\n\n  _needRenderWeekHeader() {\n    return false;\n  }\n\n  _incrementDate(date) {\n    date.setDate(date.getDate() + 1);\n  }\n\n  _getWeekDuration() {\n    return 1;\n  }\n\n  _renderView() {\n    this._setFirstViewDate();\n\n    var groupCellTemplates;\n\n    if (!this.isRenovatedRender()) {\n      groupCellTemplates = this._renderGroupHeader();\n    }\n\n    if (this.isRenovatedRender()) {\n      this.renderRWorkspace();\n    } else {\n      this._renderDateHeader();\n\n      this._renderTimePanel();\n\n      this._renderDateTable();\n\n      this._renderAllDayPanel();\n    }\n\n    this._shader = new HorizontalShader(this);\n\n    this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\n\n    if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\n      this.renderRGroupPanel();\n    }\n\n    this._applyCellTemplates(groupCellTemplates);\n  }\n\n  _setHorizontalGroupHeaderCellsHeight() {\n    return noop();\n  }\n\n  getIndicationCellCount() {\n    var timeDiff = this._getTimeDiff();\n\n    return this._calculateDurationInCells(timeDiff);\n  }\n\n  _getTimeDiff() {\n    var today = this._getToday();\n\n    var date = this._getIndicationFirstViewDate();\n\n    return today.getTime() - date.getTime();\n  }\n\n  _calculateDurationInCells(timeDiff) {\n    var today = this._getToday();\n\n    var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\n    var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\n\n    if (today.getHours() > this.option(\"endDayHour\")) {\n      duration = this._getCellCountInDay();\n    }\n\n    if (duration < 0) {\n      duration = 0;\n    }\n\n    return differenceInDays * this._getCellCountInDay() + duration;\n  }\n\n  getIndicationWidth() {\n    if (this.isGroupedByDate()) {\n      var cellCount = this.getIndicationCellCount();\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart);\n    } else {\n      return this.getIndicationCellCount() * this.getCellWidth();\n    }\n  }\n\n  _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var $indicator;\n    var width = this.getIndicationWidth();\n\n    if (\"vertical\" === this.option(\"groupOrientation\")) {\n      $indicator = this._createIndicator($container);\n      $indicator.height(getBoundingRect($container.get(0)).height);\n      $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width);\n    } else {\n      for (var i = 0; i < groupCount; i++) {\n        var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\n        $indicator = this._createIndicator($container);\n        $indicator.height(getBoundingRect($container.get(0)).height);\n        $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset);\n      }\n    }\n  }\n\n  _isVerticalShader() {\n    return false;\n  }\n\n  _isCurrentTimeHeaderCell() {\n    return false;\n  }\n\n  _visibilityChanged(visible) {\n    super._visibilityChanged(visible);\n  }\n\n  _setTableSizes() {\n    var _this$virtualScrollin;\n\n    var cellHeight = this.getCellHeight();\n\n    var minHeight = this._getWorkSpaceMinHeight();\n\n    var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\n    var height = cellHeight * verticalGroupCount;\n\n    if (height < minHeight) {\n      height = minHeight;\n    }\n\n    this._$sidebarTable.height(height);\n\n    this._$dateTable.height(height);\n\n    super._setTableSizes();\n\n    null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.updateDimensions();\n  }\n\n  _getWorkSpaceMinHeight() {\n    var minHeight = this._getWorkSpaceHeight();\n\n    var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\n\n    if (minHeight < workspaceContainerHeight) {\n      minHeight = workspaceContainerHeight;\n    }\n\n    return minHeight;\n  }\n\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupRowClass: this._getGroupRowClass(),\n      groupHeaderRowClass: this._getGroupRowClass(),\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: this._getGroupHeaderContentClass()\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate);\n  }\n\n  _ensureGroupHeaderCellsHeight(cellHeight) {\n    var minCellHeight = this._calculateMinCellHeight();\n\n    if (cellHeight < minCellHeight) {\n      return minCellHeight;\n    }\n\n    return cellHeight;\n  }\n\n  _calculateMinCellHeight() {\n    var dateTable = this._getDateTable();\n\n    var dateTableRowSelector = \".\" + this._getDateTableRowClass();\n\n    return getBoundingRect(dateTable).height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    return {\n      cellIndex: index % this._getCellCount(),\n      rowIndex: 0\n    };\n  }\n\n  _getCellByCoordinates(cellCoordinates, groupIndex) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\n\n    return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex);\n  }\n\n  _getWorkSpaceWidth() {\n    return this._$dateTable.outerWidth(true);\n  }\n\n  _getIndicationFirstViewDate() {\n    return dateUtils.trimTime(new Date(this._firstViewDate));\n  }\n\n  _getIntervalBetween(currentDate, allDay) {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var firstViewDate = this.getStartViewDate();\n    var firstViewDateTime = firstViewDate.getTime();\n    var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var apptStart = currentDate.getTime();\n    var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\n    var fullDays = Math.floor(fullInterval / toMs(\"day\"));\n    var tailDuration = fullInterval - fullDays * toMs(\"day\");\n    var tailDelta = 0;\n\n    var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\n\n    var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\n    var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\n\n    if (!allDay) {\n      if (currentDate.getHours() < startDayHour) {\n        tailDelta = tailDuration - hiddenInterval + gapBeforeAppt;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\n        tailDelta = tailDuration;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\n        tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"));\n      } else if (!fullDays) {\n        result = fullInterval;\n      }\n\n      result += tailDelta;\n    }\n\n    return result;\n  }\n\n  _getWeekendsCount() {\n    return 0;\n  }\n\n  getAllDayContainer() {\n    return null;\n  }\n\n  getTimePanelWidth() {\n    return 0;\n  }\n\n  getPositionShift(timeShift) {\n    var positionShift = super.getPositionShift(timeShift);\n    var left = this.getCellWidth() * timeShift;\n\n    if (this.option(\"rtlEnabled\")) {\n      left *= -1;\n    }\n\n    left += positionShift.left;\n    return {\n      top: 0,\n      left: left,\n      cellPosition: left\n    };\n  }\n\n  getVisibleBounds() {\n    var isRtl = this.option(\"rtlEnabled\");\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellWidth = this.getCellWidth();\n    var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\n    var scrolledCellCount = scrollableOffset / cellWidth;\n    var visibleCellCount = $scrollable.width() / cellWidth;\n    var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\n\n    var leftDate = this._getDateByIndex(scrolledCellCount);\n\n    var rightDate = this._getDateByIndex(totalCellCount);\n\n    if (isRtl) {\n      leftDate = this._getDateByIndex(totalCellCount);\n      rightDate = this._getDateByIndex(scrolledCellCount);\n    }\n\n    result.left = {\n      hours: leftDate.getHours(),\n      minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\n      date: dateUtils.trimTime(leftDate)\n    };\n    result.right = {\n      hours: rightDate.getHours(),\n      minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\n      date: dateUtils.trimTime(rightDate)\n    };\n    return result;\n  }\n\n  getIntervalDuration(allDay) {\n    return this.getCellDuration();\n  }\n\n  _supportCompactDropDownAppointments() {\n    return false;\n  }\n\n  getCellMinWidth() {\n    return 0;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n\n  scrollToTime(hours, minutes, date) {\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(function () {\n        scrollable.scrollBy({\n          left: coordinates.left - scrollable.scrollLeft() - offset,\n          top: 0\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: coordinates.left - scrollable.scrollLeft() - offset,\n        top: 0\n      });\n    }\n  }\n\n  _getRowCountWithAllDayRows() {\n    return this._getRowCount();\n  }\n\n  _setCurrentTimeCells() {\n    var timePanelCells = this._getTimePanelCells();\n\n    var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n\n    currentTimeCellIndices.forEach(timePanelCellIndex => {\n      timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS);\n    });\n  }\n\n  _cleanCurrentTimeCells() {\n    this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS);\n  }\n\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"));\n  }\n\n  _getCurrentTimePanelCellIndices() {\n    var columnCountPerGroup = this._getCellCount();\n\n    var today = this._getToday();\n\n    var index = this.getCellIndexByDate(today);\n\n    var {\n      cellIndex: currentTimeCellIndex\n    } = this._getCellCoordinatesByIndex(index);\n\n    if (void 0 === currentTimeCellIndex) {\n      return [];\n    }\n\n    var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\n    return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeCellIndex);\n  }\n\n  renovatedRenderSupported() {\n    return true;\n  }\n\n  renderRAllDayPanel() {}\n\n  renderRTimeTable() {}\n\n  generateRenderOptions() {\n    var options = super.generateRenderOptions(true);\n\n    var groupCount = this._getGroupCount();\n\n    var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n    var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\n    var daysInView = cellsInGroup * horizontalGroupCount;\n    return _extends({}, options, {\n      isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\n      getWeekDaysHeaderText: this._formatWeekdayAndDay.bind(this),\n      daysInView: daysInView,\n      cellCountInDay: this._getCellCountInDay()\n    });\n  }\n\n}\n\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\nexport default SchedulerTimeline;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline.js"],"names":["_extends","$","noop","extend","getBoundingRect","registerComponent","SchedulerWorkSpace","dateUtils","tableCreatorModule","tableCreator","HorizontalShader","HEADER_CURRENT_TIME_CELL_CLASS","timeZoneUtils","dxrTimelineDateHeader","TIMELINE_CLASS","GROUP_TABLE_CLASS","HORIZONTAL_GROUPED_WORKSPACE_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_PANEL_WEEK_CELL_CLASS","HEADER_ROW_CLASS","HORIZONTAL","DATE_TABLE_CELL_BORDER","DATE_TABLE_HEADER_MARGIN","toMs","dateToMilliseconds","SchedulerTimeline","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","_init","$element","addClass","_$sidebarTable","_getCellFromNextRow","direction","isMultiSelection","_$focusedCell","_getDefaultGroupStrategy","_toggleGroupingDirectionClass","toggleClass","_isHorizontalGroupedWorkSpace","_getDefaultOptions","groupOrientation","_getRowCount","_getCellCount","_getCellCountInDay","option","getGroupTableWidth","outerWidth","_getTotalRowCount","groupCount","_getDateForHeaderText","index","firstViewDate","_getValidFirstViewDateWithoutDST","_getDateByIndexCore","date","result","Date","dayIndex","Math","floor","setTime","getTime","_calculateCellIndex","_getInterval","_getHiddenInterval","_getDateByIndex","isTimezoneChangeInDate","_firstViewDate","setDate","getDate","newFirstViewDate","getDateWithoutTimezoneChange","setHours","_getFormat","_needApplyLastGroupCellClass","_calculateHiddenInterval","rowIndex","cellIndex","_getMillisecondsOffset","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_getWorkSpaceHeight","_$dateTable","get","height","_dateTableScrollableConfig","config","timelineConfig","_needCreateCrossScrolling","_headerScrollableConfig","scrollByContent","_renderTimePanel","_renderAllDayPanel","_getTableAllDay","_getDateHeaderTemplate","_toggleAllDayVisibility","_changeAllDayVisibility","supportAllDayRow","_getGroupHeaderContainer","_$thead","_insertAllDayRowsIntoDateTable","_createAllDayPanelElements","_renderDateHeader","$headerRow","_needRenderWeekHeader","currentDate","$cells","_getGroupCount","cellCountInDay","colSpan","isGroupedByDate","cellTemplate","horizontalGroupCount","cellsInGroup","_getWeekDuration","cellsCount","templateIndex","$th","text","_formatWeekdayAndDay","templateOptions","model","_getGroupsForDateHeaderTemplate","container","render","attr","push","_incrementDate","$row","append","before","_renderView","_setFirstViewDate","groupCellTemplates","isRenovatedRender","_renderGroupHeader","renderRWorkspace","_renderDateTable","_shader","appendTo","_sidebarScrollable","$content","_isVerticalGroupedWorkSpace","renderRGroupPanel","_applyCellTemplates","_setHorizontalGroupHeaderCellsHeight","getIndicationCellCount","timeDiff","_getTimeDiff","_calculateDurationInCells","today","_getToday","_getIndicationFirstViewDate","differenceInDays","duration","getCellDuration","getHours","getIndicationWidth","cellCount","integerPart","fractionPart","getCellWidth","_renderIndicator","rtlOffset","$container","$indicator","width","_createIndicator","css","i","offset","_isVerticalShader","_isCurrentTimeHeaderCell","_visibilityChanged","visible","_setTableSizes","_this$virtualScrollin","cellHeight","getCellHeight","minHeight","_getWorkSpaceMinHeight","verticalGroupCount","virtualScrollingDispatcher","updateDimensions","workspaceContainerHeight","outerHeight","getHeaderPanelHeight","_makeGroupRows","groups","groupByDate","tableCreatorStrategy","VERTICAL","makeGroupedTable","groupRowClass","_getGroupRowClass","groupHeaderRowClass","groupHeaderClass","_getGroupHeaderClass","bind","groupHeaderContentClass","_getGroupHeaderContentClass","_ensureGroupHeaderCellsHeight","minCellHeight","_calculateMinCellHeight","dateTable","_getDateTable","dateTableRowSelector","_getDateTableRowClass","find","length","_getCellCoordinatesByIndex","_getCellByCoordinates","cellCoordinates","groupIndex","indexes","_groupedStrategy","prepareCellIndexes","eq","_getWorkSpaceWidth","trimTime","_getIntervalBetween","allDay","startDayHour","endDayHour","getStartViewDate","firstViewDateTime","hiddenInterval","timeZoneOffset","getTimezonesDifference","apptStart","fullInterval","fullDays","tailDuration","tailDelta","_getWeekendsCount","gapBeforeAppt","getAllDayContainer","getTimePanelWidth","getPositionShift","timeShift","positionShift","left","top","cellPosition","getVisibleBounds","isRtl","$scrollable","getScrollable","cellWidth","scrollableOffset","getScrollableOuterWidth","getScrollableScrollLeft","scrolledCellCount","visibleCellCount","totalCellCount","leftDate","rightDate","hours","minutes","getMinutes","right","getIntervalDuration","_supportCompactDropDownAppointments","getCellMinWidth","getWorkSpaceLeftOffset","scrollToTime","coordinates","_getScrollCoordinates","scrollable","getScrollableContainer","setTimeout","scrollBy","scrollLeft","_getRowCountWithAllDayRows","_setCurrentTimeCells","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","_cleanCurrentTimeCells","concat","removeClass","columnCountPerGroup","getCellIndexByDate","currentTimeCellIndex","Array","map","_","renovatedRenderSupported","renderRAllDayPanel","renderRTimeTable","generateRenderOptions","options","daysInView","isGenerateWeekDaysHeaderData","getWeekDaysHeaderText"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS\r\n} from \"../constants\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar HORIZONTAL = \"horizontal\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_HEADER_MARGIN = 10;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimeline extends SchedulerWorkSpace {\r\n    get verticalGroupTableClass() {\r\n        return GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrTimelineDateHeader\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(TIMELINE_CLASS);\r\n        this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS)\r\n    }\r\n    _getCellFromNextRow(direction, isMultiSelection) {\r\n        if (!isMultiSelection) {\r\n            return super._getCellFromNextRow(direction, isMultiSelection)\r\n        }\r\n        return this._$focusedCell\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"vertical\"\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace())\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            groupOrientation: \"vertical\"\r\n        })\r\n    }\r\n    _getRowCount() {\r\n        return 1\r\n    }\r\n    _getCellCount() {\r\n        return this._getCellCountInDay() * this.option(\"intervalCount\")\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0\r\n    }\r\n    _getTotalRowCount(groupCount) {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._getRowCount()\r\n        } else {\r\n            groupCount = groupCount || 1;\r\n            return this._getRowCount() * groupCount\r\n        }\r\n    }\r\n    _getDateForHeaderText(index) {\r\n        var firstViewDate = this._getValidFirstViewDateWithoutDST();\r\n        return this._getDateByIndexCore(firstViewDate, index)\r\n    }\r\n    _getDateByIndexCore(date, index) {\r\n        var result = new Date(date);\r\n        var dayIndex = Math.floor(index / this._getCellCountInDay());\r\n        result.setTime(date.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\r\n        return result\r\n    }\r\n    _getDateByIndex(index) {\r\n        var firstViewDate = this._getValidFirstViewDateWithoutDST();\r\n        var result = this._getDateByIndexCore(firstViewDate, index);\r\n        if (timeZoneUtils.isTimezoneChangeInDate(this._firstViewDate)) {\r\n            result.setDate(result.getDate() - 1)\r\n        }\r\n        return result\r\n    }\r\n    _getValidFirstViewDateWithoutDST() {\r\n        var newFirstViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this._firstViewDate);\r\n        newFirstViewDate.setHours(this.option(\"startDayHour\"));\r\n        return newFirstViewDate\r\n    }\r\n    _getFormat() {\r\n        return \"shorttime\"\r\n    }\r\n    _needApplyLastGroupCellClass() {\r\n        return true\r\n    }\r\n    _calculateHiddenInterval(rowIndex, cellIndex) {\r\n        var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\r\n        return dayIndex * this._getHiddenInterval()\r\n    }\r\n    _getMillisecondsOffset(rowIndex, cellIndex) {\r\n        cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\r\n        return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex)\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceScrollableElements()\r\n    }\r\n    _getWorkSpaceHeight() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            return getBoundingRect(this._$dateTable.get(0)).height\r\n        }\r\n        return getBoundingRect(this.$element().get(0)).height\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = super._dateTableScrollableConfig();\r\n        var timelineConfig = {\r\n            direction: HORIZONTAL\r\n        };\r\n        return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig)\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return true\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = super._headerScrollableConfig();\r\n        return extend(config, {\r\n            scrollByContent: true\r\n        })\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _getTableAllDay() {\r\n        return false\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"timeCellTemplate\")\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._$thead\r\n        }\r\n        return this._$sidebarTable\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _createAllDayPanelElements() {\r\n        return noop()\r\n    }\r\n    _renderDateHeader() {\r\n        var $headerRow = super._renderDateHeader();\r\n        if (this._needRenderWeekHeader()) {\r\n            var firstViewDate = new Date(this._firstViewDate);\r\n            var currentDate = new Date(firstViewDate);\r\n            var $cells = [];\r\n            var groupCount = this._getGroupCount();\r\n            var cellCountInDay = this._getCellCountInDay();\r\n            var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\r\n            var cellTemplate = this.option(\"dateCellTemplate\");\r\n            var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n            var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\r\n            var cellsCount = cellsInGroup * horizontalGroupCount;\r\n            for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\r\n                var $th = $(\"<th>\");\r\n                var text = this._formatWeekdayAndDay(currentDate);\r\n                if (cellTemplate) {\r\n                    var templateOptions = {\r\n                        model: _extends({\r\n                            text: text,\r\n                            date: new Date(currentDate)\r\n                        }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\r\n                        container: $th,\r\n                        index: templateIndex\r\n                    };\r\n                    cellTemplate.render(templateOptions)\r\n                } else {\r\n                    $th.text(text)\r\n                }\r\n                $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\r\n                $cells.push($th);\r\n                if (templateIndex % cellsInGroup === cellsInGroup - 1) {\r\n                    currentDate = new Date(firstViewDate)\r\n                } else {\r\n                    this._incrementDate(currentDate)\r\n                }\r\n            }\r\n            var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\r\n            $headerRow.before($row)\r\n        }\r\n    }\r\n    _needRenderWeekHeader() {\r\n        return false\r\n    }\r\n    _incrementDate(date) {\r\n        date.setDate(date.getDate() + 1)\r\n    }\r\n    _getWeekDuration() {\r\n        return 1\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        var groupCellTemplates;\r\n        if (!this.isRenovatedRender()) {\r\n            groupCellTemplates = this._renderGroupHeader()\r\n        }\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkspace()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._shader = new HorizontalShader(this);\r\n        this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\r\n        if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\r\n            this.renderRGroupPanel()\r\n        }\r\n        this._applyCellTemplates(groupCellTemplates)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        return noop()\r\n    }\r\n    getIndicationCellCount() {\r\n        var timeDiff = this._getTimeDiff();\r\n        return this._calculateDurationInCells(timeDiff)\r\n    }\r\n    _getTimeDiff() {\r\n        var today = this._getToday();\r\n        var date = this._getIndicationFirstViewDate();\r\n        return today.getTime() - date.getTime()\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        var today = this._getToday();\r\n        var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\r\n        var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\r\n        if (today.getHours() > this.option(\"endDayHour\")) {\r\n            duration = this._getCellCountInDay()\r\n        }\r\n        if (duration < 0) {\r\n            duration = 0\r\n        }\r\n        return differenceInDays * this._getCellCountInDay() + duration\r\n    }\r\n    getIndicationWidth() {\r\n        if (this.isGroupedByDate()) {\r\n            var cellCount = this.getIndicationCellCount();\r\n            var integerPart = Math.floor(cellCount);\r\n            var fractionPart = cellCount - integerPart;\r\n            return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart)\r\n        } else {\r\n            return this.getIndicationCellCount() * this.getCellWidth()\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var $indicator;\r\n        var width = this.getIndicationWidth();\r\n        if (\"vertical\" === this.option(\"groupOrientation\")) {\r\n            $indicator = this._createIndicator($container);\r\n            $indicator.height(getBoundingRect($container.get(0)).height);\r\n            $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width)\r\n        } else {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\r\n                $indicator = this._createIndicator($container);\r\n                $indicator.height(getBoundingRect($container.get(0)).height);\r\n                $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset)\r\n            }\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return false\r\n    }\r\n    _isCurrentTimeHeaderCell() {\r\n        return false\r\n    }\r\n    _visibilityChanged(visible) {\r\n        super._visibilityChanged(visible)\r\n    }\r\n    _setTableSizes() {\r\n        var _this$virtualScrollin;\r\n        var cellHeight = this.getCellHeight();\r\n        var minHeight = this._getWorkSpaceMinHeight();\r\n        var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\r\n        var height = cellHeight * verticalGroupCount;\r\n        if (height < minHeight) {\r\n            height = minHeight\r\n        }\r\n        this._$sidebarTable.height(height);\r\n        this._$dateTable.height(height);\r\n        super._setTableSizes();\r\n        null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.updateDimensions()\r\n    }\r\n    _getWorkSpaceMinHeight() {\r\n        var minHeight = this._getWorkSpaceHeight();\r\n        var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\r\n        if (minHeight < workspaceContainerHeight) {\r\n            minHeight = workspaceContainerHeight\r\n        }\r\n        return minHeight\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupHeaderRowClass: this._getGroupRowClass(),\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: this._getGroupHeaderContentClass()\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate)\r\n    }\r\n    _ensureGroupHeaderCellsHeight(cellHeight) {\r\n        var minCellHeight = this._calculateMinCellHeight();\r\n        if (cellHeight < minCellHeight) {\r\n            return minCellHeight\r\n        }\r\n        return cellHeight\r\n    }\r\n    _calculateMinCellHeight() {\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRowSelector = \".\" + this._getDateTableRowClass();\r\n        return getBoundingRect(dateTable).height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        return {\r\n            cellIndex: index % this._getCellCount(),\r\n            rowIndex: 0\r\n        }\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\r\n        return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this._$dateTable.outerWidth(true)\r\n    }\r\n    _getIndicationFirstViewDate() {\r\n        return dateUtils.trimTime(new Date(this._firstViewDate))\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var apptStart = currentDate.getTime();\r\n        var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\r\n        var fullDays = Math.floor(fullInterval / toMs(\"day\"));\r\n        var tailDuration = fullInterval - fullDays * toMs(\"day\");\r\n        var tailDelta = 0;\r\n        var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\r\n        var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\r\n        var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\r\n        if (!allDay) {\r\n            if (currentDate.getHours() < startDayHour) {\r\n                tailDelta = tailDuration - hiddenInterval + gapBeforeAppt\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\r\n                tailDelta = tailDuration\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\r\n                tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"))\r\n            } else if (!fullDays) {\r\n                result = fullInterval\r\n            }\r\n            result += tailDelta\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    getAllDayContainer() {\r\n        return null\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getPositionShift(timeShift) {\r\n        var positionShift = super.getPositionShift(timeShift);\r\n        var left = this.getCellWidth() * timeShift;\r\n        if (this.option(\"rtlEnabled\")) {\r\n            left *= -1\r\n        }\r\n        left += positionShift.left;\r\n        return {\r\n            top: 0,\r\n            left: left,\r\n            cellPosition: left\r\n        }\r\n    }\r\n    getVisibleBounds() {\r\n        var isRtl = this.option(\"rtlEnabled\");\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\r\n        var scrolledCellCount = scrollableOffset / cellWidth;\r\n        var visibleCellCount = $scrollable.width() / cellWidth;\r\n        var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\r\n        var leftDate = this._getDateByIndex(scrolledCellCount);\r\n        var rightDate = this._getDateByIndex(totalCellCount);\r\n        if (isRtl) {\r\n            leftDate = this._getDateByIndex(totalCellCount);\r\n            rightDate = this._getDateByIndex(scrolledCellCount)\r\n        }\r\n        result.left = {\r\n            hours: leftDate.getHours(),\r\n            minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(leftDate)\r\n        };\r\n        result.right = {\r\n            hours: rightDate.getHours(),\r\n            minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(rightDate)\r\n        };\r\n        return result\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return this.getCellDuration()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n    getCellMinWidth() {\r\n        return 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout((function() {\r\n                scrollable.scrollBy({\r\n                    left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                    top: 0\r\n                })\r\n            }))\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        return this._getRowCount()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"))\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var columnCountPerGroup = this._getCellCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            cellIndex: currentTimeCellIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeCellIndex) {\r\n            return []\r\n        }\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\r\n        return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeCellIndex)\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions(true);\r\n        var groupCount = this._getGroupCount();\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n        var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\r\n        var daysInView = cellsInGroup * horizontalGroupCount;\r\n        return _extends({}, options, {\r\n            isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\r\n            getWeekDaysHeaderText: this._formatWeekdayAndDay.bind(this),\r\n            daysInView: daysInView,\r\n            cellCountInDay: this._getCellCountInDay()\r\n        })\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\r\nexport default SchedulerTimeline;\r\n"]},"metadata":{},"sourceType":"module"}