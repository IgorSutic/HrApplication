{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\n\n// const clientId = '930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com'\n// const GoogleLogin : React.FC = () => {\n//     const onSuccess = (res:any) => {\n//         console.log(\"Login success: currentUser: \", res.profileObj);\n//         refreshTokenSetup(res);\n//     }\n//     const onFailure = (res:any) => {\n//         console.log(\"Login failed: res:\", res)\n//     }\n//     const {signIn } = useGoogleLogin({\n//         onSuccess,\n//         onFailure,\n//         clientId,\n//         isSignedIn: true,\n//         accessType: 'offline'\n//     });\n//     return (\n//         <div>\n//             <button onClick={signIn} className=\"button\" >\n//                 <img src=\"static/images/google.svg\" alt=\"google login\" className=\"icon\"></img>\n//                 <span className=\"buttonText\">Sign in with Google</span>\n//             </button>\n//         </div>\n//     )\n// }\nconst GoogleLogin = () => {\n  _s();\n\n  const [data, setData] = useState({\n    isAuthenticated: false,\n    token: '',\n    user: null\n  });\n  const {\n    isAuthenticated,\n    user\n  } = data;\n\n  const logout = () => {\n    setData({ ...data,\n      token: \"\",\n      user: null,\n      isAuthenticated: false\n    });\n  };\n\n  const onFailure = error => {\n    alert(error);\n  };\n\n  const responseGoogle = response => {\n    let tokenBlob = new Blob([JSON.stringify({\n      access_token: response.accessToken\n    }, null, 2)]);\n    let config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // The call takes the URl, the body (your stringified blob), and the headers config\n\n    axios.post('http://localhost:8000/api/auth/google/login', tokenBlob, config).then(response => {\n      const token = response.headers;\n\n      if (token) {\n        setData({ ...data,\n          token: token,\n          isAuthenticated: true\n        });\n      }\n    });\n  };\n};\n\n_s(GoogleLogin, \"ZaiDtDOsf9nYtCfirNA05W8Xrws=\");\n\n_c = GoogleLogin;\nexport default GoogleLogin; // function refreshTokenSetup(res: any) {\n//     throw new Error('Function not implemented.AAAA');\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/components/GoogleLogin.tsx"],"names":["axios","GoogleLogin","data","setData","useState","isAuthenticated","token","user","logout","onFailure","error","alert","responseGoogle","response","tokenBlob","Blob","JSON","stringify","access_token","accessToken","config","headers","post","then"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,WAAsB,GAAG,MAAM;AAAA;;AAEjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC;AAC7BC,IAAAA,eAAe,EAAG,KADW;AAE7BC,IAAAA,KAAK,EAAG,EAFqB;AAG7BC,IAAAA,IAAI,EAAG;AAHsB,GAAD,CAAhC;AAKA,QAAM;AAACF,IAAAA,eAAD;AAAkBE,IAAAA;AAAlB,MAA0BL,IAAhC;;AAGA,QAAMM,MAAM,GAAG,MAAM;AACjBL,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AACKI,MAAAA,KAAK,EAAE,EADZ;AACgBC,MAAAA,IAAI,EAAE,IADtB;AAC4BF,MAAAA,eAAe,EAAE;AAD7C,KAAD,CAAP;AAGH,GAJD;;AAMA,QAAMI,SAAS,GAAIC,KAAD,IAAW;AACzBC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH,GAFD;;AAIA,QAAME,cAAc,GAAIC,QAAD,IAAoB;AAEvC,QAAIC,SAAS,GAAG,IAAIC,IAAJ,CAAS,CACrBC,IAAI,CAACC,SAAL,CAAe;AACXC,MAAAA,YAAY,EAAEL,QAAQ,CAACM;AADZ,KAAf,EAEG,IAFH,EAES,CAFT,CADqB,CAAT,CAAhB;AAMA,QAAIC,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP;AADA,KAAb,CARuC,CAc7C;;AACMrB,IAAAA,KAAK,CAACsB,IAAN,CAAW,6CAAX,EAA0DR,SAA1D,EAAqEM,MAArE,EACCG,IADD,CACMV,QAAQ,IAAI;AACd,YAAMP,KAAK,GAAGO,QAAQ,CAACQ,OAAvB;;AACA,UAAIf,KAAJ,EAAU;AACNH,QAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AACKI,UAAAA,KAAK,EAAEA,KADZ;AACmBD,UAAAA,eAAe,EAAE;AADpC,SAAD,CAAP;AAGH;AACJ,KARD;AASH,GAxBD;AAyBH,CA7CD;;GAAMJ,W;;KAAAA,W;AA+CN,eAAeA,WAAf,C,CAEA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport React from 'react'\nimport {useGoogleLogin} from 'react-google-login';\n\n// const clientId = '930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com'\n\n// const GoogleLogin : React.FC = () => {\n\n//     const onSuccess = (res:any) => {\n//         console.log(\"Login success: currentUser: \", res.profileObj);\n//         refreshTokenSetup(res);\n//     }\n\n//     const onFailure = (res:any) => {\n//         console.log(\"Login failed: res:\", res)\n//     }\n\n//     const {signIn } = useGoogleLogin({\n//         onSuccess,\n//         onFailure,\n//         clientId,\n//         isSignedIn: true,\n//         accessType: 'offline'\n//     });\n\n//     return (\n//         <div>\n//             <button onClick={signIn} className=\"button\" >\n//                 <img src=\"static/images/google.svg\" alt=\"google login\" className=\"icon\"></img>\n//                 <span className=\"buttonText\">Sign in with Google</span>\n//             </button>\n//         </div>\n//     )\n// }\n\nconst GoogleLogin : React.FC = () => {\n\n    const [data, setData] = useState({\n        isAuthenticated : false,\n        token : '',\n        user : null\n    })\n    const {isAuthenticated, user} = data;\n\n\n    const logout = () => {\n        setData({\n            ...data, token: \"\", user: null, isAuthenticated: false\n        })\n    };\n\n    const onFailure = (error) => {\n        alert(error);\n    };\n\n    const responseGoogle = (response : any) => {\n\n        let tokenBlob = new Blob([\n            JSON.stringify({\n                access_token: response.accessToken\n            }, null, 2)\n        ]);\n\n        let config = {\n            headers: {\n            'Content-Type': 'application/json'\n            }\n        };\n\n  // The call takes the URl, the body (your stringified blob), and the headers config\n        axios.post('http://localhost:8000/api/auth/google/login', tokenBlob, config)\n        .then(response => {\n            const token = response.headers;\n            if (token){\n                setData({\n                    ...data, token: token, isAuthenticated: true\n                });\n            }\n        });\n    };\n}\n\nexport default GoogleLogin;\n\n// function refreshTokenSetup(res: any) {\n//     throw new Error('Function not implemented.AAAA');\n// }\n"]},"metadata":{},"sourceType":"module"}