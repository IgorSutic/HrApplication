{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { each } from \"../../../core/utils/iterator\";\nimport SchedulerWorkSpaceIndicator from \"./ui.scheduler.work_space.indicator\";\nimport dateLocalization from \"../../../localization/date\";\nimport timeZoneUtils from \"../utils.timeZone\";\n\nclass SchedulerWorkspaceVertical extends SchedulerWorkSpaceIndicator {\n  _getCellsBetween($first, $last) {\n    if (this._hasAllDayClass($last)) {\n      return super._getCellsBetween($first, $last);\n    }\n\n    var $cells = this._getCells();\n\n    var firstColumn = $first.index();\n    var firstRow = $first.parent().index();\n    var lastColumn = $last.index();\n    var lastRow = $last.parent().index();\n\n    var groupCount = this._getGroupCount();\n\n    var cellCount = groupCount > 0 ? this._getTotalCellCount(groupCount) : this._getCellCount();\n\n    var rowCount = this._getTotalRowCount(groupCount);\n\n    var result = [];\n\n    for (var i = 0; i < cellCount; i++) {\n      for (var j = 0; j < rowCount; j++) {\n        var cell = $cells.get(cellCount * j + i);\n        result.push(cell);\n      }\n    }\n\n    var lastCellGroup = this.getCellData($last).groups;\n    var indexesDifference = this.option(\"showAllDayPanel\") && this._isVerticalGroupedWorkSpace() ? this._getGroupIndexByResourceId(lastCellGroup) + 1 : 0;\n    var newFirstIndex = rowCount * firstColumn + firstRow - indexesDifference;\n    var newLastIndex = rowCount * lastColumn + lastRow - indexesDifference;\n\n    if (newFirstIndex > newLastIndex) {\n      var buffer = newFirstIndex;\n      newFirstIndex = newLastIndex;\n      newLastIndex = buffer;\n    }\n\n    $cells = $(result).slice(newFirstIndex, newLastIndex + 1);\n\n    if (this._getGroupCount()) {\n      var arr = [];\n\n      var focusedGroupIndex = this._getGroupIndexByCell($first);\n\n      each($cells, function (_, cell) {\n        var groupIndex = this._getGroupIndexByCell($(cell));\n\n        if (focusedGroupIndex === groupIndex) {\n          arr.push(cell);\n        }\n      }.bind(this));\n      $cells = $(arr);\n    }\n\n    return $cells;\n  }\n\n  _getCellFromNextColumn(direction, isMultiSelection) {\n    var $nextCell = super._getCellFromNextColumn(direction, isMultiSelection);\n\n    var $focusedCell = this._$focusedCell;\n\n    if ($focusedCell.parent().index() !== $nextCell.parent().index() && isMultiSelection) {\n      $nextCell = $focusedCell;\n    }\n\n    return $nextCell;\n  }\n\n  _getFormat() {\n    return this._formatWeekdayAndDay;\n  }\n\n  renovatedRenderSupported() {\n    return true;\n  }\n\n  generateRenderOptions() {\n    var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\n\n    var _getTimeText = (row, column) => {\n      var index = row % this._getRowCount();\n\n      if (index % 2 === 0 && 0 === column) {\n        return dateLocalization.format(this._getTimeCellDateCore(startViewDate, row), \"shorttime\");\n      }\n\n      return \"\";\n    };\n\n    var options = super.generateRenderOptions();\n    options.cellDataGetters.push((_, rowIndex, cellIndex) => ({\n      value: {\n        text: _getTimeText(rowIndex, cellIndex)\n      }\n    }));\n    return options;\n  }\n\n}\n\nexport default SchedulerWorkspaceVertical;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space_vertical.js"],"names":["$","each","SchedulerWorkSpaceIndicator","dateLocalization","timeZoneUtils","SchedulerWorkspaceVertical","_getCellsBetween","$first","$last","_hasAllDayClass","$cells","_getCells","firstColumn","index","firstRow","parent","lastColumn","lastRow","groupCount","_getGroupCount","cellCount","_getTotalCellCount","_getCellCount","rowCount","_getTotalRowCount","result","i","j","cell","get","push","lastCellGroup","getCellData","groups","indexesDifference","option","_isVerticalGroupedWorkSpace","_getGroupIndexByResourceId","newFirstIndex","newLastIndex","buffer","slice","arr","focusedGroupIndex","_getGroupIndexByCell","_","groupIndex","bind","_getCellFromNextColumn","direction","isMultiSelection","$nextCell","$focusedCell","_$focusedCell","_getFormat","_formatWeekdayAndDay","renovatedRenderSupported","generateRenderOptions","startViewDate","getDateWithoutTimezoneChange","getStartViewDate","_getTimeText","row","column","_getRowCount","format","_getTimeCellDateCore","options","cellDataGetters","rowIndex","cellIndex","value","text"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport SchedulerWorkSpaceIndicator from \"./ui.scheduler.work_space.indicator\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nclass SchedulerWorkspaceVertical extends SchedulerWorkSpaceIndicator {\r\n    _getCellsBetween($first, $last) {\r\n        if (this._hasAllDayClass($last)) {\r\n            return super._getCellsBetween($first, $last)\r\n        }\r\n        var $cells = this._getCells();\r\n        var firstColumn = $first.index();\r\n        var firstRow = $first.parent().index();\r\n        var lastColumn = $last.index();\r\n        var lastRow = $last.parent().index();\r\n        var groupCount = this._getGroupCount();\r\n        var cellCount = groupCount > 0 ? this._getTotalCellCount(groupCount) : this._getCellCount();\r\n        var rowCount = this._getTotalRowCount(groupCount);\r\n        var result = [];\r\n        for (var i = 0; i < cellCount; i++) {\r\n            for (var j = 0; j < rowCount; j++) {\r\n                var cell = $cells.get(cellCount * j + i);\r\n                result.push(cell)\r\n            }\r\n        }\r\n        var lastCellGroup = this.getCellData($last).groups;\r\n        var indexesDifference = this.option(\"showAllDayPanel\") && this._isVerticalGroupedWorkSpace() ? this._getGroupIndexByResourceId(lastCellGroup) + 1 : 0;\r\n        var newFirstIndex = rowCount * firstColumn + firstRow - indexesDifference;\r\n        var newLastIndex = rowCount * lastColumn + lastRow - indexesDifference;\r\n        if (newFirstIndex > newLastIndex) {\r\n            var buffer = newFirstIndex;\r\n            newFirstIndex = newLastIndex;\r\n            newLastIndex = buffer\r\n        }\r\n        $cells = $(result).slice(newFirstIndex, newLastIndex + 1);\r\n        if (this._getGroupCount()) {\r\n            var arr = [];\r\n            var focusedGroupIndex = this._getGroupIndexByCell($first);\r\n            each($cells, function(_, cell) {\r\n                var groupIndex = this._getGroupIndexByCell($(cell));\r\n                if (focusedGroupIndex === groupIndex) {\r\n                    arr.push(cell)\r\n                }\r\n            }.bind(this));\r\n            $cells = $(arr)\r\n        }\r\n        return $cells\r\n    }\r\n    _getCellFromNextColumn(direction, isMultiSelection) {\r\n        var $nextCell = super._getCellFromNextColumn(direction, isMultiSelection);\r\n        var $focusedCell = this._$focusedCell;\r\n        if ($focusedCell.parent().index() !== $nextCell.parent().index() && isMultiSelection) {\r\n            $nextCell = $focusedCell\r\n        }\r\n        return $nextCell\r\n    }\r\n    _getFormat() {\r\n        return this._formatWeekdayAndDay\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    generateRenderOptions() {\r\n        var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\r\n        var _getTimeText = (row, column) => {\r\n            var index = row % this._getRowCount();\r\n            if (index % 2 === 0 && 0 === column) {\r\n                return dateLocalization.format(this._getTimeCellDateCore(startViewDate, row), \"shorttime\")\r\n            }\r\n            return \"\"\r\n        };\r\n        var options = super.generateRenderOptions();\r\n        options.cellDataGetters.push((_, rowIndex, cellIndex) => ({\r\n            value: {\r\n                text: _getTimeText(rowIndex, cellIndex)\r\n            }\r\n        }));\r\n        return options\r\n    }\r\n}\r\nexport default SchedulerWorkspaceVertical;\r\n"]},"metadata":{},"sourceType":"module"}