{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\n\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var shaderHeight = this._getShaderHeight();\n\n    var maxHeight = this._getShaderMaxHeight();\n\n    var isSolidShader = shaderHeight > maxHeight;\n\n    if (shaderHeight > maxHeight) {\n      shaderHeight = maxHeight;\n    }\n\n    this._$shader.height(shaderHeight);\n\n    var groupCount = this._workSpace._getGroupCount() || 1;\n\n    if (this._workSpace.isGroupedByDate()) {\n      this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    } else {\n      this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    }\n  }\n\n  _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    for (var i = 0; i < groupCount; i++) {\n      var shaderWidth = this._getShaderWidth(i);\n\n      this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\n\n      !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\n\n      this._renderAllDayShader(shaderWidth, i);\n    }\n  }\n\n  _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    var shaderWidth = this._getShaderWidth(0);\n\n    var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\n\n    if (shaderHeight < 0) {\n      shaderHeight = 0;\n      bottomShaderWidth = shaderWidth;\n    }\n\n    this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\n\n    !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\n\n    this._renderAllDayShader(shaderWidth * groupCount, 0);\n  }\n\n  _renderTopShader($shader, height, width, i) {\n    this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\n    width && this._$topShader.width(width) && this._$topShader.height(height);\n\n    this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\n\n    this._$topShader.css(\"left\", this._getShaderOffset(i, width));\n\n    $shader.append(this._$topShader);\n  }\n\n  _renderBottomShader($shader, maxHeight, height, width, i) {\n    this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\n    var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\n    var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\n    this._$bottomShader.width(shaderWidth) && this._$bottomShader.height(shaderHeight);\n\n    this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\n\n    $shader.append(this._$bottomShader);\n  }\n\n  _renderAllDayShader(shaderWidth, i) {\n    if (this._workSpace.option(\"showAllDayPanel\")) {\n      this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\n\n      this._$allDayIndicator.height(this._workSpace.getAllDayHeight());\n\n      this._$allDayIndicator.width(shaderWidth);\n\n      this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\n\n      this._workSpace._$allDayPanel.prepend(this._$allDayIndicator);\n    }\n  }\n\n  _getShaderOffset(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderOffset(i, width);\n  }\n\n  _getShaderTopOffset(i) {\n    return this._workSpace.getGroupedStrategy().getShaderTopOffset(i);\n  }\n\n  _getShaderHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderHeight();\n  }\n\n  _getShaderMaxHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderMaxHeight();\n  }\n\n  _getShaderWidth(i) {\n    return this._workSpace.getGroupedStrategy().getShaderWidth(i);\n  }\n\n  clean() {\n    super.clean();\n    this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove();\n  }\n\n}\n\nexport default VerticalCurrentTimeShader;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js"],"names":["$","CurrentTimeShader","DATE_TIME_SHADER_ALL_DAY_CLASS","DATE_TIME_SHADER_TOP_CLASS","DATE_TIME_SHADER_BOTTOM_CLASS","VerticalCurrentTimeShader","renderShader","shaderHeight","_getShaderHeight","maxHeight","_getShaderMaxHeight","isSolidShader","_$shader","height","groupCount","_workSpace","_getGroupCount","isGroupedByDate","_renderGroupedByDateShaderParts","_renderShaderParts","i","shaderWidth","_getShaderWidth","_renderTopShader","_renderBottomShader","_renderAllDayShader","bottomShaderWidth","getCellWidth","$shader","width","_$topShader","addClass","css","_getShaderTopOffset","_getShaderOffset","append","_$bottomShader","option","_$allDayIndicator","getAllDayHeight","_$allDayPanel","prepend","getGroupedStrategy","getShaderOffset","getShaderTopOffset","getShaderHeight","getShaderMaxHeight","getShaderWidth","clean","find","remove"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\r\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\r\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\r\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var shaderHeight = this._getShaderHeight();\r\n        var maxHeight = this._getShaderMaxHeight();\r\n        var isSolidShader = shaderHeight > maxHeight;\r\n        if (shaderHeight > maxHeight) {\r\n            shaderHeight = maxHeight\r\n        }\r\n        this._$shader.height(shaderHeight);\r\n        var groupCount = this._workSpace._getGroupCount() || 1;\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        } else {\r\n            this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        }\r\n    }\r\n    _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var shaderWidth = this._getShaderWidth(i);\r\n            this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\r\n            !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\r\n            this._renderAllDayShader(shaderWidth, i)\r\n        }\r\n    }\r\n    _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        var shaderWidth = this._getShaderWidth(0);\r\n        var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\r\n        if (shaderHeight < 0) {\r\n            shaderHeight = 0;\r\n            bottomShaderWidth = shaderWidth\r\n        }\r\n        this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\r\n        !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\r\n        this._renderAllDayShader(shaderWidth * groupCount, 0)\r\n    }\r\n    _renderTopShader($shader, height, width, i) {\r\n        this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\r\n        width && this._$topShader.width(width) && this._$topShader.height(height);\r\n        this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\r\n        this._$topShader.css(\"left\", this._getShaderOffset(i, width));\r\n        $shader.append(this._$topShader)\r\n    }\r\n    _renderBottomShader($shader, maxHeight, height, width, i) {\r\n        this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\r\n        var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\r\n        var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\r\n        this._$bottomShader.width(shaderWidth) && this._$bottomShader.height(shaderHeight);\r\n        this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\r\n        $shader.append(this._$bottomShader)\r\n    }\r\n    _renderAllDayShader(shaderWidth, i) {\r\n        if (this._workSpace.option(\"showAllDayPanel\")) {\r\n            this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\r\n            this._$allDayIndicator.height(this._workSpace.getAllDayHeight());\r\n            this._$allDayIndicator.width(shaderWidth);\r\n            this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\r\n            this._workSpace._$allDayPanel.prepend(this._$allDayIndicator)\r\n        }\r\n    }\r\n    _getShaderOffset(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderOffset(i, width)\r\n    }\r\n    _getShaderTopOffset(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderTopOffset(i)\r\n    }\r\n    _getShaderHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderHeight()\r\n    }\r\n    _getShaderMaxHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderMaxHeight()\r\n    }\r\n    _getShaderWidth(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderWidth(i)\r\n    }\r\n    clean() {\r\n        super.clean();\r\n        this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove()\r\n    }\r\n}\r\nexport default VerticalCurrentTimeShader;\r\n"]},"metadata":{},"sourceType":"module"}