{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { merge } from \"../../../core/utils/array\";\nimport BaseRenderingStrategy from \"./ui.scheduler.appointments.strategy.base\";\n\nclass AgendaRenderingStrategy extends BaseRenderingStrategy {\n  getAppointmentMinSize() {}\n\n  getDeltaTime() {}\n\n  keepAppointmentSettings() {\n    return true;\n  }\n\n  getAppointmentGeometry(geometry) {\n    return geometry;\n  }\n\n  createTaskPositionMap(appointments) {\n    var height;\n    var appointmentsByResources;\n\n    if (appointments.length) {\n      height = this.instance.fire(\"getAgendaVerticalStepHeight\");\n      appointmentsByResources = this.instance.fire(\"groupAppointmentsByResources\", appointments);\n      var groupedAppts = [];\n      each(appointmentsByResources, function (i, appts) {\n        var additionalAppointments = [];\n        var recurrentIndexes = [];\n        each(appts, function (index, appointment) {\n          var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\n\n          var appointmentBatch = null;\n\n          if (!recurrenceBatch.indexes.length) {\n            appointmentBatch = {\n              parts: []\n            };\n            appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\n            additionalAppointments = additionalAppointments.concat(appointmentBatch.parts);\n          }\n\n          additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\n          recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes);\n        }.bind(this));\n\n        this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\n\n        this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\n\n        groupedAppts = groupedAppts.concat(appts);\n      }.bind(this));\n      Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts));\n    }\n\n    var result = [];\n    var sortedIndex = 0;\n    appointments.forEach(function (appt, index) {\n      result.push([{\n        height: height,\n        width: \"100%\",\n        sortedIndex: sortedIndex++,\n        groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\n        agendaSettings: appt.settings\n      }]);\n      delete appt.settings;\n    }.bind(this));\n    return result;\n  }\n\n  _calculateGroupIndex(apptIndex, appointmentsByResources) {\n    var resultInd;\n    var counter = 0;\n\n    for (var i in appointmentsByResources) {\n      var countApptInGroup = appointmentsByResources[i].length;\n\n      if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\n        resultInd = Number(i);\n        break;\n      }\n\n      counter += countApptInGroup;\n    }\n\n    return resultInd;\n  }\n\n  _getDeltaWidth() {}\n\n  _getAppointmentMaxWidth() {\n    return this.getDefaultCellWidth();\n  }\n\n  _needVerifyItemSize() {\n    return false;\n  }\n\n  _isRtl() {\n    return this.instance.option(\"rtlEnabled\");\n  }\n\n  _getAppointmentParts() {}\n\n  _reduceMultiWeekAppointment() {}\n\n  calculateAppointmentHeight() {\n    return 0;\n  }\n\n  calculateAppointmentWidth() {\n    return 0;\n  }\n\n  isAppointmentGreaterThan() {}\n\n  isAllDay() {\n    return false;\n  }\n\n  _sortCondition() {}\n\n  _rowCondition() {}\n\n  _columnCondition() {}\n\n  _findIndexByKey() {}\n\n  _markAppointmentAsVirtual() {}\n\n  getDropDownAppointmentWidth() {}\n\n  getDefaultCellWidth() {\n    return this._defaultWidth;\n  }\n\n  getCollectorLeftOffset() {}\n\n  getCollectorTopOffset() {}\n\n  calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\n    this._rows = [];\n    var groupedAppointments = this.instance.fire(\"groupAppointmentsByResources\", appointments);\n    currentDate = dateUtils.trimTime(new Date(currentDate));\n    each(groupedAppointments, function (groupIndex, currentAppointments) {\n      var groupResult = [];\n      var appts = {\n        indexes: [],\n        parts: []\n      };\n\n      if (!currentAppointments.length) {\n        this._rows.push([]);\n\n        return true;\n      }\n\n      each(currentAppointments, function (index, appointment) {\n        var startDate = this.instance.fire(\"getField\", \"startDate\", appointment);\n        var endDate = this.instance.fire(\"getField\", \"endDate\", appointment);\n        this.instance.fire(\"replaceWrongEndDate\", appointment, startDate, endDate);\n        needClearSettings && delete appointment.settings;\n\n        var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\n\n        appts.parts = appts.parts.concat(result.parts);\n        appts.indexes = appts.indexes.concat(result.indexes);\n      }.bind(this));\n\n      this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\n\n      merge(currentAppointments, appts.parts);\n      var appointmentCount = currentAppointments.length;\n\n      for (var i = 0; i < agendaDuration; i++) {\n        var day = new Date(currentDate);\n        day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\n\n        if (void 0 === groupResult[i]) {\n          groupResult[i] = 0;\n        }\n\n        for (var j = 0; j < appointmentCount; j++) {\n          var appointmentData = currentAppointments[j].settings || currentAppointments[j];\n          var appointmentIsLong = this.instance.fire(\"appointmentTakesSeveralDays\", currentAppointments[j]);\n          var appointmentIsRecurrence = this.instance.fire(\"getField\", \"recurrenceRule\", currentAppointments[j]);\n\n          if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\n            groupResult[i] += 1;\n          }\n        }\n      }\n\n      this._rows.push(groupResult);\n    }.bind(this));\n    return this._rows;\n  }\n\n  _iterateRow(row, obj, index) {\n    for (var i = 0; i < row.length; i++) {\n      obj.counter = obj.counter + row[i];\n\n      if (obj.counter >= index) {\n        obj.indexInRow = i;\n        break;\n      }\n    }\n  }\n\n  getDateByIndex(index, rows, startViewDate) {\n    var obj = {\n      counter: 0,\n      indexInRow: 0\n    };\n    index++;\n\n    for (var i = 0; i < rows.length; i++) {\n      this._iterateRow(rows[i], obj, index);\n\n      if (obj.indexInRow) {\n        break;\n      }\n    }\n\n    return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow));\n  }\n\n  getAppointmentDataCalculator() {\n    return function ($appointment, originalStartDate) {\n      var apptIndex = $appointment.index();\n      var startViewDate = this.instance.getStartViewDate();\n      var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\n      var wrappedOriginalStartDate = new Date(originalStartDate);\n      return {\n        startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\n      };\n    }.bind(this);\n  }\n\n}\n\nexport default AgendaRenderingStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js"],"names":["dateUtils","each","merge","BaseRenderingStrategy","AgendaRenderingStrategy","getAppointmentMinSize","getDeltaTime","keepAppointmentSettings","getAppointmentGeometry","geometry","createTaskPositionMap","appointments","height","appointmentsByResources","length","instance","fire","groupedAppts","i","appts","additionalAppointments","recurrentIndexes","index","appointment","recurrenceBatch","getAppointmentsInstance","_processRecurrenceAppointment","appointmentBatch","indexes","parts","_processLongAppointment","concat","bind","_reduceRecurrenceAppointments","_combineAppointments","Array","prototype","splice","apply","result","sortedIndex","forEach","appt","push","width","groupIndex","_calculateGroupIndex","agendaSettings","settings","apptIndex","resultInd","counter","countApptInGroup","Number","_getDeltaWidth","_getAppointmentMaxWidth","getDefaultCellWidth","_needVerifyItemSize","_isRtl","option","_getAppointmentParts","_reduceMultiWeekAppointment","calculateAppointmentHeight","calculateAppointmentWidth","isAppointmentGreaterThan","isAllDay","_sortCondition","_rowCondition","_columnCondition","_findIndexByKey","_markAppointmentAsVirtual","getDropDownAppointmentWidth","_defaultWidth","getCollectorLeftOffset","getCollectorTopOffset","calculateRows","agendaDuration","currentDate","needClearSettings","_rows","groupedAppointments","trimTime","Date","currentAppointments","groupResult","startDate","endDate","appointmentCount","day","setMilliseconds","getMilliseconds","j","appointmentData","appointmentIsLong","appointmentIsRecurrence","_iterateRow","row","obj","indexInRow","getDateByIndex","rows","startViewDate","setDate","getDate","getAppointmentDataCalculator","$appointment","originalStartDate","getStartViewDate","calculatedStartDate","wrappedOriginalStartDate","setHours","getHours","getMinutes","getSeconds"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,SACIC,IADJ,QAEO,8BAFP;AAGA,SACIC,KADJ,QAEO,2BAFP;AAGA,OAAOC,qBAAP,MAAkC,2CAAlC;;AACA,MAAMC,uBAAN,SAAsCD,qBAAtC,CAA4D;AACxDE,EAAAA,qBAAqB,GAAG,CAAE;;AAC1BC,EAAAA,YAAY,GAAG,CAAE;;AACjBC,EAAAA,uBAAuB,GAAG;AACtB,WAAO,IAAP;AACH;;AACDC,EAAAA,sBAAsB,CAACC,QAAD,EAAW;AAC7B,WAAOA,QAAP;AACH;;AACDC,EAAAA,qBAAqB,CAACC,YAAD,EAAe;AAChC,QAAIC,MAAJ;AACA,QAAIC,uBAAJ;;AACA,QAAIF,YAAY,CAACG,MAAjB,EAAyB;AACrBF,MAAAA,MAAM,GAAG,KAAKG,QAAL,CAAcC,IAAd,CAAmB,6BAAnB,CAAT;AACAH,MAAAA,uBAAuB,GAAG,KAAKE,QAAL,CAAcC,IAAd,CAAmB,8BAAnB,EAAmDL,YAAnD,CAA1B;AACA,UAAIM,YAAY,GAAG,EAAnB;AACAhB,MAAAA,IAAI,CAACY,uBAAD,EAA0B,UAASK,CAAT,EAAYC,KAAZ,EAAmB;AAC7C,YAAIC,sBAAsB,GAAG,EAA7B;AACA,YAAIC,gBAAgB,GAAG,EAAvB;AACApB,QAAAA,IAAI,CAACkB,KAAD,EAAQ,UAASG,KAAT,EAAgBC,WAAhB,EAA6B;AACrC,cAAIC,eAAe,GAAG,KAAKT,QAAL,CAAcU,uBAAd,GAAwCC,6BAAxC,CAAsEH,WAAtE,EAAmFD,KAAnF,CAAtB;;AACA,cAAIK,gBAAgB,GAAG,IAAvB;;AACA,cAAI,CAACH,eAAe,CAACI,OAAhB,CAAwBd,MAA7B,EAAqC;AACjCa,YAAAA,gBAAgB,GAAG;AACfE,cAAAA,KAAK,EAAE;AADQ,aAAnB;AAGAF,YAAAA,gBAAgB,GAAG,KAAKZ,QAAL,CAAcU,uBAAd,GAAwCK,uBAAxC,CAAgEP,WAAhE,CAAnB;AACAH,YAAAA,sBAAsB,GAAGA,sBAAsB,CAACW,MAAvB,CAA8BJ,gBAAgB,CAACE,KAA/C,CAAzB;AACH;;AACDT,UAAAA,sBAAsB,GAAGA,sBAAsB,CAACW,MAAvB,CAA8BP,eAAe,CAACK,KAA9C,CAAzB;AACAR,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACU,MAAjB,CAAwBP,eAAe,CAACI,OAAxC,CAAnB;AACH,SAZW,CAYVI,IAZU,CAYL,IAZK,CAAR,CAAJ;;AAaA,aAAKjB,QAAL,CAAcU,uBAAd,GAAwCQ,6BAAxC,CAAsEZ,gBAAtE,EAAwFF,KAAxF;;AACA,aAAKJ,QAAL,CAAcU,uBAAd,GAAwCS,oBAAxC,CAA6Df,KAA7D,EAAoEC,sBAApE;;AACAH,QAAAA,YAAY,GAAGA,YAAY,CAACc,MAAb,CAAoBZ,KAApB,CAAf;AACH,OAnB6B,CAmB5Ba,IAnB4B,CAmBvB,IAnBuB,CAA1B,CAAJ;AAoBAG,MAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B3B,YAA7B,EAA2C,CAAC,CAAD,EAAIA,YAAY,CAACG,MAAjB,EAAyBiB,MAAzB,CAAgCd,YAAhC,CAA3C;AACH;;AACD,QAAIsB,MAAM,GAAG,EAAb;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA7B,IAAAA,YAAY,CAAC8B,OAAb,CAAqB,UAASC,IAAT,EAAepB,KAAf,EAAsB;AACvCiB,MAAAA,MAAM,CAACI,IAAP,CAAY,CAAC;AACT/B,QAAAA,MAAM,EAAEA,MADC;AAETgC,QAAAA,KAAK,EAAE,MAFE;AAGTJ,QAAAA,WAAW,EAAEA,WAAW,EAHf;AAITK,QAAAA,UAAU,EAAE,KAAKC,oBAAL,CAA0BxB,KAA1B,EAAiCT,uBAAjC,CAJH;AAKTkC,QAAAA,cAAc,EAAEL,IAAI,CAACM;AALZ,OAAD,CAAZ;AAOA,aAAON,IAAI,CAACM,QAAZ;AACH,KAToB,CASnBhB,IATmB,CASd,IATc,CAArB;AAUA,WAAOO,MAAP;AACH;;AACDO,EAAAA,oBAAoB,CAACG,SAAD,EAAYpC,uBAAZ,EAAqC;AACrD,QAAIqC,SAAJ;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIjC,CAAT,IAAcL,uBAAd,EAAuC;AACnC,UAAIuC,gBAAgB,GAAGvC,uBAAuB,CAACK,CAAD,CAAvB,CAA2BJ,MAAlD;;AACA,UAAImC,SAAS,IAAIE,OAAb,IAAwBF,SAAS,GAAGE,OAAO,GAAGC,gBAAlD,EAAoE;AAChEF,QAAAA,SAAS,GAAGG,MAAM,CAACnC,CAAD,CAAlB;AACA;AACH;;AACDiC,MAAAA,OAAO,IAAIC,gBAAX;AACH;;AACD,WAAOF,SAAP;AACH;;AACDI,EAAAA,cAAc,GAAG,CAAE;;AACnBC,EAAAA,uBAAuB,GAAG;AACtB,WAAO,KAAKC,mBAAL,EAAP;AACH;;AACDC,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAP;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAK3C,QAAL,CAAc4C,MAAd,CAAqB,YAArB,CAAP;AACH;;AACDC,EAAAA,oBAAoB,GAAG,CAAE;;AACzBC,EAAAA,2BAA2B,GAAG,CAAE;;AAChCC,EAAAA,0BAA0B,GAAG;AACzB,WAAO,CAAP;AACH;;AACDC,EAAAA,yBAAyB,GAAG;AACxB,WAAO,CAAP;AACH;;AACDC,EAAAA,wBAAwB,GAAG,CAAE;;AAC7BC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAP;AACH;;AACDC,EAAAA,cAAc,GAAG,CAAE;;AACnBC,EAAAA,aAAa,GAAG,CAAE;;AAClBC,EAAAA,gBAAgB,GAAG,CAAE;;AACrBC,EAAAA,eAAe,GAAG,CAAE;;AACpBC,EAAAA,yBAAyB,GAAG,CAAE;;AAC9BC,EAAAA,2BAA2B,GAAG,CAAE;;AAChCf,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKgB,aAAZ;AACH;;AACDC,EAAAA,sBAAsB,GAAG,CAAE;;AAC3BC,EAAAA,qBAAqB,GAAG,CAAE;;AAC1BC,EAAAA,aAAa,CAAChE,YAAD,EAAeiE,cAAf,EAA+BC,WAA/B,EAA4CC,iBAA5C,EAA+D;AACxE,SAAKC,KAAL,GAAa,EAAb;AACA,QAAIC,mBAAmB,GAAG,KAAKjE,QAAL,CAAcC,IAAd,CAAmB,8BAAnB,EAAmDL,YAAnD,CAA1B;AACAkE,IAAAA,WAAW,GAAG7E,SAAS,CAACiF,QAAV,CAAmB,IAAIC,IAAJ,CAASL,WAAT,CAAnB,CAAd;AACA5E,IAAAA,IAAI,CAAC+E,mBAAD,EAAsB,UAASnC,UAAT,EAAqBsC,mBAArB,EAA0C;AAChE,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIjE,KAAK,GAAG;AACRS,QAAAA,OAAO,EAAE,EADD;AAERC,QAAAA,KAAK,EAAE;AAFC,OAAZ;;AAIA,UAAI,CAACsD,mBAAmB,CAACrE,MAAzB,EAAiC;AAC7B,aAAKiE,KAAL,CAAWpC,IAAX,CAAgB,EAAhB;;AACA,eAAO,IAAP;AACH;;AACD1C,MAAAA,IAAI,CAACkF,mBAAD,EAAsB,UAAS7D,KAAT,EAAgBC,WAAhB,EAA6B;AACnD,YAAI8D,SAAS,GAAG,KAAKtE,QAAL,CAAcC,IAAd,CAAmB,UAAnB,EAA+B,WAA/B,EAA4CO,WAA5C,CAAhB;AACA,YAAI+D,OAAO,GAAG,KAAKvE,QAAL,CAAcC,IAAd,CAAmB,UAAnB,EAA+B,SAA/B,EAA0CO,WAA1C,CAAd;AACA,aAAKR,QAAL,CAAcC,IAAd,CAAmB,qBAAnB,EAA0CO,WAA1C,EAAuD8D,SAAvD,EAAkEC,OAAlE;AACAR,QAAAA,iBAAiB,IAAI,OAAOvD,WAAW,CAACyB,QAAxC;;AACA,YAAIT,MAAM,GAAG,KAAKxB,QAAL,CAAcU,uBAAd,GAAwCC,6BAAxC,CAAsEH,WAAtE,EAAmFD,KAAnF,EAA0F,KAA1F,CAAb;;AACAH,QAAAA,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACU,KAAN,CAAYE,MAAZ,CAAmBQ,MAAM,CAACV,KAA1B,CAAd;AACAV,QAAAA,KAAK,CAACS,OAAN,GAAgBT,KAAK,CAACS,OAAN,CAAcG,MAAd,CAAqBQ,MAAM,CAACX,OAA5B,CAAhB;AACH,OARyB,CAQxBI,IARwB,CAQnB,IARmB,CAAtB,CAAJ;;AASA,WAAKjB,QAAL,CAAcU,uBAAd,GAAwCQ,6BAAxC,CAAsEd,KAAK,CAACS,OAA5E,EAAqFuD,mBAArF;;AACAjF,MAAAA,KAAK,CAACiF,mBAAD,EAAsBhE,KAAK,CAACU,KAA5B,CAAL;AACA,UAAI0D,gBAAgB,GAAGJ,mBAAmB,CAACrE,MAA3C;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0D,cAApB,EAAoC1D,CAAC,EAArC,EAAyC;AACrC,YAAIsE,GAAG,GAAG,IAAIN,IAAJ,CAASL,WAAT,CAAV;AACAW,QAAAA,GAAG,CAACC,eAAJ,CAAoBD,GAAG,CAACE,eAAJ,KAAwB,QAAQxE,CAApD;;AACA,YAAI,KAAK,CAAL,KAAWkE,WAAW,CAAClE,CAAD,CAA1B,EAA+B;AAC3BkE,UAAAA,WAAW,CAAClE,CAAD,CAAX,GAAiB,CAAjB;AACH;;AACD,aAAK,IAAIyE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAApB,EAAsCI,CAAC,EAAvC,EAA2C;AACvC,cAAIC,eAAe,GAAGT,mBAAmB,CAACQ,CAAD,CAAnB,CAAuB3C,QAAvB,IAAmCmC,mBAAmB,CAACQ,CAAD,CAA5E;AACA,cAAIE,iBAAiB,GAAG,KAAK9E,QAAL,CAAcC,IAAd,CAAmB,6BAAnB,EAAkDmE,mBAAmB,CAACQ,CAAD,CAArE,CAAxB;AACA,cAAIG,uBAAuB,GAAG,KAAK/E,QAAL,CAAcC,IAAd,CAAmB,UAAnB,EAA+B,gBAA/B,EAAiDmE,mBAAmB,CAACQ,CAAD,CAApE,CAA9B;;AACA,cAAI,KAAK5E,QAAL,CAAcC,IAAd,CAAmB,mBAAnB,EAAwCwE,GAAxC,EAA6CI,eAA7C,EAA8D,IAA9D,KAAuE,CAACE,uBAAD,IAA4BD,iBAA5B,IAAiD,KAAK9E,QAAL,CAAcC,IAAd,CAAmB,mBAAnB,EAAwCwE,GAAxC,EAA6CL,mBAAmB,CAACQ,CAAD,CAAhE,EAAqE,IAArE,CAA5H,EAAwM;AACpMP,YAAAA,WAAW,CAAClE,CAAD,CAAX,IAAkB,CAAlB;AACH;AACJ;AACJ;;AACD,WAAK6D,KAAL,CAAWpC,IAAX,CAAgByC,WAAhB;AACH,KAtCyB,CAsCxBpD,IAtCwB,CAsCnB,IAtCmB,CAAtB,CAAJ;AAuCA,WAAO,KAAK+C,KAAZ;AACH;;AACDgB,EAAAA,WAAW,CAACC,GAAD,EAAMC,GAAN,EAAW3E,KAAX,EAAkB;AACzB,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8E,GAAG,CAAClF,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACjC+E,MAAAA,GAAG,CAAC9C,OAAJ,GAAc8C,GAAG,CAAC9C,OAAJ,GAAc6C,GAAG,CAAC9E,CAAD,CAA/B;;AACA,UAAI+E,GAAG,CAAC9C,OAAJ,IAAe7B,KAAnB,EAA0B;AACtB2E,QAAAA,GAAG,CAACC,UAAJ,GAAiBhF,CAAjB;AACA;AACH;AACJ;AACJ;;AACDiF,EAAAA,cAAc,CAAC7E,KAAD,EAAQ8E,IAAR,EAAcC,aAAd,EAA6B;AACvC,QAAIJ,GAAG,GAAG;AACN9C,MAAAA,OAAO,EAAE,CADH;AAEN+C,MAAAA,UAAU,EAAE;AAFN,KAAV;AAIA5E,IAAAA,KAAK;;AACL,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkF,IAAI,CAACtF,MAAzB,EAAiCI,CAAC,EAAlC,EAAsC;AAClC,WAAK6E,WAAL,CAAiBK,IAAI,CAAClF,CAAD,CAArB,EAA0B+E,GAA1B,EAA+B3E,KAA/B;;AACA,UAAI2E,GAAG,CAACC,UAAR,EAAoB;AAChB;AACH;AACJ;;AACD,WAAO,IAAIhB,IAAJ,CAAS,IAAIA,IAAJ,CAASmB,aAAT,EAAwBC,OAAxB,CAAgCD,aAAa,CAACE,OAAd,KAA0BN,GAAG,CAACC,UAA9D,CAAT,CAAP;AACH;;AACDM,EAAAA,4BAA4B,GAAG;AAC3B,WAAO,UAASC,YAAT,EAAuBC,iBAAvB,EAA0C;AAC7C,UAAIzD,SAAS,GAAGwD,YAAY,CAACnF,KAAb,EAAhB;AACA,UAAI+E,aAAa,GAAG,KAAKtF,QAAL,CAAc4F,gBAAd,EAApB;AACA,UAAIC,mBAAmB,GAAG,KAAKT,cAAL,CAAoBlD,SAApB,EAA+B,KAAK8B,KAApC,EAA2CsB,aAA3C,CAA1B;AACA,UAAIQ,wBAAwB,GAAG,IAAI3B,IAAJ,CAASwB,iBAAT,CAA/B;AACA,aAAO;AACHrB,QAAAA,SAAS,EAAE,IAAIH,IAAJ,CAAS0B,mBAAmB,CAACE,QAApB,CAA6BD,wBAAwB,CAACE,QAAzB,EAA7B,EAAkEF,wBAAwB,CAACG,UAAzB,EAAlE,EAAyGH,wBAAwB,CAACI,UAAzB,EAAzG,EAAgJJ,wBAAwB,CAACnB,eAAzB,EAAhJ,CAAT;AADR,OAAP;AAGH,KARM,CAQL1D,IARK,CAQA,IARA,CAAP;AASH;;AAhLuD;;AAkL5D,eAAe5B,uBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    merge\r\n} from \"../../../core/utils/array\";\r\nimport BaseRenderingStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nclass AgendaRenderingStrategy extends BaseRenderingStrategy {\r\n    getAppointmentMinSize() {}\r\n    getDeltaTime() {}\r\n    keepAppointmentSettings() {\r\n        return true\r\n    }\r\n    getAppointmentGeometry(geometry) {\r\n        return geometry\r\n    }\r\n    createTaskPositionMap(appointments) {\r\n        var height;\r\n        var appointmentsByResources;\r\n        if (appointments.length) {\r\n            height = this.instance.fire(\"getAgendaVerticalStepHeight\");\r\n            appointmentsByResources = this.instance.fire(\"groupAppointmentsByResources\", appointments);\r\n            var groupedAppts = [];\r\n            each(appointmentsByResources, function(i, appts) {\r\n                var additionalAppointments = [];\r\n                var recurrentIndexes = [];\r\n                each(appts, function(index, appointment) {\r\n                    var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\r\n                    var appointmentBatch = null;\r\n                    if (!recurrenceBatch.indexes.length) {\r\n                        appointmentBatch = {\r\n                            parts: []\r\n                        };\r\n                        appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\r\n                        additionalAppointments = additionalAppointments.concat(appointmentBatch.parts)\r\n                    }\r\n                    additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\r\n                    recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes)\r\n                }.bind(this));\r\n                this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\r\n                this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\r\n                groupedAppts = groupedAppts.concat(appts)\r\n            }.bind(this));\r\n            Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts))\r\n        }\r\n        var result = [];\r\n        var sortedIndex = 0;\r\n        appointments.forEach(function(appt, index) {\r\n            result.push([{\r\n                height: height,\r\n                width: \"100%\",\r\n                sortedIndex: sortedIndex++,\r\n                groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\r\n                agendaSettings: appt.settings\r\n            }]);\r\n            delete appt.settings\r\n        }.bind(this));\r\n        return result\r\n    }\r\n    _calculateGroupIndex(apptIndex, appointmentsByResources) {\r\n        var resultInd;\r\n        var counter = 0;\r\n        for (var i in appointmentsByResources) {\r\n            var countApptInGroup = appointmentsByResources[i].length;\r\n            if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\r\n                resultInd = Number(i);\r\n                break\r\n            }\r\n            counter += countApptInGroup\r\n        }\r\n        return resultInd\r\n    }\r\n    _getDeltaWidth() {}\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth()\r\n    }\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    _isRtl() {\r\n        return this.instance.option(\"rtlEnabled\")\r\n    }\r\n    _getAppointmentParts() {}\r\n    _reduceMultiWeekAppointment() {}\r\n    calculateAppointmentHeight() {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth() {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan() {}\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    _sortCondition() {}\r\n    _rowCondition() {}\r\n    _columnCondition() {}\r\n    _findIndexByKey() {}\r\n    _markAppointmentAsVirtual() {}\r\n    getDropDownAppointmentWidth() {}\r\n    getDefaultCellWidth() {\r\n        return this._defaultWidth\r\n    }\r\n    getCollectorLeftOffset() {}\r\n    getCollectorTopOffset() {}\r\n    calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\r\n        this._rows = [];\r\n        var groupedAppointments = this.instance.fire(\"groupAppointmentsByResources\", appointments);\r\n        currentDate = dateUtils.trimTime(new Date(currentDate));\r\n        each(groupedAppointments, function(groupIndex, currentAppointments) {\r\n            var groupResult = [];\r\n            var appts = {\r\n                indexes: [],\r\n                parts: []\r\n            };\r\n            if (!currentAppointments.length) {\r\n                this._rows.push([]);\r\n                return true\r\n            }\r\n            each(currentAppointments, function(index, appointment) {\r\n                var startDate = this.instance.fire(\"getField\", \"startDate\", appointment);\r\n                var endDate = this.instance.fire(\"getField\", \"endDate\", appointment);\r\n                this.instance.fire(\"replaceWrongEndDate\", appointment, startDate, endDate);\r\n                needClearSettings && delete appointment.settings;\r\n                var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\r\n                appts.parts = appts.parts.concat(result.parts);\r\n                appts.indexes = appts.indexes.concat(result.indexes)\r\n            }.bind(this));\r\n            this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\r\n            merge(currentAppointments, appts.parts);\r\n            var appointmentCount = currentAppointments.length;\r\n            for (var i = 0; i < agendaDuration; i++) {\r\n                var day = new Date(currentDate);\r\n                day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\r\n                if (void 0 === groupResult[i]) {\r\n                    groupResult[i] = 0\r\n                }\r\n                for (var j = 0; j < appointmentCount; j++) {\r\n                    var appointmentData = currentAppointments[j].settings || currentAppointments[j];\r\n                    var appointmentIsLong = this.instance.fire(\"appointmentTakesSeveralDays\", currentAppointments[j]);\r\n                    var appointmentIsRecurrence = this.instance.fire(\"getField\", \"recurrenceRule\", currentAppointments[j]);\r\n                    if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\r\n                        groupResult[i] += 1\r\n                    }\r\n                }\r\n            }\r\n            this._rows.push(groupResult)\r\n        }.bind(this));\r\n        return this._rows\r\n    }\r\n    _iterateRow(row, obj, index) {\r\n        for (var i = 0; i < row.length; i++) {\r\n            obj.counter = obj.counter + row[i];\r\n            if (obj.counter >= index) {\r\n                obj.indexInRow = i;\r\n                break\r\n            }\r\n        }\r\n    }\r\n    getDateByIndex(index, rows, startViewDate) {\r\n        var obj = {\r\n            counter: 0,\r\n            indexInRow: 0\r\n        };\r\n        index++;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            this._iterateRow(rows[i], obj, index);\r\n            if (obj.indexInRow) {\r\n                break\r\n            }\r\n        }\r\n        return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow))\r\n    }\r\n    getAppointmentDataCalculator() {\r\n        return function($appointment, originalStartDate) {\r\n            var apptIndex = $appointment.index();\r\n            var startViewDate = this.instance.getStartViewDate();\r\n            var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\r\n            var wrappedOriginalStartDate = new Date(originalStartDate);\r\n            return {\r\n                startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\r\n            }\r\n        }.bind(this)\r\n    }\r\n}\r\nexport default AgendaRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}