{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { isNumeric } from \"../../../core/utils/type\";\nimport dateUtils from \"../../../core/utils/date\";\nimport timeZoneUtils from \"./../utils.timeZone\";\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\n  getDeltaTime(args, initialSize, appointment) {\n    var deltaTime = 0;\n\n    if (this.isAllDay(appointment)) {\n      deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\");\n    } else {\n      var deltaHeight = args.height - initialSize.height;\n      deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.getDefaultCellHeight() * this.instance.getAppointmentDurationInMinutes());\n    }\n\n    return deltaTime;\n  }\n\n  _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n    if (isAllDay) {\n      super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n    } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\n      var cellHeight = this.getDefaultCellHeight();\n      var cellWidth = this.getDefaultCellWidth();\n      coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\n      coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2;\n    }\n  }\n\n  getAppointmentGeometry(coordinates) {\n    var geometry = null;\n\n    if (coordinates.allDay) {\n      geometry = this._getAllDayAppointmentGeometry(coordinates);\n    } else {\n      geometry = this._isAdaptive() && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates);\n    }\n\n    return super.getAppointmentGeometry(geometry);\n  }\n\n  _getAdaptiveGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n\n  _getItemPosition(appointment) {\n    var adapter = this.instance.createAppointmentAdapter(appointment);\n    var allDay = this.isAllDay(appointment);\n    var isRecurring = !!adapter.recurrenceRule;\n    var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\n    var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\n    var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\n\n    if (allDay) {\n      return super._getItemPosition(appointment);\n    }\n\n    var settings = this._getAppointmentCoordinates(appointment);\n\n    var result = [];\n\n    for (var j = 0; j < settings.length; j++) {\n      var currentSetting = settings[j];\n      var height = this.calculateAppointmentHeight(appointment, currentSetting);\n      var width = this.calculateAppointmentWidth(appointment, currentSetting);\n      var resultHeight = height;\n      var appointmentReduced = null;\n      var multiDaysAppointmentParts = [];\n      var currentMaxAllowedPosition = currentSetting.vMax;\n\n      if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\n        var reduceHead = dateUtils.sameDate(appointmentStartDate, currentSetting.info.appointment.startDate) || isRecurring;\n\n        if (reduceHead) {\n          resultHeight = this._reduceMultiDayAppointment(height, {\n            top: currentSetting.top,\n            bottom: currentMaxAllowedPosition\n          });\n          multiDaysAppointmentParts = this._getAppointmentParts({\n            sourceAppointmentHeight: height,\n            reducedHeight: resultHeight,\n            width: width\n          }, currentSetting);\n        }\n\n        var isMultiDay = this._isMultiDayAppointment(currentSetting, height);\n\n        if (isMultiDay) {\n          appointmentReduced = reduceHead ? \"head\" : \"tail\";\n        }\n      }\n\n      extend(currentSetting, {\n        height: resultHeight,\n        width: width,\n        allDay: allDay,\n        appointmentReduced: appointmentReduced\n      });\n      result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result);\n    }\n\n    return result;\n  }\n\n  _isMultiDayAppointment(position, height) {\n    if (this.isVirtualScrolling) {\n      var maxTop = this._getGroupHeight() - this._getGroupTopOffset(position);\n\n      return height > maxTop;\n    }\n\n    return false;\n  }\n\n  _isMultiViewAppointment(position, height) {\n    return height > position.vMax - position.top;\n  }\n\n  _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\n    sourceAppointmentHeight = bound.bottom - Math.floor(bound.top);\n    return sourceAppointmentHeight;\n  }\n\n  _getGroupHeight() {\n    var workspace = this.instance.getWorkSpace();\n    return workspace.getCellHeight() * workspace._getRowCount();\n  }\n\n  _getGroupTopOffset(appointmentSettings) {\n    var groupTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\n    var allDayPanelOffset = this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\n    var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\n    return appointmentGroupTopOffset;\n  }\n\n  _getTailHeight(appointmentGeometry, appointmentSettings) {\n    if (!this.isVirtualScrolling) {\n      return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight;\n    }\n\n    var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\n\n    var {\n      sourceAppointmentHeight: sourceAppointmentHeight\n    } = appointmentGeometry;\n\n    var groupHeight = this._getGroupHeight();\n\n    var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\n    return tailHeight;\n  }\n\n  _getAppointmentParts(appointmentGeometry, appointmentSettings) {\n    var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\n\n    var width = appointmentGeometry.width;\n    var result = [];\n    var currentPartTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\n    var cellsDiff = this.instance.fire(\"isGroupedByDate\") ? this.instance.fire(\"getGroupCount\") : 1;\n    var offset = this.getDefaultCellWidth() * cellsDiff;\n    var left = appointmentSettings.left + offset;\n\n    if (tailHeight > 0) {\n      var minHeight = this.getAppointmentMinSize();\n\n      if (tailHeight < minHeight) {\n        tailHeight = minHeight;\n      }\n\n      currentPartTop += this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\n      result.push(extend(true, {}, appointmentSettings, {\n        top: currentPartTop,\n        left: left,\n        height: tailHeight,\n        width: width,\n        appointmentReduced: \"tail\",\n        rowIndex: 0,\n        cellIndex: appointmentSettings.cellIndex + cellsDiff\n      }));\n    }\n\n    return result;\n  }\n\n  _getMinuteHeight() {\n    return this.getDefaultCellHeight() / this.instance.getAppointmentDurationInMinutes();\n  }\n\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    return itemLeft + (1 + cellWidth) * index;\n  }\n\n  _getVerticalAppointmentGeometry(coordinates) {\n    var config = this._calculateVerticalGeometryConfig(coordinates);\n\n    return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset);\n  }\n\n  _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\n    var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\n    var height = coordinates.height;\n    var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\n    var top = coordinates.top;\n\n    if (coordinates.isCompact) {\n      this._markAppointmentAsVirtual(coordinates, isAllDay);\n    }\n\n    return {\n      height: height,\n      width: appointmentWidth,\n      top: top,\n      left: appointmentLeft,\n      empty: this._isAppointmentEmpty(height, width)\n    };\n  }\n\n  _calculateVerticalGeometryConfig(coordinates) {\n    var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n    var offsets = this._getOffsets();\n\n    var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n\n    var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n\n    var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n\n    var maxWidth = this._getMaxWidth();\n\n    if (!appointmentCountPerCell) {\n      appointmentCountPerCell = coordinates.count;\n      ratio = (maxWidth - offsets.unlimited) / maxWidth;\n    }\n\n    var topOffset = (1 - ratio) * maxWidth;\n\n    if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n      ratio = 1;\n      maxWidth -= appointmentDefaultOffset;\n      topOffset = 0;\n    }\n\n    return {\n      width: ratio * maxWidth,\n      appointmentCountPerCell: appointmentCountPerCell,\n      offset: topOffset\n    };\n  }\n\n  _getMaxWidth() {\n    return this.getDefaultCellWidth() || this.invoke(\"getCellWidth\");\n  }\n\n  isAllDay(appointmentData) {\n    var allDay = this.instance.fire(\"getField\", \"allDay\", appointmentData);\n\n    if (allDay) {\n      return true;\n    }\n\n    return this.instance.appointmentTakesAllDay(appointmentData);\n  }\n\n  _getAppointmentMaxWidth() {\n    return this.getDefaultCellWidth() - this._getAppointmentDefaultOffset();\n  }\n\n  calculateAppointmentWidth(appointment, position) {\n    if (!this.isAllDay(appointment)) {\n      return 0;\n    }\n\n    var startDate = dateUtils.trimTime(position.info.appointment.startDate);\n    var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    var durationInHours = (endDate.getTime() - startDate.getTime()) / toMs(\"hour\");\n    var width = Math.ceil(durationInHours / 24) * cellWidth;\n    width = this.cropAppointmentWidth(width, cellWidth);\n    return width;\n  }\n\n  calculateAppointmentHeight(appointment, position) {\n    if (this.isAllDay(appointment)) {\n      return 0;\n    }\n\n    var startDate = position.info.appointment.startDate;\n    var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n    var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n\n    var fullDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n    var durationInMinutes = this._adjustDurationByDaylightDiff(fullDuration, startDate, endDate) / toMs(\"minute\");\n\n    var height = durationInMinutes * this._getMinuteHeight();\n\n    return height;\n  }\n\n  getDirection() {\n    return \"vertical\";\n  }\n\n  _sortCondition(a, b) {\n    var allDayCondition = a.allDay - b.allDay;\n    var isAllDay = a.allDay && b.allDay;\n    var condition = \"vertical\" === this.instance._groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\n    return allDayCondition ? allDayCondition : condition;\n  }\n\n  hasAllDayAppointments() {\n    return true;\n  }\n\n  _getAllDayAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true);\n  }\n\n  _calculateGeometryConfig(coordinates) {\n    if (!this.instance._allowResizing() || !this.instance._allowAllDayResizing()) {\n      coordinates.skipResizing = true;\n    }\n\n    var config = super._calculateGeometryConfig(coordinates);\n\n    if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\n      config.offset = 0;\n    }\n\n    return config;\n  }\n\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay);\n  }\n\n  _getDefaultRatio(coordinates, appointmentCountPerCell) {\n    return coordinates.count > this.instance.option(\"_appointmentCountPerCell\") ? .65 : 1;\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\n      auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\n    };\n  }\n\n  _getMaxHeight() {\n    return this.getDefaultAllDayCellHeight() || this.getAppointmentMinSize();\n  }\n\n  _needVerticalGroupBounds(allDay) {\n    return !allDay;\n  }\n\n  _needHorizontalGroupBounds() {\n    return false;\n  }\n\n}\n\nexport default VerticalRenderingStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js"],"names":["BaseAppointmentsStrategy","extend","isNumeric","dateUtils","timeZoneUtils","ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET","ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET","toMs","dateToMilliseconds","VerticalRenderingStrategy","getDeltaTime","args","initialSize","appointment","deltaTime","isAllDay","_getDeltaWidth","deltaHeight","height","Math","round","getDefaultCellHeight","instance","getAppointmentDurationInMinutes","_correctCollectorCoordinatesInAdaptive","coordinates","_getMaxAppointmentCountPerCellByType","cellHeight","cellWidth","getDefaultCellWidth","top","getDropDownButtonAdaptiveSize","left","getAppointmentGeometry","geometry","allDay","_getAllDayAppointmentGeometry","_isAdaptive","isCompact","_getAdaptiveGeometry","_getVerticalAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","appointmentCountPerCell","offset","_getItemPosition","adapter","createAppointmentAdapter","isRecurring","recurrenceRule","appointmentStartDate","calculateStartDate","appointmentEndDate","calculateEndDate","isAppointmentTakesSeveralDays","isSameAppointmentDates","settings","_getAppointmentCoordinates","result","j","length","currentSetting","calculateAppointmentHeight","width","calculateAppointmentWidth","resultHeight","appointmentReduced","multiDaysAppointmentParts","currentMaxAllowedPosition","vMax","_isMultiViewAppointment","reduceHead","sameDate","info","startDate","_reduceMultiDayAppointment","bottom","_getAppointmentParts","sourceAppointmentHeight","reducedHeight","isMultiDay","_isMultiDayAppointment","_getAppointmentPartsPosition","position","isVirtualScrolling","maxTop","_getGroupHeight","_getGroupTopOffset","bound","floor","workspace","getWorkSpace","getCellHeight","_getRowCount","appointmentSettings","groupTop","max","fire","groupIndex","allDayPanelOffset","appointmentGroupTopOffset","_getTailHeight","appointmentGeometry","groupHeight","tailHeight","currentPartTop","cellsDiff","minHeight","getAppointmentMinSize","push","rowIndex","cellIndex","_getMinuteHeight","_getCompactLeftCoordinate","itemLeft","index","_calculateVerticalGeometryConfig","_customizeVerticalCoordinates","topOffset","appointmentWidth","count","appointmentLeft","_markAppointmentAsVirtual","empty","_isAppointmentEmpty","overlappingMode","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxWidth","_getMaxWidth","unlimited","invoke","appointmentData","appointmentTakesAllDay","_getAppointmentMaxWidth","trimTime","endDate","normalizeEndDateByViewEnd","durationInHours","getTime","ceil","cropAppointmentWidth","fullDuration","_getAppointmentDurationInMs","durationInMinutes","_adjustDurationByDaylightDiff","getDirection","_sortCondition","a","b","allDayCondition","condition","_groupOrientation","_columnCondition","_rowCondition","hasAllDayAppointments","_allowResizing","_allowAllDayResizing","skipResizing","_getDynamicAppointmentCountPerCell","option","auto","_getMaxHeight","getDefaultAllDayCellHeight","_needVerticalGroupBounds","_needHorizontalGroupBounds"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport timeZoneUtils from \"./../utils.timeZone\";\r\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\r\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    getDeltaTime(args, initialSize, appointment) {\r\n        var deltaTime = 0;\r\n        if (this.isAllDay(appointment)) {\r\n            deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\")\r\n        } else {\r\n            var deltaHeight = args.height - initialSize.height;\r\n            deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.getDefaultCellHeight() * this.instance.getAppointmentDurationInMinutes())\r\n        }\r\n        return deltaTime\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        if (isAllDay) {\r\n            super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay)\r\n        } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\r\n            var cellHeight = this.getDefaultCellHeight();\r\n            var cellWidth = this.getDefaultCellWidth();\r\n            coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\r\n            coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2\r\n        }\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var geometry = null;\r\n        if (coordinates.allDay) {\r\n            geometry = this._getAllDayAppointmentGeometry(coordinates)\r\n        } else {\r\n            geometry = this._isAdaptive() && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates)\r\n        }\r\n        return super.getAppointmentGeometry(geometry)\r\n    }\r\n    _getAdaptiveGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var adapter = this.instance.createAppointmentAdapter(appointment);\r\n        var allDay = this.isAllDay(appointment);\r\n        var isRecurring = !!adapter.recurrenceRule;\r\n        var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\r\n        var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\r\n        var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\r\n        if (allDay) {\r\n            return super._getItemPosition(appointment)\r\n        }\r\n        var settings = this._getAppointmentCoordinates(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < settings.length; j++) {\r\n            var currentSetting = settings[j];\r\n            var height = this.calculateAppointmentHeight(appointment, currentSetting);\r\n            var width = this.calculateAppointmentWidth(appointment, currentSetting);\r\n            var resultHeight = height;\r\n            var appointmentReduced = null;\r\n            var multiDaysAppointmentParts = [];\r\n            var currentMaxAllowedPosition = currentSetting.vMax;\r\n            if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\r\n                var reduceHead = dateUtils.sameDate(appointmentStartDate, currentSetting.info.appointment.startDate) || isRecurring;\r\n                if (reduceHead) {\r\n                    resultHeight = this._reduceMultiDayAppointment(height, {\r\n                        top: currentSetting.top,\r\n                        bottom: currentMaxAllowedPosition\r\n                    });\r\n                    multiDaysAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentHeight: height,\r\n                        reducedHeight: resultHeight,\r\n                        width: width\r\n                    }, currentSetting)\r\n                }\r\n                var isMultiDay = this._isMultiDayAppointment(currentSetting, height);\r\n                if (isMultiDay) {\r\n                    appointmentReduced = reduceHead ? \"head\" : \"tail\"\r\n                }\r\n            }\r\n            extend(currentSetting, {\r\n                height: resultHeight,\r\n                width: width,\r\n                allDay: allDay,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result)\r\n        }\r\n        return result\r\n    }\r\n    _isMultiDayAppointment(position, height) {\r\n        if (this.isVirtualScrolling) {\r\n            var maxTop = this._getGroupHeight() - this._getGroupTopOffset(position);\r\n            return height > maxTop\r\n        }\r\n        return false\r\n    }\r\n    _isMultiViewAppointment(position, height) {\r\n        return height > position.vMax - position.top\r\n    }\r\n    _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\r\n        sourceAppointmentHeight = bound.bottom - Math.floor(bound.top);\r\n        return sourceAppointmentHeight\r\n    }\r\n    _getGroupHeight() {\r\n        var workspace = this.instance.getWorkSpace();\r\n        return workspace.getCellHeight() * workspace._getRowCount()\r\n    }\r\n    _getGroupTopOffset(appointmentSettings) {\r\n        var groupTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\r\n        var allDayPanelOffset = this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\r\n        var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\r\n        return appointmentGroupTopOffset\r\n    }\r\n    _getTailHeight(appointmentGeometry, appointmentSettings) {\r\n        if (!this.isVirtualScrolling) {\r\n            return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight\r\n        }\r\n        var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\r\n        var {\r\n            sourceAppointmentHeight: sourceAppointmentHeight\r\n        } = appointmentGeometry;\r\n        var groupHeight = this._getGroupHeight();\r\n        var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\r\n        return tailHeight\r\n    }\r\n    _getAppointmentParts(appointmentGeometry, appointmentSettings) {\r\n        var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\r\n        var width = appointmentGeometry.width;\r\n        var result = [];\r\n        var currentPartTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\r\n        var cellsDiff = this.instance.fire(\"isGroupedByDate\") ? this.instance.fire(\"getGroupCount\") : 1;\r\n        var offset = this.getDefaultCellWidth() * cellsDiff;\r\n        var left = appointmentSettings.left + offset;\r\n        if (tailHeight > 0) {\r\n            var minHeight = this.getAppointmentMinSize();\r\n            if (tailHeight < minHeight) {\r\n                tailHeight = minHeight\r\n            }\r\n            currentPartTop += this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\r\n            result.push(extend(true, {}, appointmentSettings, {\r\n                top: currentPartTop,\r\n                left: left,\r\n                height: tailHeight,\r\n                width: width,\r\n                appointmentReduced: \"tail\",\r\n                rowIndex: 0,\r\n                cellIndex: appointmentSettings.cellIndex + cellsDiff\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _getMinuteHeight() {\r\n        return this.getDefaultCellHeight() / this.instance.getAppointmentDurationInMinutes()\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return itemLeft + (1 + cellWidth) * index\r\n    }\r\n    _getVerticalAppointmentGeometry(coordinates) {\r\n        var config = this._calculateVerticalGeometryConfig(coordinates);\r\n        return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\r\n        var height = coordinates.height;\r\n        var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\r\n        var top = coordinates.top;\r\n        if (coordinates.isCompact) {\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: height,\r\n            width: appointmentWidth,\r\n            top: top,\r\n            left: appointmentLeft,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _calculateVerticalGeometryConfig(coordinates) {\r\n        var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxWidth = this._getMaxWidth();\r\n        if (!appointmentCountPerCell) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxWidth - offsets.unlimited) / maxWidth\r\n        }\r\n        var topOffset = (1 - ratio) * maxWidth;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxWidth -= appointmentDefaultOffset;\r\n            topOffset = 0\r\n        }\r\n        return {\r\n            width: ratio * maxWidth,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getMaxWidth() {\r\n        return this.getDefaultCellWidth() || this.invoke(\"getCellWidth\")\r\n    }\r\n    isAllDay(appointmentData) {\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointmentData);\r\n        if (allDay) {\r\n            return true\r\n        }\r\n        return this.instance.appointmentTakesAllDay(appointmentData)\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth() - this._getAppointmentDefaultOffset()\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        if (!this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = dateUtils.trimTime(position.info.appointment.startDate);\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        var durationInHours = (endDate.getTime() - startDate.getTime()) / toMs(\"hour\");\r\n        var width = Math.ceil(durationInHours / 24) * cellWidth;\r\n        width = this.cropAppointmentWidth(width, cellWidth);\r\n        return width\r\n    }\r\n    calculateAppointmentHeight(appointment, position) {\r\n        if (this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = position.info.appointment.startDate;\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var fullDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\r\n        var durationInMinutes = this._adjustDurationByDaylightDiff(fullDuration, startDate, endDate) / toMs(\"minute\");\r\n        var height = durationInMinutes * this._getMinuteHeight();\r\n        return height\r\n    }\r\n    getDirection() {\r\n        return \"vertical\"\r\n    }\r\n    _sortCondition(a, b) {\r\n        var allDayCondition = a.allDay - b.allDay;\r\n        var isAllDay = a.allDay && b.allDay;\r\n        var condition = \"vertical\" === this.instance._groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\r\n        return allDayCondition ? allDayCondition : condition\r\n    }\r\n    hasAllDayAppointments() {\r\n        return true\r\n    }\r\n    _getAllDayAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true)\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        if (!this.instance._allowResizing() || !this.instance._allowAllDayResizing()) {\r\n            coordinates.skipResizing = true\r\n        }\r\n        var config = super._calculateGeometryConfig(coordinates);\r\n        if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\r\n            config.offset = 0\r\n        }\r\n        return config\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay)\r\n    }\r\n    _getDefaultRatio(coordinates, appointmentCountPerCell) {\r\n        return coordinates.count > this.instance.option(\"_appointmentCountPerCell\") ? .65 : 1\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\r\n            auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\r\n        }\r\n    }\r\n    _getMaxHeight() {\r\n        return this.getDefaultAllDayCellHeight() || this.getAppointmentMinSize()\r\n    }\r\n    _needVerticalGroupBounds(allDay) {\r\n        return !allDay\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n}\r\nexport default VerticalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}