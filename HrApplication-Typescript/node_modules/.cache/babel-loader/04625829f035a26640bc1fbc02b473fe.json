{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport dateLocalization from \"../../../localization/date\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nimport { getViewStartByOptions } from \"./utils/month\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\n  get isDateAndTimeView() {\n    return false;\n  }\n\n  _toggleFixedScrollableClass() {\n    this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n  }\n\n  _getElementClass() {\n    return MONTH_CLASS;\n  }\n\n  _getRowCount() {\n    return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n  }\n\n  _getCellCount() {\n    return DAYS_IN_WEEK;\n  }\n\n  _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  }\n\n  _getFormat() {\n    return this._formatWeekday;\n  }\n\n  _calculateCellIndex(rowIndex, cellIndex) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      rowIndex %= this._getRowCount();\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    return rowIndex * this._getCellCount() + cellIndex;\n  }\n\n  _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  }\n\n  _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  }\n\n  _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = super._getDateByCellIndexes(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  }\n\n  getCellWidth() {\n    return this.cache.get(\"cellWidth\", () => {\n      var averageWidth = 0;\n\n      var cells = this._getCells().slice(0, 7);\n\n      cells.each((index, element) => {\n        averageWidth += getBoundingRect(element).width;\n      });\n      return 0 === cells.length ? void 0 : averageWidth / 7;\n    });\n  }\n\n  _calculateHiddenInterval() {\n    return 0;\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var cellIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    };\n  }\n\n  _createWorkSpaceElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      super._createWorkSpaceElements();\n    }\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  }\n\n  _renderTimePanel() {\n    return noop();\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _getTableAllDay() {\n    return noop();\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _changeAllDayVisibility() {\n    return noop();\n  }\n\n  _setFirstViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n\n    var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n    this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n\n    this._setStartDayHour(this._firstViewDate);\n\n    var date = this._getViewStartByOptions();\n\n    this._minVisibleDate = new Date(date.setDate(1));\n    this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), this._getStartViewDate());\n  }\n\n  _getStartViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n    return firstMonthDate;\n  }\n\n  _renderTableBody(options) {\n    options.getCellText = this._getCellText.bind(this);\n    options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n\n    super._renderTableBody(options);\n  }\n\n  _getCellText(rowIndex, cellIndex) {\n    if (this.isGroupedByDate()) {\n      cellIndex = Math.floor(cellIndex / this._getGroupCount());\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    var date = this._getDate(rowIndex, cellIndex);\n\n    if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n      return this._formatMonthAndDay(date);\n    }\n\n    return dateLocalization.format(date, \"dd\");\n  }\n\n  _formatMonthAndDay(date) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  }\n\n  _getDate(week, day) {\n    var result = new Date(this._firstViewDate);\n\n    var lastRowInDay = this._getRowCount();\n\n    result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n    return result;\n  }\n\n  _updateIndex(index) {\n    return index;\n  }\n\n  _prepareCellData(rowIndex, cellIndex, cell) {\n    var data = super._prepareCellData(rowIndex, cellIndex, cell);\n\n    var $cell = $(cell);\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n    return data;\n  }\n\n  _isCurrentDate(cellDate) {\n    return dateUtils.sameDate(cellDate, this._getToday());\n  }\n\n  _isFirstDayOfMonth(cellDate) {\n    return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n  }\n\n  _isOtherMonth(cellDate) {\n    return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n  }\n\n  isIndicationAvailable() {\n    return false;\n  }\n\n  getCellDuration() {\n    return 36e5 * this._calculateDayDuration();\n  }\n\n  getIntervalDuration() {\n    return toMs(\"day\");\n  }\n\n  getTimePanelWidth() {\n    return 0;\n  }\n\n  getPositionShift(timeShift) {\n    return {\n      cellPosition: timeShift * this.getCellWidth(),\n      top: 0,\n      left: 0\n    };\n  }\n\n  getCellCountToLastViewDate(date) {\n    var firstDateTime = date.getTime();\n    var lastDateTime = this.getEndViewDate().getTime();\n    var dayDurationInMs = this.getCellDuration();\n    return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  keepOriginalHours() {\n    return true;\n  }\n\n  calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  }\n\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n\n  needApplyCollectorOffset() {\n    return true;\n  }\n\n  _getDateTableBorderOffset() {\n    return this._getDateTableBorder();\n  }\n\n  _getCellPositionByIndex(index, groupIndex) {\n    var position = super._getCellPositionByIndex(index, groupIndex);\n\n    var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n    var calculatedTopOffset;\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      calculatedTopOffset = this.getCellHeight() * rowIndex;\n    } else {\n      calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n    }\n\n    if (calculatedTopOffset) {\n      position.top = calculatedTopOffset;\n    }\n\n    return position;\n  }\n\n  _getHeaderDate() {\n    return this._getViewStartByOptions();\n  }\n\n  _supportCompactDropDownAppointments() {\n    return false;\n  }\n\n  scrollToTime() {\n    return noop();\n  }\n\n  _createAllDayPanelElements() {}\n\n  _getRowCountWithAllDayRows() {\n    return this._getRowCount();\n  }\n\n  renovatedRenderSupported() {\n    return true;\n  }\n\n  renderRAllDayPanel() {}\n\n  renderRTimeTable() {}\n\n  renderRDateTable() {\n    this.renderRComponent(this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  generateRenderOptions() {\n    var options = super.generateRenderOptions();\n    options.cellDataGetters.push((_, rowIndex, cellIndex) => ({\n      value: {\n        text: this._getCellText(rowIndex, cellIndex)\n      }\n    }));\n    options.cellDataGetters.push((_, rowIndex, cellIndex, groupIndex, startDate) => ({\n      value: {\n        today: this._isCurrentDate(startDate),\n        otherMonth: this._isOtherMonth(startDate),\n        firstDayOfMonth: this._isFirstDayOfMonth(startDate)\n      }\n    }));\n    return options;\n  }\n\n}\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js"],"names":["$","noop","registerComponent","SchedulerWorkSpace","dateUtils","getBoundingRect","dateLocalization","dxrMonthDateTableLayout","getViewStartByOptions","MONTH_CLASS","DATE_TABLE_CURRENT_DATE_CLASS","DATE_TABLE_CELL_TEXT_CLASS","DATE_TABLE_FIRST_OF_MONTH_CLASS","DATE_TABLE_OTHER_MONTH_DATE_CLASS","DATE_TABLE_SCROLLABLE_FIXED_CLASS","DAYS_IN_WEEK","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerWorkSpaceMonth","isDateAndTimeView","_toggleFixedScrollableClass","_dateTableScrollable","$content","toggleClass","_isWorkSpaceWithCount","_isVerticalGroupedWorkSpace","_getElementClass","_getRowCount","option","_getCellCount","_getDateByIndex","headerIndex","resultDate","Date","_firstViewDate","setDate","getDate","_getFormat","_formatWeekday","_calculateCellIndex","rowIndex","cellIndex","_getInterval","_getIntervalBetween","currentDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","getTime","_getDateByCellIndexes","date","_setStartDayHour","getCellWidth","cache","get","averageWidth","cells","_getCells","slice","each","index","element","width","length","_calculateHiddenInterval","_insertAllDayRowsIntoDateTable","_getCellCoordinatesByIndex","Math","floor","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_needCreateCrossScrolling","_renderTimePanel","_renderAllDayPanel","_getTableAllDay","_toggleAllDayVisibility","_changeAllDayVisibility","_setFirstViewDate","firstMonthDate","getFirstMonthDate","_getViewStartByOptions","firstDayOfWeek","_getCalculatedFirstDayOfWeek","getFirstWeekDate","_minVisibleDate","_maxVisibleDate","setMonth","getMonth","_getStartViewDate","_renderTableBody","options","getCellText","_getCellText","bind","getCellTextClass","isGroupedByDate","_getGroupCount","_getDate","_isFirstDayOfMonth","_formatMonthAndDay","format","monthName","getMonthNames","join","week","day","result","lastRowInDay","_updateIndex","_prepareCellData","cell","data","$cell","_isCurrentDate","startDate","_isOtherMonth","cellDate","sameDate","_getToday","dateInRange","isIndicationAvailable","getCellDuration","_calculateDayDuration","getIntervalDuration","getTimePanelWidth","getPositionShift","timeShift","cellPosition","top","left","getCellCountToLastViewDate","firstDateTime","lastDateTime","getEndViewDate","dayDurationInMs","ceil","supportAllDayRow","keepOriginalHours","calculateEndDate","startDateCopy","setHours","getWorkSpaceLeftOffset","needApplyCollectorOffset","_getDateTableBorderOffset","_getDateTableBorder","_getCellPositionByIndex","groupIndex","position","calculatedTopOffset","getCellHeight","_getHeaderDate","_supportCompactDropDownAppointments","scrollToTime","_createAllDayPanelElements","_getRowCountWithAllDayRows","renovatedRenderSupported","renderRAllDayPanel","renderRTimeTable","renderRDateTable","renderRComponent","_$dateTable","_getRDateTableProps","generateRenderOptions","cellDataGetters","push","_","value","text","today","otherMonth","firstDayOfMonth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\r\nimport {\r\n    getViewStartByOptions\r\n} from \"./utils/month\";\r\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\r\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\r\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\r\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\r\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\r\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\r\nvar DAYS_IN_WEEK = 7;\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\r\n    get isDateAndTimeView() {\r\n        return false\r\n    }\r\n    _toggleFixedScrollableClass() {\r\n        this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getElementClass() {\r\n        return MONTH_CLASS\r\n    }\r\n    _getRowCount() {\r\n        return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6\r\n    }\r\n    _getCellCount() {\r\n        return DAYS_IN_WEEK\r\n    }\r\n    _getDateByIndex(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    }\r\n    _getFormat() {\r\n        return this._formatWeekday\r\n    }\r\n    _calculateCellIndex(rowIndex, cellIndex) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            rowIndex %= this._getRowCount()\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        return rowIndex * this._getCellCount() + cellIndex\r\n    }\r\n    _getInterval() {\r\n        return DAY_IN_MILLISECONDS\r\n    }\r\n    _getIntervalBetween(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex) {\r\n        var date = super._getDateByCellIndexes(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    }\r\n    getCellWidth() {\r\n        return this.cache.get(\"cellWidth\", () => {\r\n            var averageWidth = 0;\r\n            var cells = this._getCells().slice(0, 7);\r\n            cells.each((index, element) => {\r\n                averageWidth += getBoundingRect(element).width\r\n            });\r\n            return 0 === cells.length ? void 0 : averageWidth / 7\r\n        })\r\n    }\r\n    _calculateHiddenInterval() {\r\n        return 0\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var rowIndex = Math.floor(index / this._getCellCount());\r\n        var cellIndex = index - this._getCellCount() * rowIndex;\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            super._createWorkSpaceElements()\r\n        }\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _getTableAllDay() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _setFirstViewDate() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\r\n        var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\r\n        this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\r\n        this._setStartDayHour(this._firstViewDate);\r\n        var date = this._getViewStartByOptions();\r\n        this._minVisibleDate = new Date(date.setDate(1));\r\n        this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0))\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), this._getStartViewDate())\r\n    }\r\n    _getStartViewDate() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\r\n        return firstMonthDate\r\n    }\r\n    _renderTableBody(options) {\r\n        options.getCellText = this._getCellText.bind(this);\r\n        options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\r\n        super._renderTableBody(options)\r\n    }\r\n    _getCellText(rowIndex, cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        var date = this._getDate(rowIndex, cellIndex);\r\n        if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\r\n            return this._formatMonthAndDay(date)\r\n        }\r\n        return dateLocalization.format(date, \"dd\")\r\n    }\r\n    _formatMonthAndDay(date) {\r\n        var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, dateLocalization.format(date, \"day\")].join(\" \")\r\n    }\r\n    _getDate(week, day) {\r\n        var result = new Date(this._firstViewDate);\r\n        var lastRowInDay = this._getRowCount();\r\n        result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\r\n        return result\r\n    }\r\n    _updateIndex(index) {\r\n        return index\r\n    }\r\n    _prepareCellData(rowIndex, cellIndex, cell) {\r\n        var data = super._prepareCellData(rowIndex, cellIndex, cell);\r\n        var $cell = $(cell);\r\n        $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\r\n        return data\r\n    }\r\n    _isCurrentDate(cellDate) {\r\n        return dateUtils.sameDate(cellDate, this._getToday())\r\n    }\r\n    _isFirstDayOfMonth(cellDate) {\r\n        return this._isWorkSpaceWithCount() && 1 === cellDate.getDate()\r\n    }\r\n    _isOtherMonth(cellDate) {\r\n        return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\")\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    getCellDuration() {\r\n        return 36e5 * this._calculateDayDuration()\r\n    }\r\n    getIntervalDuration() {\r\n        return toMs(\"day\")\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getPositionShift(timeShift) {\r\n        return {\r\n            cellPosition: timeShift * this.getCellWidth(),\r\n            top: 0,\r\n            left: 0\r\n        }\r\n    }\r\n    getCellCountToLastViewDate(date) {\r\n        var firstDateTime = date.getTime();\r\n        var lastDateTime = this.getEndViewDate().getTime();\r\n        var dayDurationInMs = this.getCellDuration();\r\n        return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs)\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    keepOriginalHours() {\r\n        return true\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return true\r\n    }\r\n    _getDateTableBorderOffset() {\r\n        return this._getDateTableBorder()\r\n    }\r\n    _getCellPositionByIndex(index, groupIndex) {\r\n        var position = super._getCellPositionByIndex(index, groupIndex);\r\n        var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\r\n        var calculatedTopOffset;\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            calculatedTopOffset = this.getCellHeight() * rowIndex\r\n        } else {\r\n            calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount())\r\n        }\r\n        if (calculatedTopOffset) {\r\n            position.top = calculatedTopOffset\r\n        }\r\n        return position\r\n    }\r\n    _getHeaderDate() {\r\n        return this._getViewStartByOptions()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n    scrollToTime() {\r\n        return noop()\r\n    }\r\n    _createAllDayPanelElements() {}\r\n    _getRowCountWithAllDayRows() {\r\n        return this._getRowCount()\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    renderRDateTable() {\r\n        this.renderRComponent(this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions();\r\n        options.cellDataGetters.push((_, rowIndex, cellIndex) => ({\r\n            value: {\r\n                text: this._getCellText(rowIndex, cellIndex)\r\n            }\r\n        }));\r\n        options.cellDataGetters.push((_, rowIndex, cellIndex, groupIndex, startDate) => ({\r\n            value: {\r\n                today: this._isCurrentDate(startDate),\r\n                otherMonth: this._isOtherMonth(startDate),\r\n                firstDayOfMonth: this._isFirstDayOfMonth(startDate)\r\n            }\r\n        }));\r\n        return options\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\r\nexport default SchedulerWorkSpaceMonth;\r\n"]},"metadata":{},"sourceType":"module"}