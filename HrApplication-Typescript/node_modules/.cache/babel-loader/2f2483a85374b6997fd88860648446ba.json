{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/table_creator.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { data as elementData } from \"../../core/element_data\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { getPublicElement } from \"../../core/element\";\nvar ROW_SELECTOR = \"tr\";\n\nclass SchedulerTableCreator {\n  constructor() {\n    this.VERTICAL = \"vertical\";\n    this.HORIZONTAL = \"horizontal\";\n  }\n\n  insertAllDayRow(allDayElements, tableBody, index) {\n    if (allDayElements[index]) {\n      var row = allDayElements[index].find(ROW_SELECTOR);\n\n      if (!row.length) {\n        row = $(domAdapter.createElement(ROW_SELECTOR));\n        row.append(allDayElements[index].get(0));\n      }\n\n      tableBody.appendChild(row.get ? row.get(0) : row);\n    }\n  }\n\n  makeTable(options) {\n    var tableBody = domAdapter.createElement(\"tbody\");\n    var templateCallbacks = [];\n    var row;\n    var rowCountInGroup = options.groupCount ? options.rowCount / options.groupCount : options.rowCount;\n    var allDayElementIndex = 0;\n    var allDayElements = options.allDayElements;\n    var groupIndex = options.groupIndex;\n    var rowCount = options.rowCount;\n    $(options.container).append(tableBody);\n\n    if (allDayElements) {\n      this.insertAllDayRow(allDayElements, tableBody, 0);\n      allDayElementIndex++;\n    }\n\n    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n      row = domAdapter.createElement(ROW_SELECTOR);\n      tableBody.appendChild(row);\n      var isLastRowInGroup = (rowIndex + 1) % rowCountInGroup === 0;\n\n      if (options.rowClass) {\n        row.className = options.rowClass;\n      }\n\n      for (var columnIndex = 0; columnIndex < options.cellCount; columnIndex++) {\n        var td = domAdapter.createElement(\"td\");\n        row.appendChild(td);\n\n        if (options.cellClass) {\n          if (isFunction(options.cellClass)) {\n            td.className = options.cellClass(rowIndex, columnIndex);\n          } else {\n            td.className = options.cellClass;\n          }\n        }\n\n        var cellDataObject = void 0;\n        var dataKey = void 0;\n        var dataValue = void 0;\n\n        if (options.getCellData) {\n          cellDataObject = options.getCellData(td, rowIndex, columnIndex, groupIndex);\n          dataKey = cellDataObject.key;\n          dataValue = cellDataObject.value;\n          dataKey && elementData(td, dataKey, dataValue);\n        }\n\n        if (options.cellTemplate && options.cellTemplate.render) {\n          var additionalTemplateData = options.getTemplateData ? options.getTemplateData(rowIndex) : {};\n          var templateOptions = {\n            model: _extends({\n              text: options.getCellText ? options.getCellText(rowIndex, columnIndex) : \"\",\n              date: options.getCellDate ? options.getCellDate(rowIndex) : void 0\n            }, additionalTemplateData),\n            container: getPublicElement($(td)),\n            index: rowIndex * options.cellCount + columnIndex\n          };\n\n          if (dataValue) {\n            if (dataValue.startDate) {\n              templateOptions.model.startDate = dataValue.startDate;\n            }\n\n            if (dataValue.endDate) {\n              templateOptions.model.endDate = dataValue.endDate;\n            }\n\n            if (dataValue.groups) {\n              templateOptions.model.groups = dataValue.groups;\n            }\n\n            if (dataValue.allDay) {\n              templateOptions.model.allDay = dataValue.allDay;\n            }\n          }\n\n          templateCallbacks.push(options.cellTemplate.render.bind(options.cellTemplate, templateOptions));\n        } else if (options.getCellText) {\n          $(\"<div>\").text(options.getCellText(rowIndex, columnIndex)).addClass(options.getCellTextClass).appendTo($(td));\n        }\n      }\n\n      if (allDayElements && isLastRowInGroup) {\n        this.insertAllDayRow(allDayElements, tableBody, allDayElementIndex);\n        allDayElementIndex++;\n      }\n    }\n\n    return templateCallbacks;\n  }\n\n  makeGroupedTable(type, groups, cssClasses, cellCount, cellTemplate, rowCount, groupByDate) {\n    var rows = [];\n\n    if (type === this.VERTICAL) {\n      rows = this._makeVerticalGroupedRows(groups, cssClasses, cellTemplate, rowCount);\n    } else {\n      rows = this._makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate);\n    }\n\n    return rows;\n  }\n\n  makeGroupedTableFromJSON(type, data, config) {\n    var table;\n    var cellStorage = [];\n    var rowIndex = 0;\n    config = config || {};\n    var cellTag = config.cellTag || \"td\";\n    var childrenField = config.childrenField || \"children\";\n    var titleField = config.titleField || \"title\";\n    var groupTableClass = config.groupTableClass;\n    var groupRowClass = config.groupRowClass;\n    var groupCellClass = config.groupCellClass;\n    var groupCellCustomContent = config.groupCellCustomContent;\n\n    function getChildCount(item) {\n      if (item[childrenField]) {\n        return item[childrenField].length;\n      }\n\n      return 0;\n    }\n\n    function createCell(text, childCount, index, data) {\n      var cell = {\n        element: domAdapter.createElement(cellTag),\n        childCount: childCount\n      };\n\n      if (groupCellClass) {\n        cell.element.className = groupCellClass;\n      }\n\n      var cellText = domAdapter.createTextNode(text);\n\n      if (\"function\" === typeof groupCellCustomContent) {\n        groupCellCustomContent(cell.element, cellText, index, data);\n      } else {\n        cell.element.appendChild(cellText);\n      }\n\n      return cell;\n    }\n\n    !function () {\n      table = domAdapter.createElement(\"table\");\n\n      if (groupTableClass) {\n        table.className = groupTableClass;\n      }\n    }();\n    !function generateCells(data) {\n      for (var i = 0; i < data.length; i++) {\n        var childCount = getChildCount(data[i]);\n        var cell = createCell(data[i][titleField], childCount, i, data[i]);\n\n        if (!cellStorage[rowIndex]) {\n          cellStorage[rowIndex] = [];\n        }\n\n        cellStorage[rowIndex].push(cell);\n\n        if (childCount) {\n          generateCells(data[i][childrenField]);\n        } else {\n          rowIndex++;\n        }\n      }\n    }(data);\n    void cellStorage.forEach(function (cells) {\n      var row = domAdapter.createElement(ROW_SELECTOR);\n\n      if (groupRowClass) {\n        row.className = groupRowClass;\n      }\n\n      var rowspans = [];\n\n      for (var i = cells.length - 1; i >= 0; i--) {\n        var prev = cells[i + 1];\n        var rowspan = cells[i].childCount;\n\n        if (prev && prev.childCount) {\n          rowspan *= prev.childCount;\n        }\n\n        rowspans.push(rowspan);\n      }\n\n      rowspans.reverse();\n      cells.forEach(function (cell, index) {\n        if (rowspans[index]) {\n          cell.element.setAttribute(\"rowSpan\", rowspans[index]);\n        }\n\n        row.appendChild(cell.element);\n      });\n      table.appendChild(row);\n    });\n    return table;\n  }\n\n  _makeFlexGroupedRowCells(group, repeatCount, cssClasses, cellTemplate) {\n    var repeatByDate = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;\n    var cells = [];\n    var items = group.items;\n    var itemCount = items.length;\n\n    for (var i = 0; i < repeatCount * repeatByDate; i++) {\n      for (var j = 0; j < itemCount; j++) {\n        var $container = $(\"<div>\");\n        var cell = {};\n\n        if (cellTemplate && cellTemplate.render) {\n          var templateOptions = {\n            model: items[j],\n            container: getPublicElement($container),\n            index: i * itemCount + j\n          };\n\n          if (group.data) {\n            templateOptions.model.data = group.data[j];\n          }\n\n          cell.template = cellTemplate.render.bind(cellTemplate, templateOptions);\n        } else {\n          $container.text(items[j].text).attr(\"title\", items[j].text).addClass(\"dx-scheduler-group-header-content\");\n          $container = $(\"<div>\").append($container);\n        }\n\n        var cssClass = isFunction(cssClasses.groupHeaderClass) ? cssClasses.groupHeaderClass(j) : cssClasses.groupHeaderClass;\n        cell.element = $container.addClass(cssClass);\n        cells.push(cell);\n      }\n    }\n\n    return cells;\n  }\n\n  _makeVerticalGroupedRows(groups, cssClasses, cellTemplate) {\n    var cellTemplates = [];\n    var repeatCount = 1;\n    var cellsArray = [];\n\n    var cellIterator = function (cell) {\n      if (cell.template) {\n        cellTemplates.push(cell.template);\n      }\n    };\n\n    for (var i = 0; i < groups.length; i++) {\n      if (i > 0) {\n        repeatCount = groups[i - 1].items.length * repeatCount;\n      }\n\n      var cells = this._makeFlexGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate);\n\n      cells.forEach(cellIterator);\n      cellsArray.push(cells);\n    }\n\n    var rows = [];\n    var groupCount = cellsArray.length;\n\n    for (var _i = 0; _i < groupCount; _i++) {\n      rows.push($(\"<div>\").addClass(cssClasses.groupHeaderRowClass));\n    }\n\n    for (var _i2 = groupCount - 1; _i2 >= 0; _i2--) {\n      var currentColumnLength = cellsArray[_i2].length;\n\n      for (var j = 0; j < currentColumnLength; j++) {\n        rows[_i2].append(cellsArray[_i2][j].element);\n      }\n    }\n\n    return {\n      elements: $(\"<div>\").addClass(\"dx-scheduler-group-flex-container\").append(rows),\n      cellTemplates: cellTemplates\n    };\n  }\n\n  _makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate) {\n    var repeatCount = 1;\n    var groupCount = groups.length;\n    var rows = [];\n    var cellTemplates = [];\n    var repeatByDate = groupByDate ? cellCount : 1;\n\n    var cellIterator = function (cell) {\n      if (cell.template) {\n        cellTemplates.push(cell.template);\n      }\n\n      return cell.element;\n    };\n\n    for (var i = 0; i < groupCount; i++) {\n      if (i > 0) {\n        repeatCount = groups[i - 1].items.length * repeatCount;\n      }\n\n      var cells = this._makeGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate, repeatByDate);\n\n      rows.push($(\"<tr>\").addClass(cssClasses.groupRowClass).append(cells.map(cellIterator)));\n    }\n\n    var maxCellCount = rows[groupCount - 1].find(\"th\").length;\n\n    for (var j = 0; j < groupCount; j++) {\n      var $cell = rows[j].find(\"th\");\n      var colspan = maxCellCount / $cell.length;\n\n      if (!groupByDate) {\n        colspan *= cellCount;\n      }\n\n      if (colspan > 1 && 1 === repeatByDate || groupByDate && groupCount > 1) {\n        $cell.attr(\"colSpan\", colspan);\n      }\n    }\n\n    return {\n      elements: rows,\n      cellTemplates: cellTemplates\n    };\n  }\n\n  _makeGroupedRowCells(group, repeatCount, cssClasses, cellTemplate, repeatByDate) {\n    repeatByDate = repeatByDate || 1;\n    repeatCount *= repeatByDate;\n    var cells = [];\n    var items = group.items;\n    var itemCount = items.length;\n\n    for (var i = 0; i < repeatCount; i++) {\n      for (var j = 0; j < itemCount; j++) {\n        var $container = $(\"<div>\");\n        var cell = {};\n\n        if (cellTemplate && cellTemplate.render) {\n          var templateOptions = {\n            model: items[j],\n            container: getPublicElement($container),\n            index: i * itemCount + j\n          };\n\n          if (group.data) {\n            templateOptions.model.data = group.data[j];\n          }\n\n          cell.template = cellTemplate.render.bind(cellTemplate, templateOptions);\n        } else {\n          $container.text(items[j].text);\n          $container = $(\"<div>\").append($container);\n        }\n\n        $container.addClass(cssClasses.groupHeaderContentClass);\n        var cssClass = void 0;\n\n        if (isFunction(cssClasses.groupHeaderClass)) {\n          cssClass = cssClasses.groupHeaderClass(j);\n        } else {\n          cssClass = cssClasses.groupHeaderClass;\n        }\n\n        cell.element = $(\"<th>\").addClass(cssClass).append($container);\n        cells.push(cell);\n      }\n    }\n\n    return cells;\n  }\n\n}\n\nexport default {\n  tableCreator: new SchedulerTableCreator()\n};","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/table_creator.js"],"names":["_extends","$","domAdapter","data","elementData","isFunction","getPublicElement","ROW_SELECTOR","SchedulerTableCreator","constructor","VERTICAL","HORIZONTAL","insertAllDayRow","allDayElements","tableBody","index","row","find","length","createElement","append","get","appendChild","makeTable","options","templateCallbacks","rowCountInGroup","groupCount","rowCount","allDayElementIndex","groupIndex","container","rowIndex","isLastRowInGroup","rowClass","className","columnIndex","cellCount","td","cellClass","cellDataObject","dataKey","dataValue","getCellData","key","value","cellTemplate","render","additionalTemplateData","getTemplateData","templateOptions","model","text","getCellText","date","getCellDate","startDate","endDate","groups","allDay","push","bind","addClass","getCellTextClass","appendTo","makeGroupedTable","type","cssClasses","groupByDate","rows","_makeVerticalGroupedRows","_makeHorizontalGroupedRows","makeGroupedTableFromJSON","config","table","cellStorage","cellTag","childrenField","titleField","groupTableClass","groupRowClass","groupCellClass","groupCellCustomContent","getChildCount","item","createCell","childCount","cell","element","cellText","createTextNode","generateCells","i","forEach","cells","rowspans","prev","rowspan","reverse","setAttribute","_makeFlexGroupedRowCells","group","repeatCount","repeatByDate","arguments","items","itemCount","j","$container","template","attr","cssClass","groupHeaderClass","cellTemplates","cellsArray","cellIterator","_i","groupHeaderRowClass","_i2","currentColumnLength","elements","_makeGroupedRowCells","map","maxCellCount","$cell","colspan","groupHeaderContentClass","tableCreator"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/table_creator.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport {\r\n    data as elementData\r\n} from \"../../core/element_data\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nvar ROW_SELECTOR = \"tr\";\r\nclass SchedulerTableCreator {\r\n    constructor() {\r\n        this.VERTICAL = \"vertical\";\r\n        this.HORIZONTAL = \"horizontal\"\r\n    }\r\n    insertAllDayRow(allDayElements, tableBody, index) {\r\n        if (allDayElements[index]) {\r\n            var row = allDayElements[index].find(ROW_SELECTOR);\r\n            if (!row.length) {\r\n                row = $(domAdapter.createElement(ROW_SELECTOR));\r\n                row.append(allDayElements[index].get(0))\r\n            }\r\n            tableBody.appendChild(row.get ? row.get(0) : row)\r\n        }\r\n    }\r\n    makeTable(options) {\r\n        var tableBody = domAdapter.createElement(\"tbody\");\r\n        var templateCallbacks = [];\r\n        var row;\r\n        var rowCountInGroup = options.groupCount ? options.rowCount / options.groupCount : options.rowCount;\r\n        var allDayElementIndex = 0;\r\n        var allDayElements = options.allDayElements;\r\n        var groupIndex = options.groupIndex;\r\n        var rowCount = options.rowCount;\r\n        $(options.container).append(tableBody);\r\n        if (allDayElements) {\r\n            this.insertAllDayRow(allDayElements, tableBody, 0);\r\n            allDayElementIndex++\r\n        }\r\n        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {\r\n            row = domAdapter.createElement(ROW_SELECTOR);\r\n            tableBody.appendChild(row);\r\n            var isLastRowInGroup = (rowIndex + 1) % rowCountInGroup === 0;\r\n            if (options.rowClass) {\r\n                row.className = options.rowClass\r\n            }\r\n            for (var columnIndex = 0; columnIndex < options.cellCount; columnIndex++) {\r\n                var td = domAdapter.createElement(\"td\");\r\n                row.appendChild(td);\r\n                if (options.cellClass) {\r\n                    if (isFunction(options.cellClass)) {\r\n                        td.className = options.cellClass(rowIndex, columnIndex)\r\n                    } else {\r\n                        td.className = options.cellClass\r\n                    }\r\n                }\r\n                var cellDataObject = void 0;\r\n                var dataKey = void 0;\r\n                var dataValue = void 0;\r\n                if (options.getCellData) {\r\n                    cellDataObject = options.getCellData(td, rowIndex, columnIndex, groupIndex);\r\n                    dataKey = cellDataObject.key;\r\n                    dataValue = cellDataObject.value;\r\n                    dataKey && elementData(td, dataKey, dataValue)\r\n                }\r\n                if (options.cellTemplate && options.cellTemplate.render) {\r\n                    var additionalTemplateData = options.getTemplateData ? options.getTemplateData(rowIndex) : {};\r\n                    var templateOptions = {\r\n                        model: _extends({\r\n                            text: options.getCellText ? options.getCellText(rowIndex, columnIndex) : \"\",\r\n                            date: options.getCellDate ? options.getCellDate(rowIndex) : void 0\r\n                        }, additionalTemplateData),\r\n                        container: getPublicElement($(td)),\r\n                        index: rowIndex * options.cellCount + columnIndex\r\n                    };\r\n                    if (dataValue) {\r\n                        if (dataValue.startDate) {\r\n                            templateOptions.model.startDate = dataValue.startDate\r\n                        }\r\n                        if (dataValue.endDate) {\r\n                            templateOptions.model.endDate = dataValue.endDate\r\n                        }\r\n                        if (dataValue.groups) {\r\n                            templateOptions.model.groups = dataValue.groups\r\n                        }\r\n                        if (dataValue.allDay) {\r\n                            templateOptions.model.allDay = dataValue.allDay\r\n                        }\r\n                    }\r\n                    templateCallbacks.push(options.cellTemplate.render.bind(options.cellTemplate, templateOptions))\r\n                } else if (options.getCellText) {\r\n                    $(\"<div>\").text(options.getCellText(rowIndex, columnIndex)).addClass(options.getCellTextClass).appendTo($(td))\r\n                }\r\n            }\r\n            if (allDayElements && isLastRowInGroup) {\r\n                this.insertAllDayRow(allDayElements, tableBody, allDayElementIndex);\r\n                allDayElementIndex++\r\n            }\r\n        }\r\n        return templateCallbacks\r\n    }\r\n    makeGroupedTable(type, groups, cssClasses, cellCount, cellTemplate, rowCount, groupByDate) {\r\n        var rows = [];\r\n        if (type === this.VERTICAL) {\r\n            rows = this._makeVerticalGroupedRows(groups, cssClasses, cellTemplate, rowCount)\r\n        } else {\r\n            rows = this._makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate)\r\n        }\r\n        return rows\r\n    }\r\n    makeGroupedTableFromJSON(type, data, config) {\r\n        var table;\r\n        var cellStorage = [];\r\n        var rowIndex = 0;\r\n        config = config || {};\r\n        var cellTag = config.cellTag || \"td\";\r\n        var childrenField = config.childrenField || \"children\";\r\n        var titleField = config.titleField || \"title\";\r\n        var groupTableClass = config.groupTableClass;\r\n        var groupRowClass = config.groupRowClass;\r\n        var groupCellClass = config.groupCellClass;\r\n        var groupCellCustomContent = config.groupCellCustomContent;\r\n\r\n        function getChildCount(item) {\r\n            if (item[childrenField]) {\r\n                return item[childrenField].length\r\n            }\r\n            return 0\r\n        }\r\n\r\n        function createCell(text, childCount, index, data) {\r\n            var cell = {\r\n                element: domAdapter.createElement(cellTag),\r\n                childCount: childCount\r\n            };\r\n            if (groupCellClass) {\r\n                cell.element.className = groupCellClass\r\n            }\r\n            var cellText = domAdapter.createTextNode(text);\r\n            if (\"function\" === typeof groupCellCustomContent) {\r\n                groupCellCustomContent(cell.element, cellText, index, data)\r\n            } else {\r\n                cell.element.appendChild(cellText)\r\n            }\r\n            return cell\r\n        }! function() {\r\n            table = domAdapter.createElement(\"table\");\r\n            if (groupTableClass) {\r\n                table.className = groupTableClass\r\n            }\r\n        }();\r\n        ! function generateCells(data) {\r\n            for (var i = 0; i < data.length; i++) {\r\n                var childCount = getChildCount(data[i]);\r\n                var cell = createCell(data[i][titleField], childCount, i, data[i]);\r\n                if (!cellStorage[rowIndex]) {\r\n                    cellStorage[rowIndex] = []\r\n                }\r\n                cellStorage[rowIndex].push(cell);\r\n                if (childCount) {\r\n                    generateCells(data[i][childrenField])\r\n                } else {\r\n                    rowIndex++\r\n                }\r\n            }\r\n        }(data);\r\n        void cellStorage.forEach((function(cells) {\r\n            var row = domAdapter.createElement(ROW_SELECTOR);\r\n            if (groupRowClass) {\r\n                row.className = groupRowClass\r\n            }\r\n            var rowspans = [];\r\n            for (var i = cells.length - 1; i >= 0; i--) {\r\n                var prev = cells[i + 1];\r\n                var rowspan = cells[i].childCount;\r\n                if (prev && prev.childCount) {\r\n                    rowspan *= prev.childCount\r\n                }\r\n                rowspans.push(rowspan)\r\n            }\r\n            rowspans.reverse();\r\n            cells.forEach((function(cell, index) {\r\n                if (rowspans[index]) {\r\n                    cell.element.setAttribute(\"rowSpan\", rowspans[index])\r\n                }\r\n                row.appendChild(cell.element)\r\n            }));\r\n            table.appendChild(row)\r\n        }));\r\n        return table\r\n    }\r\n    _makeFlexGroupedRowCells(group, repeatCount, cssClasses, cellTemplate) {\r\n        var repeatByDate = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;\r\n        var cells = [];\r\n        var items = group.items;\r\n        var itemCount = items.length;\r\n        for (var i = 0; i < repeatCount * repeatByDate; i++) {\r\n            for (var j = 0; j < itemCount; j++) {\r\n                var $container = $(\"<div>\");\r\n                var cell = {};\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    var templateOptions = {\r\n                        model: items[j],\r\n                        container: getPublicElement($container),\r\n                        index: i * itemCount + j\r\n                    };\r\n                    if (group.data) {\r\n                        templateOptions.model.data = group.data[j]\r\n                    }\r\n                    cell.template = cellTemplate.render.bind(cellTemplate, templateOptions)\r\n                } else {\r\n                    $container.text(items[j].text).attr(\"title\", items[j].text).addClass(\"dx-scheduler-group-header-content\");\r\n                    $container = $(\"<div>\").append($container)\r\n                }\r\n                var cssClass = isFunction(cssClasses.groupHeaderClass) ? cssClasses.groupHeaderClass(j) : cssClasses.groupHeaderClass;\r\n                cell.element = $container.addClass(cssClass);\r\n                cells.push(cell)\r\n            }\r\n        }\r\n        return cells\r\n    }\r\n    _makeVerticalGroupedRows(groups, cssClasses, cellTemplate) {\r\n        var cellTemplates = [];\r\n        var repeatCount = 1;\r\n        var cellsArray = [];\r\n        var cellIterator = function(cell) {\r\n            if (cell.template) {\r\n                cellTemplates.push(cell.template)\r\n            }\r\n        };\r\n        for (var i = 0; i < groups.length; i++) {\r\n            if (i > 0) {\r\n                repeatCount = groups[i - 1].items.length * repeatCount\r\n            }\r\n            var cells = this._makeFlexGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate);\r\n            cells.forEach(cellIterator);\r\n            cellsArray.push(cells)\r\n        }\r\n        var rows = [];\r\n        var groupCount = cellsArray.length;\r\n        for (var _i = 0; _i < groupCount; _i++) {\r\n            rows.push($(\"<div>\").addClass(cssClasses.groupHeaderRowClass))\r\n        }\r\n        for (var _i2 = groupCount - 1; _i2 >= 0; _i2--) {\r\n            var currentColumnLength = cellsArray[_i2].length;\r\n            for (var j = 0; j < currentColumnLength; j++) {\r\n                rows[_i2].append(cellsArray[_i2][j].element)\r\n            }\r\n        }\r\n        return {\r\n            elements: $(\"<div>\").addClass(\"dx-scheduler-group-flex-container\").append(rows),\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate) {\r\n        var repeatCount = 1;\r\n        var groupCount = groups.length;\r\n        var rows = [];\r\n        var cellTemplates = [];\r\n        var repeatByDate = groupByDate ? cellCount : 1;\r\n        var cellIterator = function(cell) {\r\n            if (cell.template) {\r\n                cellTemplates.push(cell.template)\r\n            }\r\n            return cell.element\r\n        };\r\n        for (var i = 0; i < groupCount; i++) {\r\n            if (i > 0) {\r\n                repeatCount = groups[i - 1].items.length * repeatCount\r\n            }\r\n            var cells = this._makeGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate, repeatByDate);\r\n            rows.push($(\"<tr>\").addClass(cssClasses.groupRowClass).append(cells.map(cellIterator)))\r\n        }\r\n        var maxCellCount = rows[groupCount - 1].find(\"th\").length;\r\n        for (var j = 0; j < groupCount; j++) {\r\n            var $cell = rows[j].find(\"th\");\r\n            var colspan = maxCellCount / $cell.length;\r\n            if (!groupByDate) {\r\n                colspan *= cellCount\r\n            }\r\n            if (colspan > 1 && 1 === repeatByDate || groupByDate && groupCount > 1) {\r\n                $cell.attr(\"colSpan\", colspan)\r\n            }\r\n        }\r\n        return {\r\n            elements: rows,\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _makeGroupedRowCells(group, repeatCount, cssClasses, cellTemplate, repeatByDate) {\r\n        repeatByDate = repeatByDate || 1;\r\n        repeatCount *= repeatByDate;\r\n        var cells = [];\r\n        var items = group.items;\r\n        var itemCount = items.length;\r\n        for (var i = 0; i < repeatCount; i++) {\r\n            for (var j = 0; j < itemCount; j++) {\r\n                var $container = $(\"<div>\");\r\n                var cell = {};\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    var templateOptions = {\r\n                        model: items[j],\r\n                        container: getPublicElement($container),\r\n                        index: i * itemCount + j\r\n                    };\r\n                    if (group.data) {\r\n                        templateOptions.model.data = group.data[j]\r\n                    }\r\n                    cell.template = cellTemplate.render.bind(cellTemplate, templateOptions)\r\n                } else {\r\n                    $container.text(items[j].text);\r\n                    $container = $(\"<div>\").append($container)\r\n                }\r\n                $container.addClass(cssClasses.groupHeaderContentClass);\r\n                var cssClass = void 0;\r\n                if (isFunction(cssClasses.groupHeaderClass)) {\r\n                    cssClass = cssClasses.groupHeaderClass(j)\r\n                } else {\r\n                    cssClass = cssClasses.groupHeaderClass\r\n                }\r\n                cell.element = $(\"<th>\").addClass(cssClass).append($container);\r\n                cells.push(cell)\r\n            }\r\n        }\r\n        return cells\r\n    }\r\n}\r\nexport default {\r\n    tableCreator: new SchedulerTableCreator\r\n};\r\n"]},"metadata":{},"sourceType":"module"}