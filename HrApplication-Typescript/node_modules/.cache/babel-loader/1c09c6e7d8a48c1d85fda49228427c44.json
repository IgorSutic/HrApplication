{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\nimport dateUtils from \"../../../core/utils/date\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\n  _needVerifyItemSize() {\n    return true;\n  }\n\n  calculateAppointmentWidth(appointment, position) {\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n    var startDate = position.info.appointment.startDate;\n    var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n\n    var appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n    appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\n    var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\");\n    var durationInCells = appointmentDuration / cellDuration;\n    var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n    return width;\n  }\n\n  _needAdjustDuration(diff) {\n    return diff < 0;\n  }\n\n  getAppointmentGeometry(coordinates) {\n    var result = this._customizeAppointmentGeometry(coordinates);\n\n    return super.getAppointmentGeometry(result);\n  }\n\n  _customizeAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: 0,\n      auto: 0\n    };\n  }\n\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    return itemLeft + cellWidth * index;\n  }\n\n  _getMaxHeight() {\n    return this.getDefaultCellHeight() || this.getAppointmentMinSize();\n  }\n\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return this._getMaxAppointmentCountPerCellByType(false);\n  }\n\n  _getAppointmentDefaultHeight() {\n    return DEFAULT_APPOINTMENT_HEIGHT;\n  }\n\n  _getAppointmentMinHeight() {\n    return MIN_APPOINTMENT_HEIGHT;\n  }\n\n  _sortCondition(a, b) {\n    return this._columnCondition(a, b);\n  }\n\n  _getOrientation() {\n    return [\"left\", \"right\", \"top\"];\n  }\n\n  _getMaxAppointmentWidth(startDate) {\n    return this.instance.fire(\"getMaxAppointmentWidth\", {\n      date: startDate\n    });\n  }\n\n  getDropDownAppointmentWidth() {\n    return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET;\n  }\n\n  getDeltaTime(args, initialSize) {\n    var deltaTime;\n    var deltaWidth = args.width - initialSize.width;\n    deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\n    return deltaTime;\n  }\n\n  isAllDay(appointmentData) {\n    return this.instance.fire(\"getField\", \"allDay\", appointmentData);\n  }\n\n  needSeparateAppointment() {\n    return this.instance.fire(\"isGroupedByDate\");\n  }\n\n  _isItemsCross(firstItem, secondItem) {\n    var orientation = this._getOrientation();\n\n    return this._checkItemsCrossing(firstItem, secondItem, orientation);\n  }\n\n}\n\nexport default HorizontalRenderingStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js"],"names":["BaseAppointmentsStrategy","dateUtils","DEFAULT_APPOINTMENT_HEIGHT","MIN_APPOINTMENT_HEIGHT","DROP_DOWN_BUTTON_OFFSET","toMs","dateToMilliseconds","HorizontalRenderingStrategy","_needVerifyItemSize","calculateAppointmentWidth","appointment","position","cellWidth","getDefaultCellWidth","getAppointmentMinSize","allDay","instance","fire","startDate","info","endDate","normalizeEndDateByViewEnd","appointmentDuration","_getAppointmentDurationInMs","_adjustDurationByDaylightDiff","cellDuration","getAppointmentDurationInMinutes","durationInCells","width","cropAppointmentWidth","_needAdjustDuration","diff","getAppointmentGeometry","coordinates","result","_customizeAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","height","appointmentCountPerCell","offset","_getOffsets","unlimited","auto","_getCompactLeftCoordinate","itemLeft","index","_getMaxHeight","getDefaultCellHeight","_getAppointmentCount","overlappingMode","_getMaxAppointmentCountPerCellByType","_getAppointmentDefaultHeight","_getAppointmentMinHeight","_sortCondition","a","b","_columnCondition","_getOrientation","_getMaxAppointmentWidth","date","getDropDownAppointmentWidth","getDeltaTime","args","initialSize","deltaTime","deltaWidth","Math","round","isAllDay","appointmentData","needSeparateAppointment","_isItemsCross","firstItem","secondItem","orientation","_checkItemsCrossing"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\r\nvar MIN_APPOINTMENT_HEIGHT = 35;\r\nvar DROP_DOWN_BUTTON_OFFSET = 2;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    _needVerifyItemSize() {\r\n        return true\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var startDate = position.info.appointment.startDate;\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\r\n        appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\r\n        var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\");\r\n        var durationInCells = appointmentDuration / cellDuration;\r\n        var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\r\n        return width\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return diff < 0\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var result = this._customizeAppointmentGeometry(coordinates);\r\n        return super.getAppointmentGeometry(result)\r\n    }\r\n    _customizeAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: 0,\r\n            auto: 0\r\n        }\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return itemLeft + cellWidth * index\r\n    }\r\n    _getMaxHeight() {\r\n        return this.getDefaultCellHeight() || this.getAppointmentMinSize()\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return this._getMaxAppointmentCountPerCellByType(false)\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return DEFAULT_APPOINTMENT_HEIGHT\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return MIN_APPOINTMENT_HEIGHT\r\n    }\r\n    _sortCondition(a, b) {\r\n        return this._columnCondition(a, b)\r\n    }\r\n    _getOrientation() {\r\n        return [\"left\", \"right\", \"top\"]\r\n    }\r\n    _getMaxAppointmentWidth(startDate) {\r\n        return this.instance.fire(\"getMaxAppointmentWidth\", {\r\n            date: startDate\r\n        })\r\n    }\r\n    getDropDownAppointmentWidth() {\r\n        return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET\r\n    }\r\n    getDeltaTime(args, initialSize) {\r\n        var deltaTime;\r\n        var deltaWidth = args.width - initialSize.width;\r\n        deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\r\n        return deltaTime\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return this.instance.fire(\"getField\", \"allDay\", appointmentData)\r\n    }\r\n    needSeparateAppointment() {\r\n        return this.instance.fire(\"isGroupedByDate\")\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var orientation = this._getOrientation();\r\n        return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n    }\r\n}\r\nexport default HorizontalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}