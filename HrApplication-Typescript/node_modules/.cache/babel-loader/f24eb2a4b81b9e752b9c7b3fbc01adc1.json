{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BasePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.base\";\nimport AdaptivePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.adaptive\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { isNumeric, isObject } from \"../../../core/utils/type\";\nimport { current as currentTheme } from \"../../themes\";\nimport timeZoneUtils from \"../utils.timeZone\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar APPOINTMENT_MIN_SIZE = 2;\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\n\nclass BaseRenderingStrategy {\n  constructor(instance) {\n    this.instance = instance;\n\n    this._initPositioningStrategy();\n  }\n\n  get isVirtualScrolling() {\n    return this.instance.fire(\"isVirtualScrolling\");\n  }\n\n  _isAdaptive() {\n    return this.instance.fire(\"isAdaptive\");\n  }\n\n  _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n    coordinates.top = coordinates.top + this.getCollectorTopOffset(isAllDay);\n    coordinates.left = coordinates.left + this.getCollectorLeftOffset();\n  }\n\n  _initPositioningStrategy() {\n    this._positioningStrategy = this._isAdaptive() ? new AdaptivePositioningStrategy(this) : new BasePositioningStrategy(this);\n  }\n\n  getPositioningStrategy() {\n    return this._positioningStrategy;\n  }\n\n  getAppointmentMinSize() {\n    return APPOINTMENT_MIN_SIZE;\n  }\n\n  keepAppointmentSettings() {\n    return false;\n  }\n\n  getDeltaTime() {}\n\n  getAppointmentGeometry(coordinates) {\n    return coordinates;\n  }\n\n  needCorrectAppointmentDates() {\n    return true;\n  }\n\n  getDirection() {\n    return \"horizontal\";\n  }\n\n  createTaskPositionMap(items) {\n    delete this._maxAppointmentCountPerCell;\n    var length = items && items.length;\n\n    if (!length) {\n      return;\n    }\n\n    this._defaultWidth = this.instance.fire(\"getCellWidth\");\n    this._defaultHeight = this.instance.fire(\"getCellHeight\");\n    this._allDayHeight = this.instance._allDayCellHeight;\n    var map = [];\n\n    for (var i = 0; i < length; i++) {\n      var coordinates = this._getItemPosition(items[i]);\n\n      if (coordinates.length && this._isRtl()) {\n        coordinates = this._correctRtlCoordinates(coordinates);\n      }\n\n      map.push(coordinates);\n    }\n\n    var positionArray = this._getSortedPositions(map);\n\n    var resultPositions = this._getResultPositions(positionArray);\n\n    return this._getExtendedPositionMap(map, resultPositions);\n  }\n\n  _getDeltaWidth(args, initialSize) {\n    var intervalWidth = this.instance.fire(\"getResizableStep\") || this.getAppointmentMinSize();\n    var initialWidth = initialSize.width;\n    return Math.round((args.width - initialWidth) / intervalWidth);\n  }\n\n  _correctRtlCoordinates(coordinates) {\n    var width = coordinates[0].width || this._getAppointmentMaxWidth();\n\n    coordinates.forEach(coordinate => {\n      if (!coordinate.appointmentReduced) {\n        coordinate.left -= width;\n      }\n    });\n    return coordinates;\n  }\n\n  _getAppointmentMaxWidth() {\n    return this.getDefaultCellWidth();\n  }\n\n  _getItemPosition(appointment) {\n    var position = this._getAppointmentCoordinates(appointment);\n\n    var allDay = this.isAllDay(appointment);\n    var result = [];\n\n    for (var j = 0; j < position.length; j++) {\n      var height = this.calculateAppointmentHeight(appointment, position[j]);\n      var width = this.calculateAppointmentWidth(appointment, position[j]);\n      var resultWidth = width;\n      var appointmentReduced = null;\n      var multiWeekAppointmentParts = [];\n      var initialRowIndex = position[j].rowIndex;\n      var initialCellIndex = position[j].cellIndex;\n\n      if (this._needVerifyItemSize() || allDay) {\n        var currentMaxAllowedPosition = position[j].hMax;\n\n        if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\n          left: position[j].left,\n          width: width\n        })) {\n          appointmentReduced = \"head\";\n          initialRowIndex = position[j].rowIndex;\n          initialCellIndex = position[j].cellIndex;\n          resultWidth = this._reduceMultiWeekAppointment(width, {\n            left: position[j].left,\n            right: currentMaxAllowedPosition\n          });\n          multiWeekAppointmentParts = this._getAppointmentParts({\n            sourceAppointmentWidth: width,\n            reducedWidth: resultWidth,\n            height: height\n          }, position[j]);\n\n          if (this._isRtl()) {\n            position[j].left = currentMaxAllowedPosition;\n          }\n        }\n      }\n\n      extend(position[j], {\n        height: height,\n        width: resultWidth,\n        allDay: allDay,\n        rowIndex: initialRowIndex,\n        cellIndex: initialCellIndex,\n        appointmentReduced: appointmentReduced\n      });\n      result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result);\n    }\n\n    return result;\n  }\n\n  _getAppointmentPartsPosition(appointmentParts, position, result) {\n    if (appointmentParts.length) {\n      appointmentParts.unshift(position);\n      result = result.concat(appointmentParts);\n    } else {\n      result.push(position);\n    }\n\n    return result;\n  }\n\n  _getAppointmentCoordinates(appointment) {\n    return this.instance.fire(\"createAppointmentSettings\", appointment);\n  }\n\n  _isRtl() {\n    return this.instance.option(\"rtlEnabled\");\n  }\n\n  _getAppointmentParts() {\n    return [];\n  }\n\n  _getCompactAppointmentParts(appointmentWidth) {\n    var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n    return Math.round(appointmentWidth / cellWidth);\n  }\n\n  _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\n    if (this._isRtl()) {\n      sourceAppointmentWidth = Math.floor(bound.left - bound.right);\n    } else {\n      sourceAppointmentWidth = bound.right - Math.floor(bound.left);\n    }\n\n    return sourceAppointmentWidth;\n  }\n\n  calculateAppointmentHeight() {\n    return 0;\n  }\n\n  calculateAppointmentWidth() {\n    return 0;\n  }\n\n  isAppointmentGreaterThan(etalon, comparisonParameters) {\n    var result = comparisonParameters.left + comparisonParameters.width - etalon;\n\n    if (this._isRtl()) {\n      result = etalon + comparisonParameters.width - comparisonParameters.left;\n    }\n\n    return result > this.getDefaultCellWidth() / 2;\n  }\n\n  isAllDay() {\n    return false;\n  }\n\n  cropAppointmentWidth(width, cellWidth) {\n    if (this.instance.fire(\"isGroupedByDate\")) {\n      width = cellWidth;\n    }\n\n    return width;\n  }\n\n  _getSortedPositions(positionList) {\n    var result = [];\n\n    var round = value => Math.round(100 * value) / 100;\n\n    var createItem = (rowIndex, cellIndex, top, left, bottom, right, position, allDay) => ({\n      i: rowIndex,\n      j: cellIndex,\n      top: round(top),\n      left: round(left),\n      bottom: round(bottom),\n      right: round(right),\n      cellPosition: position,\n      allDay: allDay\n    });\n\n    for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\n      for (var cellIndex = 0, cellCount = positionList[rowIndex].length; cellIndex < cellCount; cellIndex++) {\n        var {\n          top: top,\n          left: left,\n          height: height,\n          width: width,\n          cellPosition: cellPosition,\n          allDay: allDay\n        } = positionList[rowIndex][cellIndex];\n        result.push(createItem(rowIndex, cellIndex, top, left, top + height, left + width, cellPosition, allDay));\n      }\n    }\n\n    return result.sort((a, b) => this._sortCondition(a, b));\n  }\n\n  _sortCondition() {}\n\n  _getConditions(a, b) {\n    var isSomeEdge = this._isSomeEdge(a, b);\n\n    return {\n      columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\n      rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\n      cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\n    };\n  }\n\n  _rowCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n\n    return conditions.columnCondition || conditions.rowCondition;\n  }\n\n  _columnCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n\n    return conditions.rowCondition || conditions.columnCondition;\n  }\n\n  _isSomeEdge(a, b) {\n    return a.i === b.i && a.j === b.j;\n  }\n\n  _normalizeCondition(first, second) {\n    var result = first - second;\n    return Math.abs(result) > 1 ? result : 0;\n  }\n\n  _isItemsCross(firstItem, secondItem) {\n    var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\n    var areItemsAllDay = firstItem.allDay && secondItem.allDay;\n\n    if (areItemsInTheSameTable) {\n      var orientation = this._getOrientation(areItemsAllDay);\n\n      return this._checkItemsCrossing(firstItem, secondItem, orientation);\n    } else {\n      return false;\n    }\n  }\n\n  _checkItemsCrossing(firstItem, secondItem, orientation) {\n    var firstItemSide_1 = Math.floor(firstItem[orientation[0]]);\n    var firstItemSide_2 = Math.floor(firstItem[orientation[1]]);\n    var secondItemSide_1 = Math.ceil(secondItem[orientation[0]]);\n    var secondItemSide_2 = Math.ceil(secondItem[orientation[1]]);\n    var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\n    return isItemCross && (firstItemSide_1 <= secondItemSide_1 && firstItemSide_2 > secondItemSide_1 || firstItemSide_1 < secondItemSide_2 && firstItemSide_2 >= secondItemSide_2 || firstItemSide_1 === secondItemSide_1 && firstItemSide_2 === secondItemSide_2);\n  }\n\n  _getOrientation(isAllDay) {\n    return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"];\n  }\n\n  _getResultPositions(sortedArray) {\n    var result = [];\n    var i;\n    var sortedIndex = 0;\n    var currentItem;\n    var indexes;\n    var itemIndex;\n    var maxIndexInStack = 0;\n    var stack = {};\n\n    var findFreeIndex = (indexes, index) => {\n      var isFind = indexes.some(item => item === index);\n\n      if (isFind) {\n        return findFreeIndex(indexes, ++index);\n      } else {\n        return index;\n      }\n    };\n\n    var createItem = (currentItem, index) => {\n      var currentIndex = index || 0;\n      return {\n        index: currentIndex,\n        i: currentItem.i,\n        j: currentItem.j,\n        left: currentItem.left,\n        right: currentItem.right,\n        top: currentItem.top,\n        bottom: currentItem.bottom,\n        allDay: currentItem.allDay,\n        sortedIndex: this._skipSortedIndex(currentIndex) ? null : sortedIndex++\n      };\n    };\n\n    var startNewStack = currentItem => {\n      stack.items = [createItem(currentItem)];\n      stack.left = currentItem.left;\n      stack.right = currentItem.right;\n      stack.top = currentItem.top;\n      stack.bottom = currentItem.bottom;\n      stack.allDay = currentItem.allDay;\n    };\n\n    var pushItemsInResult = items => {\n      items.forEach(item => {\n        result.push({\n          index: item.index,\n          count: maxIndexInStack + 1,\n          i: item.i,\n          j: item.j,\n          sortedIndex: item.sortedIndex\n        });\n      });\n    };\n\n    for (i = 0; i < sortedArray.length; i++) {\n      currentItem = sortedArray[i];\n      indexes = [];\n\n      if (!stack.items) {\n        startNewStack(currentItem);\n      } else if (this._isItemsCross(stack, currentItem)) {\n        stack.items.forEach((item, index) => {\n          if (this._isItemsCross(item, currentItem)) {\n            indexes.push(item.index);\n          }\n        });\n        itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\n        stack.items.push(createItem(currentItem, itemIndex));\n        maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\n        stack.left = Math.min(stack.left, currentItem.left);\n        stack.right = Math.max(stack.right, currentItem.right);\n        stack.top = Math.min(stack.top, currentItem.top);\n        stack.bottom = Math.max(stack.bottom, currentItem.bottom);\n        stack.allDay = currentItem.allDay;\n      } else {\n        pushItemsInResult(stack.items);\n        stack = {};\n        startNewStack(currentItem);\n        maxIndexInStack = 0;\n      }\n    }\n\n    if (stack.items) {\n      pushItemsInResult(stack.items);\n    }\n\n    return result.sort(function (a, b) {\n      var columnCondition = a.j - b.j;\n      var rowCondition = a.i - b.i;\n      return rowCondition ? rowCondition : columnCondition;\n    });\n  }\n\n  _skipSortedIndex(index) {\n    return index > this._getMaxAppointmentCountPerCell() - 1;\n  }\n\n  _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\n    var result = 0;\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\n        result = i;\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  _getExtendedPositionMap(map, positions) {\n    var positionCounter = 0;\n    var result = [];\n\n    for (var i = 0, mapLength = map.length; i < mapLength; i++) {\n      var resultString = [];\n\n      for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\n        map[i][j].index = positions[positionCounter].index;\n        map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\n        map[i][j].count = positions[positionCounter++].count;\n        resultString.push(map[i][j]);\n\n        this._checkLongCompactAppointment(map[i][j], resultString);\n      }\n\n      result.push(resultString);\n    }\n\n    return result;\n  }\n\n  _checkLongCompactAppointment(item, result) {\n    this._splitLongCompactAppointment(item, result);\n\n    return result;\n  }\n\n  _splitLongCompactAppointment(item, result) {\n    var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\n\n    var compactCount = 0;\n\n    if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\n      item.isCompact = true;\n      compactCount = this._getCompactAppointmentParts(item.width);\n\n      for (var k = 1; k < compactCount; k++) {\n        var compactPart = extend(true, {}, item);\n        compactPart.left = this._getCompactLeftCoordinate(item.left, k);\n        compactPart.cellIndex = compactPart.cellIndex + k;\n        compactPart.sortedIndex = null;\n        result.push(compactPart);\n      }\n    }\n\n    return result;\n  }\n\n  normalizeEndDateByViewEnd(appointment, endDate) {\n    var result = new Date(endDate.getTime());\n\n    if (!this.isAllDay(appointment)) {\n      var viewEndDate = dateUtils.roundToHour(this.instance.fire(\"getEndViewDate\"));\n\n      if (result > viewEndDate) {\n        result = viewEndDate;\n      }\n    }\n\n    var endDayHour = this.instance._getCurrentViewOption(\"endDayHour\");\n\n    var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n    var currentViewEndTime = new Date(new Date(endDate.getTime()).setHours(endDayHour, 0, 0, 0));\n\n    if (result.getTime() > currentViewEndTime.getTime() || allDay && result.getHours() < endDayHour) {\n      result = currentViewEndTime;\n    }\n\n    return result;\n  }\n\n  _adjustDurationByDaylightDiff(duration, startDate, endDate) {\n    var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\n    return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration;\n  }\n\n  _needAdjustDuration(diff) {\n    return 0 !== diff;\n  }\n\n  _calculateDurationByDaylightDiff(duration, diff) {\n    return duration + diff * toMs(\"minute\");\n  }\n\n  _getAppointmentDurationInMs(startDate, endDate, allDay) {\n    return this.instance.fire(\"getAppointmentDurationInMs\", {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay\n    });\n  }\n\n  _markAppointmentAsVirtual(coordinates) {\n    var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n\n    var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\n\n    if (coordinates.count - countFullWidthAppointmentInCell > 0) {\n      var {\n        top: top,\n        left: left\n      } = coordinates;\n      coordinates.virtual = {\n        top: top,\n        left: left,\n        index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\n        isAllDay: isAllDay\n      };\n    }\n  }\n\n  _generateAppointmentCollectorIndex(_ref, isAllDay) {\n    var {\n      groupIndex: groupIndex,\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    } = _ref;\n    return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(cellIndex, \"-\").concat(isAllDay);\n  }\n\n  _getMaxAppointmentCountPerCellByType(isAllDay) {\n    var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\n\n    if (isObject(appointmentCountPerCell)) {\n      return isAllDay ? this._getMaxAppointmentCountPerCell().allDay : this._getMaxAppointmentCountPerCell().simple;\n    } else {\n      return appointmentCountPerCell;\n    }\n  }\n\n  getDropDownAppointmentWidth(intervalCount, isAllDay) {\n    return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay);\n  }\n\n  getDropDownAppointmentHeight() {\n    return this.getPositioningStrategy().getDropDownAppointmentHeight();\n  }\n\n  getDropDownButtonAdaptiveSize() {\n    return DROP_DOWN_BUTTON_ADAPTIVE_SIZE;\n  }\n\n  getDefaultCellWidth() {\n    return this._defaultWidth;\n  }\n\n  getDefaultCellHeight() {\n    return this._defaultHeight;\n  }\n\n  getDefaultAllDayCellHeight() {\n    return this._allDayHeight;\n  }\n\n  getCollectorTopOffset(allDay) {\n    return this.getPositioningStrategy().getCollectorTopOffset(allDay);\n  }\n\n  getCollectorLeftOffset() {\n    return this.getPositioningStrategy().getCollectorLeftOffset();\n  }\n\n  getAppointmentDataCalculator() {}\n\n  _customizeCoordinates(coordinates, height, appointmentCountPerCell, topOffset, isAllDay) {\n    var index = coordinates.index;\n    var appointmentHeight = height / appointmentCountPerCell;\n    var appointmentTop = coordinates.top + index * appointmentHeight;\n    var top = appointmentTop + topOffset;\n    var width = coordinates.width;\n    var left = coordinates.left;\n\n    if (coordinates.isCompact) {\n      this._isAdaptive() && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n\n      this._markAppointmentAsVirtual(coordinates, isAllDay);\n    }\n\n    return {\n      height: appointmentHeight,\n      width: width,\n      top: top,\n      left: left,\n      empty: this._isAppointmentEmpty(height, width)\n    };\n  }\n\n  _isAppointmentEmpty(height, width) {\n    return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth();\n  }\n\n  _calculateGeometryConfig(coordinates) {\n    var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n    var offsets = this._getOffsets();\n\n    var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n\n    var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n\n    var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n\n    var maxHeight = this._getMaxHeight();\n\n    if (!isNumeric(appointmentCountPerCell)) {\n      appointmentCountPerCell = coordinates.count;\n      ratio = (maxHeight - offsets.unlimited) / maxHeight;\n    }\n\n    var topOffset = (1 - ratio) * maxHeight;\n\n    if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n      ratio = 1;\n      maxHeight -= appointmentDefaultOffset;\n      topOffset = appointmentDefaultOffset;\n    }\n\n    return {\n      height: ratio * maxHeight,\n      appointmentCountPerCell: appointmentCountPerCell,\n      offset: topOffset\n    };\n  }\n\n  _getAppointmentCount() {}\n\n  _getDefaultRatio() {}\n\n  _getOffsets() {}\n\n  _getMaxHeight() {}\n\n  _needVerifyItemSize() {\n    return false;\n  }\n\n  needSeparateAppointment(allDay) {\n    return this.instance.fire(\"isGroupedByDate\") && allDay;\n  }\n\n  _getMaxAppointmentCountPerCell() {\n    if (!this._maxAppointmentCountPerCell) {\n      var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n      var appointmentCountPerCell;\n\n      if (isNumeric(overlappingMode)) {\n        appointmentCountPerCell = overlappingMode;\n      }\n\n      if (\"auto\" === overlappingMode) {\n        appointmentCountPerCell = this._getDynamicAppointmentCountPerCell();\n      }\n\n      if (\"unlimited\" === overlappingMode) {\n        appointmentCountPerCell = void 0;\n      }\n\n      this._maxAppointmentCountPerCell = appointmentCountPerCell;\n    }\n\n    return this._maxAppointmentCountPerCell;\n  }\n\n  _getDynamicAppointmentCountPerCell() {\n    return this.getPositioningStrategy().getDynamicAppointmentCountPerCell();\n  }\n\n  hasAllDayAppointments() {\n    return false;\n  }\n\n  _isCompactTheme() {\n    return \"compact\" === (currentTheme() || \"\").split(\".\").pop();\n  }\n\n  _getAppointmentDefaultOffset() {\n    return this.getPositioningStrategy().getAppointmentDefaultOffset();\n  }\n\n  _getAppointmentDefaultHeight() {\n    return this._getAppointmentHeightByTheme();\n  }\n\n  _getAppointmentMinHeight() {\n    return this._getAppointmentDefaultHeight();\n  }\n\n  _getAppointmentHeightByTheme() {\n    return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT;\n  }\n\n  _getAppointmentDefaultWidth() {\n    return this.getPositioningStrategy()._getAppointmentDefaultWidth();\n  }\n\n  _getAppointmentMinWidth() {\n    return this._getAppointmentDefaultWidth();\n  }\n\n  _needVerticalGroupBounds() {\n    return false;\n  }\n\n  _needHorizontalGroupBounds() {\n    return false;\n  }\n\n}\n\nexport default BaseRenderingStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js"],"names":["BasePositioningStrategy","AdaptivePositioningStrategy","extend","dateUtils","isNumeric","isObject","current","currentTheme","timeZoneUtils","toMs","dateToMilliseconds","APPOINTMENT_MIN_SIZE","APPOINTMENT_DEFAULT_HEIGHT","COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT","DROP_DOWN_BUTTON_ADAPTIVE_SIZE","BaseRenderingStrategy","constructor","instance","_initPositioningStrategy","isVirtualScrolling","fire","_isAdaptive","_correctCollectorCoordinatesInAdaptive","coordinates","isAllDay","top","getCollectorTopOffset","left","getCollectorLeftOffset","_positioningStrategy","getPositioningStrategy","getAppointmentMinSize","keepAppointmentSettings","getDeltaTime","getAppointmentGeometry","needCorrectAppointmentDates","getDirection","createTaskPositionMap","items","_maxAppointmentCountPerCell","length","_defaultWidth","_defaultHeight","_allDayHeight","_allDayCellHeight","map","i","_getItemPosition","_isRtl","_correctRtlCoordinates","push","positionArray","_getSortedPositions","resultPositions","_getResultPositions","_getExtendedPositionMap","_getDeltaWidth","args","initialSize","intervalWidth","initialWidth","width","Math","round","_getAppointmentMaxWidth","forEach","coordinate","appointmentReduced","getDefaultCellWidth","appointment","position","_getAppointmentCoordinates","allDay","result","j","height","calculateAppointmentHeight","calculateAppointmentWidth","resultWidth","multiWeekAppointmentParts","initialRowIndex","rowIndex","initialCellIndex","cellIndex","_needVerifyItemSize","currentMaxAllowedPosition","hMax","isAppointmentGreaterThan","_reduceMultiWeekAppointment","right","_getAppointmentParts","sourceAppointmentWidth","reducedWidth","_getAppointmentPartsPosition","appointmentParts","unshift","concat","option","_getCompactAppointmentParts","appointmentWidth","cellWidth","bound","floor","etalon","comparisonParameters","cropAppointmentWidth","positionList","value","createItem","bottom","cellPosition","rowCount","cellCount","sort","a","b","_sortCondition","_getConditions","isSomeEdge","_isSomeEdge","columnCondition","_normalizeCondition","rowCondition","cellPositionCondition","_rowCondition","conditions","_columnCondition","first","second","abs","_isItemsCross","firstItem","secondItem","areItemsInTheSameTable","areItemsAllDay","orientation","_getOrientation","_checkItemsCrossing","firstItemSide_1","firstItemSide_2","secondItemSide_1","ceil","secondItemSide_2","isItemCross","sortedArray","sortedIndex","currentItem","indexes","itemIndex","maxIndexInStack","stack","findFreeIndex","index","isFind","some","item","currentIndex","_skipSortedIndex","startNewStack","pushItemsInResult","count","max","min","_getMaxAppointmentCountPerCell","_findIndexByKey","arr","iKey","jKey","iValue","jValue","len","positions","positionCounter","mapLength","resultString","itemLength","_checkLongCompactAppointment","_splitLongCompactAppointment","appointmentCountPerCell","_getMaxAppointmentCountPerCellByType","compactCount","isCompact","k","compactPart","_getCompactLeftCoordinate","normalizeEndDateByViewEnd","endDate","Date","getTime","viewEndDate","roundToHour","endDayHour","_getCurrentViewOption","currentViewEndTime","setHours","getHours","_adjustDurationByDaylightDiff","duration","startDate","daylightDiff","getDaylightOffset","_needAdjustDuration","_calculateDurationByDaylightDiff","diff","_getAppointmentDurationInMs","_markAppointmentAsVirtual","arguments","countFullWidthAppointmentInCell","virtual","_generateAppointmentCollectorIndex","_ref","groupIndex","simple","getDropDownAppointmentWidth","intervalCount","getDropDownAppointmentHeight","getDropDownButtonAdaptiveSize","getDefaultCellHeight","getDefaultAllDayCellHeight","getAppointmentDataCalculator","_customizeCoordinates","topOffset","appointmentHeight","appointmentTop","empty","_isAppointmentEmpty","_getAppointmentMinHeight","_getAppointmentMinWidth","_calculateGeometryConfig","overlappingMode","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxHeight","_getMaxHeight","unlimited","offset","needSeparateAppointment","_getDynamicAppointmentCountPerCell","getDynamicAppointmentCountPerCell","hasAllDayAppointments","_isCompactTheme","split","pop","getAppointmentDefaultOffset","_getAppointmentDefaultHeight","_getAppointmentHeightByTheme","_getAppointmentDefaultWidth","_needVerticalGroupBounds","_needHorizontalGroupBounds"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BasePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.base\";\r\nimport AdaptivePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.adaptive\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    isNumeric,\r\n    isObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    current as currentTheme\r\n} from \"../../themes\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar APPOINTMENT_MIN_SIZE = 2;\r\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\r\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\r\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\r\nclass BaseRenderingStrategy {\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n        this._initPositioningStrategy()\r\n    }\r\n    get isVirtualScrolling() {\r\n        return this.instance.fire(\"isVirtualScrolling\")\r\n    }\r\n    _isAdaptive() {\r\n        return this.instance.fire(\"isAdaptive\")\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        coordinates.top = coordinates.top + this.getCollectorTopOffset(isAllDay);\r\n        coordinates.left = coordinates.left + this.getCollectorLeftOffset()\r\n    }\r\n    _initPositioningStrategy() {\r\n        this._positioningStrategy = this._isAdaptive() ? new AdaptivePositioningStrategy(this) : new BasePositioningStrategy(this)\r\n    }\r\n    getPositioningStrategy() {\r\n        return this._positioningStrategy\r\n    }\r\n    getAppointmentMinSize() {\r\n        return APPOINTMENT_MIN_SIZE\r\n    }\r\n    keepAppointmentSettings() {\r\n        return false\r\n    }\r\n    getDeltaTime() {}\r\n    getAppointmentGeometry(coordinates) {\r\n        return coordinates\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return true\r\n    }\r\n    getDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    createTaskPositionMap(items) {\r\n        delete this._maxAppointmentCountPerCell;\r\n        var length = items && items.length;\r\n        if (!length) {\r\n            return\r\n        }\r\n        this._defaultWidth = this.instance.fire(\"getCellWidth\");\r\n        this._defaultHeight = this.instance.fire(\"getCellHeight\");\r\n        this._allDayHeight = this.instance._allDayCellHeight;\r\n        var map = [];\r\n        for (var i = 0; i < length; i++) {\r\n            var coordinates = this._getItemPosition(items[i]);\r\n            if (coordinates.length && this._isRtl()) {\r\n                coordinates = this._correctRtlCoordinates(coordinates)\r\n            }\r\n            map.push(coordinates)\r\n        }\r\n        var positionArray = this._getSortedPositions(map);\r\n        var resultPositions = this._getResultPositions(positionArray);\r\n        return this._getExtendedPositionMap(map, resultPositions)\r\n    }\r\n    _getDeltaWidth(args, initialSize) {\r\n        var intervalWidth = this.instance.fire(\"getResizableStep\") || this.getAppointmentMinSize();\r\n        var initialWidth = initialSize.width;\r\n        return Math.round((args.width - initialWidth) / intervalWidth)\r\n    }\r\n    _correctRtlCoordinates(coordinates) {\r\n        var width = coordinates[0].width || this._getAppointmentMaxWidth();\r\n        coordinates.forEach(coordinate => {\r\n            if (!coordinate.appointmentReduced) {\r\n                coordinate.left -= width\r\n            }\r\n        });\r\n        return coordinates\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth()\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var position = this._getAppointmentCoordinates(appointment);\r\n        var allDay = this.isAllDay(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < position.length; j++) {\r\n            var height = this.calculateAppointmentHeight(appointment, position[j]);\r\n            var width = this.calculateAppointmentWidth(appointment, position[j]);\r\n            var resultWidth = width;\r\n            var appointmentReduced = null;\r\n            var multiWeekAppointmentParts = [];\r\n            var initialRowIndex = position[j].rowIndex;\r\n            var initialCellIndex = position[j].cellIndex;\r\n            if (this._needVerifyItemSize() || allDay) {\r\n                var currentMaxAllowedPosition = position[j].hMax;\r\n                if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\r\n                        left: position[j].left,\r\n                        width: width\r\n                    })) {\r\n                    appointmentReduced = \"head\";\r\n                    initialRowIndex = position[j].rowIndex;\r\n                    initialCellIndex = position[j].cellIndex;\r\n                    resultWidth = this._reduceMultiWeekAppointment(width, {\r\n                        left: position[j].left,\r\n                        right: currentMaxAllowedPosition\r\n                    });\r\n                    multiWeekAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentWidth: width,\r\n                        reducedWidth: resultWidth,\r\n                        height: height\r\n                    }, position[j]);\r\n                    if (this._isRtl()) {\r\n                        position[j].left = currentMaxAllowedPosition\r\n                    }\r\n                }\r\n            }\r\n            extend(position[j], {\r\n                height: height,\r\n                width: resultWidth,\r\n                allDay: allDay,\r\n                rowIndex: initialRowIndex,\r\n                cellIndex: initialCellIndex,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result)\r\n        }\r\n        return result\r\n    }\r\n    _getAppointmentPartsPosition(appointmentParts, position, result) {\r\n        if (appointmentParts.length) {\r\n            appointmentParts.unshift(position);\r\n            result = result.concat(appointmentParts)\r\n        } else {\r\n            result.push(position)\r\n        }\r\n        return result\r\n    }\r\n    _getAppointmentCoordinates(appointment) {\r\n        return this.instance.fire(\"createAppointmentSettings\", appointment)\r\n    }\r\n    _isRtl() {\r\n        return this.instance.option(\"rtlEnabled\")\r\n    }\r\n    _getAppointmentParts() {\r\n        return []\r\n    }\r\n    _getCompactAppointmentParts(appointmentWidth) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return Math.round(appointmentWidth / cellWidth)\r\n    }\r\n    _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\r\n        if (this._isRtl()) {\r\n            sourceAppointmentWidth = Math.floor(bound.left - bound.right)\r\n        } else {\r\n            sourceAppointmentWidth = bound.right - Math.floor(bound.left)\r\n        }\r\n        return sourceAppointmentWidth\r\n    }\r\n    calculateAppointmentHeight() {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth() {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan(etalon, comparisonParameters) {\r\n        var result = comparisonParameters.left + comparisonParameters.width - etalon;\r\n        if (this._isRtl()) {\r\n            result = etalon + comparisonParameters.width - comparisonParameters.left\r\n        }\r\n        return result > this.getDefaultCellWidth() / 2\r\n    }\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    cropAppointmentWidth(width, cellWidth) {\r\n        if (this.instance.fire(\"isGroupedByDate\")) {\r\n            width = cellWidth\r\n        }\r\n        return width\r\n    }\r\n    _getSortedPositions(positionList) {\r\n        var result = [];\r\n        var round = value => Math.round(100 * value) / 100;\r\n        var createItem = (rowIndex, cellIndex, top, left, bottom, right, position, allDay) => ({\r\n            i: rowIndex,\r\n            j: cellIndex,\r\n            top: round(top),\r\n            left: round(left),\r\n            bottom: round(bottom),\r\n            right: round(right),\r\n            cellPosition: position,\r\n            allDay: allDay\r\n        });\r\n        for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\r\n            for (var cellIndex = 0, cellCount = positionList[rowIndex].length; cellIndex < cellCount; cellIndex++) {\r\n                var {\r\n                    top: top,\r\n                    left: left,\r\n                    height: height,\r\n                    width: width,\r\n                    cellPosition: cellPosition,\r\n                    allDay: allDay\r\n                } = positionList[rowIndex][cellIndex];\r\n                result.push(createItem(rowIndex, cellIndex, top, left, top + height, left + width, cellPosition, allDay))\r\n            }\r\n        }\r\n        return result.sort((a, b) => this._sortCondition(a, b))\r\n    }\r\n    _sortCondition() {}\r\n    _getConditions(a, b) {\r\n        var isSomeEdge = this._isSomeEdge(a, b);\r\n        return {\r\n            columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\r\n            rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\r\n            cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\r\n        }\r\n    }\r\n    _rowCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.columnCondition || conditions.rowCondition\r\n    }\r\n    _columnCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.rowCondition || conditions.columnCondition\r\n    }\r\n    _isSomeEdge(a, b) {\r\n        return a.i === b.i && a.j === b.j\r\n    }\r\n    _normalizeCondition(first, second) {\r\n        var result = first - second;\r\n        return Math.abs(result) > 1 ? result : 0\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\r\n        var areItemsAllDay = firstItem.allDay && secondItem.allDay;\r\n        if (areItemsInTheSameTable) {\r\n            var orientation = this._getOrientation(areItemsAllDay);\r\n            return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    _checkItemsCrossing(firstItem, secondItem, orientation) {\r\n        var firstItemSide_1 = Math.floor(firstItem[orientation[0]]);\r\n        var firstItemSide_2 = Math.floor(firstItem[orientation[1]]);\r\n        var secondItemSide_1 = Math.ceil(secondItem[orientation[0]]);\r\n        var secondItemSide_2 = Math.ceil(secondItem[orientation[1]]);\r\n        var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\r\n        return isItemCross && (firstItemSide_1 <= secondItemSide_1 && firstItemSide_2 > secondItemSide_1 || firstItemSide_1 < secondItemSide_2 && firstItemSide_2 >= secondItemSide_2 || firstItemSide_1 === secondItemSide_1 && firstItemSide_2 === secondItemSide_2)\r\n    }\r\n    _getOrientation(isAllDay) {\r\n        return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"]\r\n    }\r\n    _getResultPositions(sortedArray) {\r\n        var result = [];\r\n        var i;\r\n        var sortedIndex = 0;\r\n        var currentItem;\r\n        var indexes;\r\n        var itemIndex;\r\n        var maxIndexInStack = 0;\r\n        var stack = {};\r\n        var findFreeIndex = (indexes, index) => {\r\n            var isFind = indexes.some(item => item === index);\r\n            if (isFind) {\r\n                return findFreeIndex(indexes, ++index)\r\n            } else {\r\n                return index\r\n            }\r\n        };\r\n        var createItem = (currentItem, index) => {\r\n            var currentIndex = index || 0;\r\n            return {\r\n                index: currentIndex,\r\n                i: currentItem.i,\r\n                j: currentItem.j,\r\n                left: currentItem.left,\r\n                right: currentItem.right,\r\n                top: currentItem.top,\r\n                bottom: currentItem.bottom,\r\n                allDay: currentItem.allDay,\r\n                sortedIndex: this._skipSortedIndex(currentIndex) ? null : sortedIndex++\r\n            }\r\n        };\r\n        var startNewStack = currentItem => {\r\n            stack.items = [createItem(currentItem)];\r\n            stack.left = currentItem.left;\r\n            stack.right = currentItem.right;\r\n            stack.top = currentItem.top;\r\n            stack.bottom = currentItem.bottom;\r\n            stack.allDay = currentItem.allDay\r\n        };\r\n        var pushItemsInResult = items => {\r\n            items.forEach(item => {\r\n                result.push({\r\n                    index: item.index,\r\n                    count: maxIndexInStack + 1,\r\n                    i: item.i,\r\n                    j: item.j,\r\n                    sortedIndex: item.sortedIndex\r\n                })\r\n            })\r\n        };\r\n        for (i = 0; i < sortedArray.length; i++) {\r\n            currentItem = sortedArray[i];\r\n            indexes = [];\r\n            if (!stack.items) {\r\n                startNewStack(currentItem)\r\n            } else if (this._isItemsCross(stack, currentItem)) {\r\n                stack.items.forEach((item, index) => {\r\n                    if (this._isItemsCross(item, currentItem)) {\r\n                        indexes.push(item.index)\r\n                    }\r\n                });\r\n                itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\r\n                stack.items.push(createItem(currentItem, itemIndex));\r\n                maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\r\n                stack.left = Math.min(stack.left, currentItem.left);\r\n                stack.right = Math.max(stack.right, currentItem.right);\r\n                stack.top = Math.min(stack.top, currentItem.top);\r\n                stack.bottom = Math.max(stack.bottom, currentItem.bottom);\r\n                stack.allDay = currentItem.allDay\r\n            } else {\r\n                pushItemsInResult(stack.items);\r\n                stack = {};\r\n                startNewStack(currentItem);\r\n                maxIndexInStack = 0\r\n            }\r\n        }\r\n        if (stack.items) {\r\n            pushItemsInResult(stack.items)\r\n        }\r\n        return result.sort((function(a, b) {\r\n            var columnCondition = a.j - b.j;\r\n            var rowCondition = a.i - b.i;\r\n            return rowCondition ? rowCondition : columnCondition\r\n        }))\r\n    }\r\n    _skipSortedIndex(index) {\r\n        return index > this._getMaxAppointmentCountPerCell() - 1\r\n    }\r\n    _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\r\n        var result = 0;\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\r\n                result = i;\r\n                break\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getExtendedPositionMap(map, positions) {\r\n        var positionCounter = 0;\r\n        var result = [];\r\n        for (var i = 0, mapLength = map.length; i < mapLength; i++) {\r\n            var resultString = [];\r\n            for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\r\n                map[i][j].index = positions[positionCounter].index;\r\n                map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\r\n                map[i][j].count = positions[positionCounter++].count;\r\n                resultString.push(map[i][j]);\r\n                this._checkLongCompactAppointment(map[i][j], resultString)\r\n            }\r\n            result.push(resultString)\r\n        }\r\n        return result\r\n    }\r\n    _checkLongCompactAppointment(item, result) {\r\n        this._splitLongCompactAppointment(item, result);\r\n        return result\r\n    }\r\n    _splitLongCompactAppointment(item, result) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\r\n        var compactCount = 0;\r\n        if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\r\n            item.isCompact = true;\r\n            compactCount = this._getCompactAppointmentParts(item.width);\r\n            for (var k = 1; k < compactCount; k++) {\r\n                var compactPart = extend(true, {}, item);\r\n                compactPart.left = this._getCompactLeftCoordinate(item.left, k);\r\n                compactPart.cellIndex = compactPart.cellIndex + k;\r\n                compactPart.sortedIndex = null;\r\n                result.push(compactPart)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    normalizeEndDateByViewEnd(appointment, endDate) {\r\n        var result = new Date(endDate.getTime());\r\n        if (!this.isAllDay(appointment)) {\r\n            var viewEndDate = dateUtils.roundToHour(this.instance.fire(\"getEndViewDate\"));\r\n            if (result > viewEndDate) {\r\n                result = viewEndDate\r\n            }\r\n        }\r\n        var endDayHour = this.instance._getCurrentViewOption(\"endDayHour\");\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var currentViewEndTime = new Date(new Date(endDate.getTime()).setHours(endDayHour, 0, 0, 0));\r\n        if (result.getTime() > currentViewEndTime.getTime() || allDay && result.getHours() < endDayHour) {\r\n            result = currentViewEndTime\r\n        }\r\n        return result\r\n    }\r\n    _adjustDurationByDaylightDiff(duration, startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\r\n        return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return 0 !== diff\r\n    }\r\n    _calculateDurationByDaylightDiff(duration, diff) {\r\n        return duration + diff * toMs(\"minute\")\r\n    }\r\n    _getAppointmentDurationInMs(startDate, endDate, allDay) {\r\n        return this.instance.fire(\"getAppointmentDurationInMs\", {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        })\r\n    }\r\n    _markAppointmentAsVirtual(coordinates) {\r\n        var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\r\n        if (coordinates.count - countFullWidthAppointmentInCell > 0) {\r\n            var {\r\n                top: top,\r\n                left: left\r\n            } = coordinates;\r\n            coordinates.virtual = {\r\n                top: top,\r\n                left: left,\r\n                index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\r\n                isAllDay: isAllDay\r\n            }\r\n        }\r\n    }\r\n    _generateAppointmentCollectorIndex(_ref, isAllDay) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        } = _ref;\r\n        return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(cellIndex, \"-\").concat(isAllDay)\r\n    }\r\n    _getMaxAppointmentCountPerCellByType(isAllDay) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\r\n        if (isObject(appointmentCountPerCell)) {\r\n            return isAllDay ? this._getMaxAppointmentCountPerCell().allDay : this._getMaxAppointmentCountPerCell().simple\r\n        } else {\r\n            return appointmentCountPerCell\r\n        }\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount, isAllDay) {\r\n        return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay)\r\n    }\r\n    getDropDownAppointmentHeight() {\r\n        return this.getPositioningStrategy().getDropDownAppointmentHeight()\r\n    }\r\n    getDropDownButtonAdaptiveSize() {\r\n        return DROP_DOWN_BUTTON_ADAPTIVE_SIZE\r\n    }\r\n    getDefaultCellWidth() {\r\n        return this._defaultWidth\r\n    }\r\n    getDefaultCellHeight() {\r\n        return this._defaultHeight\r\n    }\r\n    getDefaultAllDayCellHeight() {\r\n        return this._allDayHeight\r\n    }\r\n    getCollectorTopOffset(allDay) {\r\n        return this.getPositioningStrategy().getCollectorTopOffset(allDay)\r\n    }\r\n    getCollectorLeftOffset() {\r\n        return this.getPositioningStrategy().getCollectorLeftOffset()\r\n    }\r\n    getAppointmentDataCalculator() {}\r\n    _customizeCoordinates(coordinates, height, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var index = coordinates.index;\r\n        var appointmentHeight = height / appointmentCountPerCell;\r\n        var appointmentTop = coordinates.top + index * appointmentHeight;\r\n        var top = appointmentTop + topOffset;\r\n        var width = coordinates.width;\r\n        var left = coordinates.left;\r\n        if (coordinates.isCompact) {\r\n            this._isAdaptive() && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: appointmentHeight,\r\n            width: width,\r\n            top: top,\r\n            left: left,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _isAppointmentEmpty(height, width) {\r\n        return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth()\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxHeight = this._getMaxHeight();\r\n        if (!isNumeric(appointmentCountPerCell)) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxHeight - offsets.unlimited) / maxHeight\r\n        }\r\n        var topOffset = (1 - ratio) * maxHeight;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxHeight -= appointmentDefaultOffset;\r\n            topOffset = appointmentDefaultOffset\r\n        }\r\n        return {\r\n            height: ratio * maxHeight,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getAppointmentCount() {}\r\n    _getDefaultRatio() {}\r\n    _getOffsets() {}\r\n    _getMaxHeight() {}\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    needSeparateAppointment(allDay) {\r\n        return this.instance.fire(\"isGroupedByDate\") && allDay\r\n    }\r\n    _getMaxAppointmentCountPerCell() {\r\n        if (!this._maxAppointmentCountPerCell) {\r\n            var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n            var appointmentCountPerCell;\r\n            if (isNumeric(overlappingMode)) {\r\n                appointmentCountPerCell = overlappingMode\r\n            }\r\n            if (\"auto\" === overlappingMode) {\r\n                appointmentCountPerCell = this._getDynamicAppointmentCountPerCell()\r\n            }\r\n            if (\"unlimited\" === overlappingMode) {\r\n                appointmentCountPerCell = void 0\r\n            }\r\n            this._maxAppointmentCountPerCell = appointmentCountPerCell\r\n        }\r\n        return this._maxAppointmentCountPerCell\r\n    }\r\n    _getDynamicAppointmentCountPerCell() {\r\n        return this.getPositioningStrategy().getDynamicAppointmentCountPerCell()\r\n    }\r\n    hasAllDayAppointments() {\r\n        return false\r\n    }\r\n    _isCompactTheme() {\r\n        return \"compact\" === (currentTheme() || \"\").split(\".\").pop()\r\n    }\r\n    _getAppointmentDefaultOffset() {\r\n        return this.getPositioningStrategy().getAppointmentDefaultOffset()\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return this._getAppointmentHeightByTheme()\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return this._getAppointmentDefaultHeight()\r\n    }\r\n    _getAppointmentHeightByTheme() {\r\n        return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT\r\n    }\r\n    _getAppointmentDefaultWidth() {\r\n        return this.getPositioningStrategy()._getAppointmentDefaultWidth()\r\n    }\r\n    _getAppointmentMinWidth() {\r\n        return this._getAppointmentDefaultWidth()\r\n    }\r\n    _needVerticalGroupBounds() {\r\n        return false\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n}\r\nexport default BaseRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}