{"ast":null,"code":"var _jsxFileName = \"/home/igor/welcomedev-react-starter/src/calendar/Calendar.tsx\";\n// import { useState } from 'react';\n// import { DateRange ,DateRangePicker} from 'react-date-range';\n// import 'react-date-range/dist/styles.css';\n// import 'react-date-range/dist/theme/default.css';\n// import { addDays } from 'date-fns';\n// interface Props{\n//     title?:string,\n//     startDate?: Date  ,\n//     end?:Date ,\n//     allDay?: boolean | null\n// }\n// const events = [\n//     {\n//         title: \"Big Meeting\",\n//         allDay: true,\n//         startDate: new Date(2021, 10, 0),\n//         end: new Date(2021, 10, 0),\n//     },\n//     {\n//         title: \"Vacation\",\n//         startDate: new Date(2021, 11, 7),\n//         end: new Date(2021, 11, 10),\n//     },\n//     {\n//         title: \"Conference\",\n//         startDate: new Date(2021, 10, 20),\n//         end: new Date(2021, 10, 23),\n//     },\n// ];\n// function Calendar(){\n//     const [state, setState] = useState({\n//         selection: {\n//             startDate: new Date(),\n//             endDate: new Date(),\n//             key: 'selection'\n//         }\n//         });\n//     const [newEvent, setNewEvent] = useState({title:\"\", startDate:new Date(), end: new Date()})\n//     const [allEvents, setAllEvents] = useState(events)    \n//     function handleEvent(){\n//         setAllEvents([...allEvents, newEvent])\n//     }\n//     return(\n//         <DateRange\n//             editableDateInputs={true}\n//             onChange={(item: Date | any) => {\n//                 setState({ ...state, ...item })\n//                 setNewEvent({ ...newEvent, startDate:item }) \n//                 handleEvent()\n//             }}\n//             moveRangeOnFirstSelection={false}\n//             ranges={[state.selection]}\n//         />\n//     );\n// }\n// export default Calendar;\n//--------------------------------------------------------------------------------------------\nimport { MyWeek } from \"./Help\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calendar() {\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    culture: culture,\n    localizer: localizer,\n    views: {\n      month: true,\n      week: MyWeek,\n      day: true,\n      agenda: true\n    },\n    style: {\n      height: props.fullScreen ? '800px' : '500px',\n      width: '100%'\n    },\n    messages: messages,\n    startAccessor: \"start\",\n    endAccessor: \"end\",\n    min: minimum,\n    max: maximum,\n    timeslots: timeslots,\n    step: step,\n    events: props.rendezVous.map(rdv => toEvent(rdv)),\n    onSelectEvent: event => {\n      if (!props.readOnly) {\n        window.location.href = `#rendezVous/${event.id}/edition`;\n      }\n    },\n    dayPropGetter: customDayPropGetter,\n    slotPropGetter: customSlotPropGetter,\n    eventPropGetter: customEventPropGetter,\n    components: {\n      // event: customEvent,\n      agenda: {\n        event: customEventAgenda\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/calendar/Calendar.tsx"],"names":["MyWeek","Calendar","culture","localizer","month","week","day","agenda","height","props","fullScreen","width","messages","minimum","maximum","timeslots","step","rendezVous","map","rdv","toEvent","event","readOnly","window","location","href","id","customDayPropGetter","customSlotPropGetter","customEventPropGetter","customEventAgenda"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,SAASA,MAAT,QAAuB,QAAvB;;;AAEA,SAASC,QAAT,GAAoB;AAChB,sBAAO,QAAC,QAAD;AACH,IAAA,OAAO,EAAEC,OADN;AAEH,IAAA,SAAS,EAAEC,SAFR;AAGH,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,IAAI,EAAEL,MAApB;AAA4BM,MAAAA,GAAG,EAAE,IAAjC;AAAuCC,MAAAA,MAAM,EAAE;AAA/C,KAHJ;AAIH,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAEC,KAAK,CAACC,UAAN,GAAmB,OAAnB,GAA6B,OAAtC;AAA+CC,MAAAA,KAAK,EAAE;AAAtD,KAJJ;AAKH,IAAA,QAAQ,EAAEC,QALP;AAMH,IAAA,aAAa,EAAC,OANX;AAOH,IAAA,WAAW,EAAC,KAPT;AAQH,IAAA,GAAG,EAAEC,OARF;AASH,IAAA,GAAG,EAAEC,OATF;AAUH,IAAA,SAAS,EAAEC,SAVR;AAWH,IAAA,IAAI,EAAEC,IAXH;AAYH,IAAA,MAAM,EAAEP,KAAK,CAACQ,UAAN,CAAiBC,GAAjB,CAAsBC,GAAD,IAAqBC,OAAO,CAACD,GAAD,CAAjD,CAZL;AAaH,IAAA,aAAa,EAAGE,KAAD,IAA4B;AAC3C,UAAI,CAACZ,KAAK,CAACa,QAAX,EAAqB;AACjBC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwB,eAAcJ,KAAK,CAACK,EAAG,UAA/C;AACH;AACA,KAjBE;AAkBH,IAAA,aAAa,EAAEC,mBAlBZ;AAmBH,IAAA,cAAc,EAAEC,oBAnBb;AAoBH,IAAA,eAAe,EAAEC,qBApBd;AAqBH,IAAA,UAAU,EAAE;AACZ;AACAtB,MAAAA,MAAM,EAAE;AACJc,QAAAA,KAAK,EAAES;AADH;AAFI;AArBT;AAAA;AAAA;AAAA;AAAA,UAAP;AA4BH;;KA7BQ7B,Q","sourcesContent":["// import { useState } from 'react';\n// import { DateRange ,DateRangePicker} from 'react-date-range';\n// import 'react-date-range/dist/styles.css';\n// import 'react-date-range/dist/theme/default.css';\n// import { addDays } from 'date-fns';\n\n\n// interface Props{\n//     title?:string,\n//     startDate?: Date  ,\n//     end?:Date ,\n//     allDay?: boolean | null\n// }\n\n// const events = [\n//     {\n//         title: \"Big Meeting\",\n//         allDay: true,\n//         startDate: new Date(2021, 10, 0),\n//         end: new Date(2021, 10, 0),\n//     },\n//     {\n//         title: \"Vacation\",\n//         startDate: new Date(2021, 11, 7),\n//         end: new Date(2021, 11, 10),\n//     },\n//     {\n//         title: \"Conference\",\n//         startDate: new Date(2021, 10, 20),\n//         end: new Date(2021, 10, 23),\n//     },\n// ];\n\n\n// function Calendar(){\n//     const [state, setState] = useState({\n//         selection: {\n//             startDate: new Date(),\n//             endDate: new Date(),\n//             key: 'selection'\n//         }\n//         });\n//     const [newEvent, setNewEvent] = useState({title:\"\", startDate:new Date(), end: new Date()})\n//     const [allEvents, setAllEvents] = useState(events)    \n    \n//     function handleEvent(){\n//         setAllEvents([...allEvents, newEvent])\n//     }\n\n//     return(\n//         <DateRange\n//             editableDateInputs={true}\n//             onChange={(item: Date | any) => {\n//                 setState({ ...state, ...item })\n//                 setNewEvent({ ...newEvent, startDate:item }) \n//                 handleEvent()\n//             }}\n//             moveRangeOnFirstSelection={false}\n//             ranges={[state.selection]}\n//         />\n//     );\n// }\n\n// export default Calendar;\n\n//--------------------------------------------------------------------------------------------\nimport { MyWeek } from \"./Help\"\n\nfunction Calendar() {\n    return <Calendar\n        culture={culture}\n        localizer={localizer}\n        views={{month: true, week: MyWeek, day: true, agenda: true}}\n        style={{height: props.fullScreen ? '800px' : '500px', width: '100%'}}\n        messages={messages}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        min={minimum}\n        max={maximum}\n        timeslots={timeslots}\n        step={step}\n        events={props.rendezVous.map((rdv: RendezVous) => toEvent(rdv))}\n        onSelectEvent={(event: EventRendezVous) => {\n        if (!props.readOnly) {\n            window.location.href = `#rendezVous/${event.id}/edition`\n        }\n        }}\n        dayPropGetter={customDayPropGetter}\n        slotPropGetter={customSlotPropGetter}\n        eventPropGetter={customEventPropGetter}\n        components={{\n        // event: customEvent,\n        agenda: {\n            event: customEventAgenda,\n        },\n        }}\n    />\n}"]},"metadata":{},"sourceType":"module"}