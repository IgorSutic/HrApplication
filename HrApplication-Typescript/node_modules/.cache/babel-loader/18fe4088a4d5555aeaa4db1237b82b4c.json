{"ast":null,"code":"var _jsxFileName = \"/home/igor/welcomedev-react-starter/src/components/GoogleCalendar.tsx\",\n    _s = $RefreshSig$();\n\n//---------------------------------------------\n// import 'whatwg-fetch';\n// import React from 'react';\n// import Scheduler from 'devextreme-react/scheduler';\n// import CustomStore from 'devextreme/data/custom_store';\n// function getData(_:any, requestOptions:any) {\n//   const PUBLIC_KEY = 'AIzaSyBnNAISIUKe6xdhq1_rjor2rxoI3UlMY7k',\n//     CALENDAR_ID = 'f7jnetm22dsjc3npc2lu3buvu4@group.calendar.google.com';\n//   const dataUrl = [ 'https://www.googleapis.com/calendar/v3/calendars/',\n//     CALENDAR_ID, '/events?key=', PUBLIC_KEY].join('');\n//   return fetch(dataUrl, requestOptions).then(\n//     (response) => response.json()\n//   ).then((data) => data.items);\n// }\n// const dataSource = new CustomStore({\n//   load: (options) => getData(options, { showDeleted: false })\n// });\n// const currentDate = new Date();\n// const views:any = ['day', 'workWeek', 'month'];\n// class GoogleCalendar extends React.Component {\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"long-title\">\n//           <h3>QCerris</h3>\n//         </div>\n//         <Scheduler\n//           dataSource={dataSource}\n//           views={views}\n//           defaultCurrentView=\"workWeek\"\n//           defaultCurrentDate={currentDate}\n//           height={500}\n//           startDayHour={7}\n//           editing={false}\n//           showAllDayPanel={false}\n//           startDateExpr=\"start.dateTime\"\n//           endDateExpr=\"end.dateTime\"\n//           textExpr=\"summary\"\n//           timeZone=\"Europe/Belgrade\" />\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default GoogleCalendar;\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DatePicker';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CustomInput() {\n  _s();\n\n  const [value, setValue] = React.useState(new Date());\n  const [value1, setValue1] = React.useState(new Date());\n  return /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n    dateAdapter: AdapterDateFns,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: \"main\",\n      sx: {\n        height: '10vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n            label: \"Custom input\",\n            value: value,\n            onChange: newValue => {\n              setValue(newValue);\n              console.log(value.getTime());\n            },\n            renderInput: ({\n              inputRef,\n              inputProps,\n              InputProps\n            }) => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                ref: inputRef,\n                ...inputProps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 29\n              }, this), InputProps === null || InputProps === void 0 ? void 0 : InputProps.endAdornment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n            label: \"Custom input\",\n            value: value1,\n            onChange: newValue => {\n              setValue1(newValue);\n            },\n            renderInput: ({\n              inputRef,\n              inputProps,\n              InputProps\n            }) => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                ref: inputRef,\n                ...inputProps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 29\n              }, this), InputProps === null || InputProps === void 0 ? void 0 : InputProps.endAdornment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), value.getTime() - value1.getTime() ? /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"success\",\n        sx: {\n          mt: 1,\n          mb: 2\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 49\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomInput, \"19+q8IVGRvTonBzXZV8/inIB9zM=\");\n\n_c = CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/components/GoogleCalendar.tsx"],"names":["React","Box","AdapterDateFns","LocalizationProvider","DesktopDatePicker","Grid","Button","CustomInput","value","setValue","useState","Date","value1","setValue1","height","newValue","console","log","getTime","inputRef","inputProps","InputProps","display","alignItems","endAdornment","mt","mb"],"mappings":"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","sourcesContent":["//---------------------------------------------\n\n// import 'whatwg-fetch';\n// import React from 'react';\n// import Scheduler from 'devextreme-react/scheduler';\n// import CustomStore from 'devextreme/data/custom_store';\n\n// function getData(_:any, requestOptions:any) {\n\n//   const PUBLIC_KEY = 'AIzaSyBnNAISIUKe6xdhq1_rjor2rxoI3UlMY7k',\n//     CALENDAR_ID = 'f7jnetm22dsjc3npc2lu3buvu4@group.calendar.google.com';\n//   const dataUrl = [ 'https://www.googleapis.com/calendar/v3/calendars/',\n//     CALENDAR_ID, '/events?key=', PUBLIC_KEY].join('');\n\n//   return fetch(dataUrl, requestOptions).then(\n//     (response) => response.json()\n//   ).then((data) => data.items);\n// }\n\n// const dataSource = new CustomStore({\n//   load: (options) => getData(options, { showDeleted: false })\n// });\n\n// const currentDate = new Date();\n// const views:any = ['day', 'workWeek', 'month'];\n\n// class GoogleCalendar extends React.Component {\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"long-title\">\n//           <h3>QCerris</h3>\n//         </div>\n//         <Scheduler\n//           dataSource={dataSource}\n//           views={views}\n//           defaultCurrentView=\"workWeek\"\n//           defaultCurrentDate={currentDate}\n//           height={500}\n//           startDayHour={7}\n//           editing={false}\n//           showAllDayPanel={false}\n//           startDateExpr=\"start.dateTime\"\n//           endDateExpr=\"end.dateTime\"\n//           textExpr=\"summary\"\n//           timeZone=\"Europe/Belgrade\" />\n//       </React.Fragment>\n\n//     );\n//   }\n// }\n\n// export default GoogleCalendar;\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DatePicker';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\n\nexport default function CustomInput() {\n  const [value, setValue] = React.useState<Date | null | number|any>(new Date());\n  const [value1, setValue1] = React.useState<Date | null | number|any>(new Date());\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <Grid container component=\"main\" sx={{ height: '10vh' }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <DesktopDatePicker\n                        label=\"Custom input\"\n                        value={value}\n                        onChange={(newValue:Date|null|number|any) => {\n                            setValue(newValue);\n                            console.log(value.getTime())\n                        }}\n                        renderInput={({ inputRef, inputProps, InputProps }) => (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <input ref={inputRef} {...inputProps} />\n                            {InputProps?.endAdornment}\n                        </Box>\n                        )}\n                    />\n                </Grid>\n                        \n                <Grid item>\n                    <DesktopDatePicker\n                        label=\"Custom input\"\n                        value={value1}\n                        onChange={(newValue:Date|null|number) => {\n                            setValue1(newValue);\n                        }}\n                        renderInput={({ inputRef, inputProps, InputProps }) => (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <input ref={inputRef} {...inputProps} />\n                            {InputProps?.endAdornment}\n                        </Box>\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            {value.getTime()-value1.getTime() ? <Button variant=\"contained\" color=\"success\" sx={{ mt: 1, mb: 2 }}>\n                Submit\n            </Button> : null}\n            \n        </Grid>\n    </LocalizationProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}