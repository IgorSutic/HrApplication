{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointment_model.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../../core/config\";\nimport { map, each } from \"../../core/utils/iterator\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport { getRecurrenceProcessor } from \"./recurrence\";\nimport dateUtils from \"../../core/utils/date\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isFunction, isDefined, isString } from \"../../core/utils/type\";\nimport { inArray, wrapToArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport query from \"../../data/query\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar DATE_FILTER_POSITION = 0;\nvar USER_FILTER_POSITION = 1;\n\nclass FilterMaker {\n  constructor(dataAccessors) {\n    this._filterRegistry = null;\n    this._dataAccessors = dataAccessors;\n  }\n\n  isRegistered() {\n    return !!this._filterRegistry;\n  }\n\n  clearRegistry() {\n    delete this._filterRegistry;\n  }\n\n  make(type, args) {\n    if (!this._filterRegistry) {\n      this._filterRegistry = {};\n    }\n\n    this._make(type).apply(this, args);\n  }\n\n  _make(type) {\n    switch (type) {\n      case \"date\":\n        return (min, max, useAccessors) => {\n          var startDate = useAccessors ? this._dataAccessors.getter.startDate : this._dataAccessors.expr.startDateExpr;\n          var endDate = useAccessors ? this._dataAccessors.getter.endDate : this._dataAccessors.expr.endDateExpr;\n          var recurrenceRule = this._dataAccessors.expr.recurrenceRuleExpr;\n          this._filterRegistry.date = [[[endDate, \">=\", min], [startDate, \"<\", max]], \"or\", [recurrenceRule, \"startswith\", \"freq\"], \"or\", [[endDate, min], [startDate, min]]];\n\n          if (!recurrenceRule) {\n            this._filterRegistry.date.splice(1, 2);\n          }\n        };\n\n      case \"user\":\n        return userFilter => {\n          this._filterRegistry.user = userFilter;\n        };\n    }\n  }\n\n  combine() {\n    var filter = [];\n    this._filterRegistry.date && filter.push(this._filterRegistry.date);\n    this._filterRegistry.user && filter.push(this._filterRegistry.user);\n    return filter;\n  }\n\n  dateFilter() {\n    return this._filterRegistry.date;\n  }\n\n}\n\nvar compareDateWithStartDayHour = (startDate, endDate, startDayHour, allDay, severalDays) => {\n  var startTime = dateUtils.dateTimeFromDecimal(startDayHour);\n  var result = startDate.getHours() >= startTime.hours && startDate.getMinutes() >= startTime.minutes || endDate.getHours() === startTime.hours && endDate.getMinutes() > startTime.minutes || endDate.getHours() > startTime.hours || severalDays || allDay;\n  return result;\n};\n\nvar compareDateWithEndDayHour = options => {\n  var {\n    startDate: startDate,\n    endDate: endDate,\n    startDayHour: startDayHour,\n    endDayHour: endDayHour,\n    viewStartDayHour: viewStartDayHour,\n    viewEndDayHour: viewEndDayHour,\n    allDay: allDay,\n    severalDays: severalDays,\n    min: min,\n    max: max,\n    checkIntersectViewport: checkIntersectViewport\n  } = options;\n  var hiddenInterval = (24 - viewEndDayHour + viewStartDayHour) * toMs(\"hour\");\n  var apptDuration = endDate.getTime() - startDate.getTime();\n  var delta = (hiddenInterval - apptDuration) / toMs(\"hour\");\n  var apptStartHour = startDate.getHours();\n  var apptStartMinutes = startDate.getMinutes();\n  var result;\n  var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\n  var startTime = dateUtils.dateTimeFromDecimal(startDayHour);\n  var apptIntersectViewport = startDate < max && endDate > min;\n  result = checkIntersectViewport && apptIntersectViewport || apptStartHour < endTime.hours || apptStartHour === endTime.hours && apptStartMinutes < endTime.minutes || allDay && startDate <= max || severalDays && apptIntersectViewport && (apptStartHour < endTime.hours || 60 * endDate.getHours() + endDate.getMinutes() > 60 * startTime.hours);\n\n  if (apptDuration < hiddenInterval) {\n    if (apptStartHour > endTime.hours && apptStartMinutes > endTime.minutes && delta <= apptStartHour - endDayHour) {\n      result = false;\n    }\n  }\n\n  return result;\n};\n\nclass AppointmentModel {\n  constructor(dataSource, dataAccessors, baseAppointmentDuration) {\n    this.setDataAccessors(dataAccessors);\n    this.setDataSource(dataSource);\n    this._updatedAppointmentKeys = [];\n    this._filterMaker = new FilterMaker(dataAccessors);\n    this._baseAppointmentDuration = baseAppointmentDuration;\n  }\n\n  get keyName() {\n    var store = this._dataSource.store();\n\n    return store.key();\n  }\n\n  _createFilter(min, max, remoteFiltering, dateSerializationFormat) {\n    this._filterMaker.make(\"date\", [min, max]);\n\n    var userFilterPosition = this._excessFiltering() ? this._dataSource.filter()[USER_FILTER_POSITION] : this._dataSource.filter();\n\n    this._filterMaker.make(\"user\", [userFilterPosition]);\n\n    if (remoteFiltering) {\n      this._dataSource.filter(this._combineRemoteFilter(dateSerializationFormat));\n    }\n  }\n\n  _excessFiltering() {\n    var dateFilter = this._filterMaker.dateFilter();\n\n    var dataSourceFilter = this._dataSource.filter();\n\n    return dataSourceFilter && (equalByValue(dataSourceFilter, dateFilter) || dataSourceFilter.length && equalByValue(dataSourceFilter[DATE_FILTER_POSITION], dateFilter));\n  }\n\n  _combineFilter() {\n    return this._filterMaker.combine();\n  }\n\n  _getStoreKey(target) {\n    var store = this._dataSource.store();\n\n    return store.keyOf(target);\n  }\n\n  _filterAppointmentByResources(appointment, resources) {\n    var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\n      var resourceGetter = this._dataAccessors.getter.resources[resourceName];\n      var resource;\n\n      if (isFunction(resourceGetter)) {\n        resource = resourceGetter(appointment);\n      }\n\n      var appointmentResourceValues = wrapToArray(resource);\n      var resourceData = map(resources[resourceIndex].items, item => item.id);\n\n      for (var j = 0; j < appointmentResourceValues.length; j++) {\n        if (inArray(appointmentResourceValues[j], resourceData) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var result = false;\n\n    for (var i = 0; i < resources.length; i++) {\n      var resourceName = resources[i].name;\n      result = checkAppointmentResourceValues(resourceName, i);\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    return result;\n  }\n\n  _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\n    var recurrenceRule = appointment.recurrenceRule;\n    var recurrenceException = appointment.recurrenceException;\n    var allDay = appointment.allDay;\n    var result = true;\n    var appointmentStartDate = appointment.startDate;\n    var appointmentEndDate = appointment.endDate;\n    var recurrenceProcessor = getRecurrenceProcessor();\n\n    if (allDay || this._appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\n      var trimmedDates = this._trimDates(min, max);\n\n      min = trimmedDates.min;\n      max = new Date(trimmedDates.max.getTime() - toMs(\"minute\"));\n    }\n\n    if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = appointmentEndDate > min && appointmentStartDate <= max;\n    }\n\n    if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = recurrenceProcessor.hasRecurrence({\n        rule: recurrenceRule,\n        exception: recurrenceException,\n        start: appointmentStartDate,\n        end: appointmentEndDate,\n        min: min,\n        max: max,\n        firstDayOfWeek: firstDayOfWeek\n      });\n    }\n\n    return result;\n  }\n\n  _appointmentPartInInterval(startDate, endDate, startDayHour, endDayHour) {\n    var apptStartDayHour = startDate.getHours();\n    var apptEndDayHour = endDate.getHours();\n    return apptStartDayHour <= startDayHour && apptEndDayHour <= endDayHour && apptEndDayHour >= startDayHour || apptEndDayHour >= endDayHour && apptStartDayHour <= endDayHour && apptStartDayHour >= startDayHour;\n  }\n\n  _createAllDayAppointmentFilter(filterOptions) {\n    var {\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour\n    } = filterOptions;\n    var that = this;\n    return [[appointment => that.appointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour)]];\n  }\n\n  _createCombinedFilter(filterOptions, timeZoneCalculator) {\n    var dataAccessors = this._dataAccessors;\n    var min = new Date(filterOptions.min);\n    var max = new Date(filterOptions.max);\n    var getRecurrenceException = filterOptions.recurrenceException;\n    var {\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour,\n      resources: resources,\n      firstDayOfWeek: firstDayOfWeek,\n      checkIntersectViewport: checkIntersectViewport\n    } = filterOptions;\n    var that = this;\n    return [[appointment => {\n      var _appointment$visible;\n\n      var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\n      var result = appointmentVisible;\n      var startDate = new Date(dataAccessors.getter.startDate(appointment));\n      var endDate = new Date(dataAccessors.getter.endDate(appointment));\n      var appointmentTakesAllDay = that.appointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour);\n      var appointmentTakesSeveralDays = that.appointmentTakesSeveralDays(appointment);\n      var isAllDay = dataAccessors.getter.allDay(appointment);\n      var appointmentIsLong = appointmentTakesSeveralDays || appointmentTakesAllDay;\n      var useRecurrence = isDefined(dataAccessors.getter.recurrenceRule);\n      var recurrenceRule;\n\n      if (useRecurrence) {\n        recurrenceRule = dataAccessors.getter.recurrenceRule(appointment);\n      }\n\n      if (resources && resources.length) {\n        result = that._filterAppointmentByResources(appointment, resources);\n      }\n\n      if (appointmentTakesAllDay && false === filterOptions.allDay) {\n        result = false;\n      }\n\n      var startDateTimeZone = dataAccessors.getter.startDateTimeZone(appointment);\n      var endDateTimeZone = dataAccessors.getter.endDateTimeZone(appointment);\n      var comparableStartDate = timeZoneCalculator.createDate(startDate, {\n        appointmentTimeZone: startDateTimeZone,\n        path: \"toGrid\"\n      });\n      var comparableEndDate = timeZoneCalculator.createDate(endDate, {\n        appointmentTimeZone: endDateTimeZone,\n        path: \"toGrid\"\n      });\n\n      if (result && useRecurrence) {\n        var recurrenceException = getRecurrenceException ? getRecurrenceException(appointment) : dataAccessors.getter.recurrenceException(appointment);\n        result = that._filterAppointmentByRRule({\n          startDate: comparableStartDate,\n          endDate: comparableEndDate,\n          recurrenceRule: recurrenceRule,\n          recurrenceException: recurrenceException,\n          allDay: appointmentTakesAllDay\n        }, min, max, startDayHour, endDayHour, firstDayOfWeek);\n      }\n\n      if (result && comparableEndDate < min && appointmentIsLong && !isAllDay && (!useRecurrence || useRecurrence && !recurrenceRule)) {\n        result = false;\n      }\n\n      if (result && isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\n        result = compareDateWithStartDayHour(comparableStartDate, comparableEndDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays);\n      }\n\n      if (result && isDefined(endDayHour)) {\n        result = compareDateWithEndDayHour({\n          startDate: comparableStartDate,\n          endDate: comparableEndDate,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: viewStartDayHour,\n          viewEndDayHour: viewEndDayHour,\n          allDay: appointmentTakesAllDay,\n          severalDays: appointmentTakesSeveralDays,\n          min: min,\n          max: max,\n          checkIntersectViewport: checkIntersectViewport\n        });\n      }\n\n      if (result && useRecurrence && !recurrenceRule) {\n        if (comparableEndDate < min && !isAllDay) {\n          result = false;\n        }\n      }\n\n      return result;\n    }]];\n  }\n\n  setDataSource(dataSource) {\n    this._dataSource = dataSource;\n    this.cleanModelState();\n\n    this._initStoreChangeHandlers();\n\n    this._filterMaker && this._filterMaker.clearRegistry();\n  }\n\n  _initStoreChangeHandlers() {\n    var dataSource = this._dataSource;\n    var store = null === dataSource || void 0 === dataSource ? void 0 : dataSource.store();\n\n    if (store) {\n      store.on(\"updating\", newItem => {\n        this._updatedAppointment = newItem;\n      });\n      store.on(\"push\", pushItems => {\n        var items = dataSource.items();\n        var keyName = store.key();\n        pushItems.forEach(pushItem => {\n          var itemExists = 0 !== items.filter(item => item[keyName] === pushItem.key).length;\n\n          if (itemExists) {\n            this._updatedAppointmentKeys.push({\n              key: keyName,\n              value: pushItem.key\n            });\n          } else {\n            var {\n              data: data\n            } = pushItem;\n            data && items.push(data);\n          }\n        });\n        dataSource.load();\n      });\n    }\n  }\n\n  getUpdatedAppointment() {\n    return this._updatedAppointment;\n  }\n\n  getUpdatedAppointmentKeys() {\n    return this._updatedAppointmentKeys;\n  }\n\n  cleanModelState() {\n    this._updatedAppointment = null;\n    this._updatedAppointmentKeys = [];\n  }\n\n  setDataAccessors(dataAccessors) {\n    this._dataAccessors = dataAccessors;\n    this._filterMaker = new FilterMaker(dataAccessors);\n  }\n\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    if (!this._dataSource) {\n      return;\n    }\n\n    var trimmedDates = this._trimDates(min, max);\n\n    if (!this._filterMaker.isRegistered()) {\n      this._createFilter(trimmedDates.min, trimmedDates.max, remoteFiltering, dateSerializationFormat);\n    } else {\n      var _this$_dataSource$fil;\n\n      this._filterMaker.make(\"date\", [trimmedDates.min, trimmedDates.max]);\n\n      if ((null === (_this$_dataSource$fil = this._dataSource.filter()) || void 0 === _this$_dataSource$fil ? void 0 : _this$_dataSource$fil.length) > 1) {\n        var userFilter = this._serializeRemoteFilter([this._dataSource.filter()[1]], dateSerializationFormat);\n\n        this._filterMaker.make(\"user\", userFilter);\n      }\n\n      if (remoteFiltering) {\n        this._dataSource.filter(this._combineRemoteFilter(dateSerializationFormat));\n      }\n    }\n  }\n\n  _combineRemoteFilter(dateSerializationFormat) {\n    var combinedFilter = this._filterMaker.combine();\n\n    return this._serializeRemoteFilter(combinedFilter, dateSerializationFormat);\n  }\n\n  _serializeRemoteFilter(filter, dateSerializationFormat) {\n    if (!Array.isArray(filter)) {\n      return filter;\n    }\n\n    filter = extend([], filter);\n    var startDate = this._dataAccessors.expr.startDateExpr;\n    var endDate = this._dataAccessors.expr.endDateExpr;\n\n    if (isString(filter[0])) {\n      if (config().forceIsoDateParsing && filter.length > 1) {\n        if (filter[0] === startDate || filter[0] === endDate) {\n          filter[filter.length - 1] = dateSerialization.serializeDate(new Date(filter[filter.length - 1]), dateSerializationFormat);\n        }\n      }\n    }\n\n    for (var i = 0; i < filter.length; i++) {\n      filter[i] = this._serializeRemoteFilter(filter[i], dateSerializationFormat);\n    }\n\n    return filter;\n  }\n\n  _createAppointmentFilter(filterOptions, timeZoneCalculator) {\n    var combinedFilter = this._createCombinedFilter(filterOptions, timeZoneCalculator);\n\n    if (this._filterMaker.isRegistered()) {\n      this._filterMaker.make(\"user\", void 0);\n\n      var trimmedDates = this._trimDates(filterOptions.min, filterOptions.max);\n\n      this._filterMaker.make(\"date\", [trimmedDates.min, trimmedDates.max, true]);\n\n      var dateFilter = this.customizeDateFilter(this._filterMaker.combine(), timeZoneCalculator);\n      combinedFilter.push([dateFilter]);\n    }\n\n    return combinedFilter;\n  }\n\n  filterLoadedAppointments(filterOption, timeZoneCalculator) {\n    var combinedFilter = this._createAppointmentFilter(filterOption, timeZoneCalculator);\n\n    return query(this.getPreparedDataItems()).filter(combinedFilter).toArray();\n  }\n\n  filterAllDayAppointments(filterOption) {\n    var combinedFilter = this._createAllDayAppointmentFilter(filterOption);\n\n    return query(this.getPreparedDataItems()).filter(combinedFilter).toArray();\n  }\n\n  getPreparedDataItems() {\n    var _this$_dataSource;\n\n    var dataItems = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.items();\n\n    if (!dataItems) {\n      return [];\n    }\n\n    return map(dataItems, item => {\n      var startDate = new Date(this._dataAccessors.getter.startDate(item));\n      var endDate = new Date(this._dataAccessors.getter.endDate(item));\n      this.replaceWrongEndDate(item, startDate, endDate);\n      return item;\n    });\n  }\n\n  replaceWrongEndDate(appointment, startDate, endDate) {\n    if (this._isEndDateWrong(startDate, endDate)) {\n      var isAllDay = this._dataAccessors.getter.allDay(appointment);\n\n      var calculatedEndDate = this._calculateAppointmentEndDate(isAllDay, startDate);\n\n      this._dataAccessors.setter.endDate(appointment, calculatedEndDate);\n    }\n  }\n\n  filterLoadedVirtualAppointments(filterOptions, timeZoneCalculator, groupCount) {\n    var combinedFilters = [];\n    var itemsToFilter = this.getPreparedDataItems();\n    var needPreFilter = groupCount > 0;\n\n    if (needPreFilter) {\n      itemsToFilter = itemsToFilter.filter(item => {\n        for (var i = 0; i < filterOptions.length; ++i) {\n          var {\n            resources: resources\n          } = filterOptions[i];\n\n          if (this._filterAppointmentByResources(item, resources)) {\n            return true;\n          }\n        }\n      });\n    }\n\n    filterOptions.forEach(filterOption => {\n      combinedFilters.length && combinedFilters.push(\"or\");\n\n      var filter = this._createAppointmentFilter(filterOption, timeZoneCalculator);\n\n      combinedFilters.push(filter);\n    });\n    return query(itemsToFilter).filter(combinedFilters).toArray();\n  }\n\n  _trimDates(min, max) {\n    var minCopy = dateUtils.trimTime(new Date(min));\n    var maxCopy = dateUtils.trimTime(new Date(max));\n    maxCopy.setDate(maxCopy.getDate() + 1);\n    return {\n      min: minCopy,\n      max: maxCopy\n    };\n  }\n\n  hasAllDayAppointments(items, startDayHour, endDayHour) {\n    if (!items) {\n      return false;\n    }\n\n    var that = this;\n    var result = false;\n    each(items, (index, item) => {\n      if (that.appointmentTakesAllDay(item, startDayHour, endDayHour)) {\n        result = true;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  appointmentTakesAllDay(appointment, startDayHour, endDayHour) {\n    var dataAccessors = this._dataAccessors;\n    var startDate = dataAccessors.getter.startDate(appointment);\n    var endDate = dataAccessors.getter.endDate(appointment);\n    var allDay = dataAccessors.getter.allDay(appointment);\n    return allDay || this._appointmentHasAllDayDuration(startDate, endDate, startDayHour, endDayHour);\n  }\n\n  _appointmentHasAllDayDuration(startDate, endDate, startDayHour, endDayHour) {\n    startDate = new Date(startDate);\n    endDate = new Date(endDate);\n\n    var appointmentDurationInHours = this._getAppointmentDurationInHours(startDate, endDate);\n\n    return appointmentDurationInHours >= 24 || this._appointmentHasShortDayDuration(startDate, endDate, startDayHour, endDayHour);\n  }\n\n  _appointmentHasShortDayDuration(startDate, endDate, startDayHour, endDayHour) {\n    var appointmentDurationInHours = this._getAppointmentDurationInHours(startDate, endDate);\n\n    var shortDayDurationInHours = endDayHour - startDayHour;\n    return appointmentDurationInHours >= shortDayDurationInHours && startDate.getHours() === startDayHour && endDate.getHours() === endDayHour;\n  }\n\n  _getAppointmentDurationInHours(startDate, endDate) {\n    return (endDate.getTime() - startDate.getTime()) / toMs(\"hour\");\n  }\n\n  appointmentTakesSeveralDays(appointment) {\n    var dataAccessors = this._dataAccessors;\n    var startDate = new Date(dataAccessors.getter.startDate(appointment));\n    var endDate = new Date(dataAccessors.getter.endDate(appointment));\n    return !dateUtils.sameDate(startDate, endDate);\n  }\n\n  customizeDateFilter(dateFilter, timeZoneCalculator) {\n    var currentFilter = extend(true, [], dateFilter);\n    return (appointment => {\n      var startDate = new Date(this._dataAccessors.getter.startDate(appointment));\n      var endDate = new Date(this._dataAccessors.getter.endDate(appointment));\n      appointment = extend(true, {}, appointment);\n\n      var startDateTimeZone = this._dataAccessors.getter.startDateTimeZone(appointment);\n\n      var endDateTimeZone = this._dataAccessors.getter.endDateTimeZone(appointment);\n\n      var comparableStartDate = timeZoneCalculator.createDate(startDate, {\n        appointmentTimeZone: startDateTimeZone,\n        path: \"toGrid\"\n      });\n      var comparableEndDate = timeZoneCalculator.createDate(endDate, {\n        appointmentTimeZone: endDateTimeZone,\n        path: \"toGrid\"\n      });\n\n      this._dataAccessors.setter.startDate(appointment, comparableStartDate);\n\n      this._dataAccessors.setter.endDate(appointment, comparableEndDate);\n\n      return query([appointment]).filter(currentFilter).toArray().length > 0;\n    }).bind(this);\n  }\n\n  _calculateAppointmentEndDate(isAllDay, startDate) {\n    if (isAllDay) {\n      return dateUtils.setToDayEnd(new Date(startDate));\n    }\n\n    return new Date(startDate.getTime() + this._baseAppointmentDuration * toMs(\"minute\"));\n  }\n\n  _isEndDateWrong(startDate, endDate) {\n    return !endDate || isNaN(endDate.getTime()) || startDate.getTime() > endDate.getTime();\n  }\n\n  add(rawAppointment) {\n    return this._dataSource.store().insert(rawAppointment).done(() => this._dataSource.load());\n  }\n\n  update(target, data) {\n    var key = this._getStoreKey(target);\n\n    var d = new Deferred();\n\n    this._dataSource.store().update(key, data).done(result => this._dataSource.load().done(() => d.resolve(result)).fail(d.reject)).fail(d.reject);\n\n    return d.promise();\n  }\n\n  remove(rawAppointment) {\n    var key = this._getStoreKey(rawAppointment);\n\n    return this._dataSource.store().remove(key).done(() => this._dataSource.load());\n  }\n\n}\n\nexport default AppointmentModel;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/appointment_model.js"],"names":["config","map","each","dateSerialization","getRecurrenceProcessor","dateUtils","equalByValue","isFunction","isDefined","isString","inArray","wrapToArray","extend","query","Deferred","toMs","dateToMilliseconds","DATE_FILTER_POSITION","USER_FILTER_POSITION","FilterMaker","constructor","dataAccessors","_filterRegistry","_dataAccessors","isRegistered","clearRegistry","make","type","args","_make","apply","min","max","useAccessors","startDate","getter","expr","startDateExpr","endDate","endDateExpr","recurrenceRule","recurrenceRuleExpr","date","splice","userFilter","user","combine","filter","push","dateFilter","compareDateWithStartDayHour","startDayHour","allDay","severalDays","startTime","dateTimeFromDecimal","result","getHours","hours","getMinutes","minutes","compareDateWithEndDayHour","options","endDayHour","viewStartDayHour","viewEndDayHour","checkIntersectViewport","hiddenInterval","apptDuration","getTime","delta","apptStartHour","apptStartMinutes","endTime","apptIntersectViewport","AppointmentModel","dataSource","baseAppointmentDuration","setDataAccessors","setDataSource","_updatedAppointmentKeys","_filterMaker","_baseAppointmentDuration","keyName","store","_dataSource","key","_createFilter","remoteFiltering","dateSerializationFormat","userFilterPosition","_excessFiltering","_combineRemoteFilter","dataSourceFilter","length","_combineFilter","_getStoreKey","target","keyOf","_filterAppointmentByResources","appointment","resources","checkAppointmentResourceValues","resourceName","resourceIndex","resourceGetter","resource","appointmentResourceValues","resourceData","items","item","id","j","i","name","_filterAppointmentByRRule","firstDayOfWeek","recurrenceException","appointmentStartDate","appointmentEndDate","recurrenceProcessor","_appointmentPartInInterval","trimmedDates","_trimDates","Date","isValidRecurrenceRule","hasRecurrence","rule","exception","start","end","apptStartDayHour","apptEndDayHour","_createAllDayAppointmentFilter","filterOptions","that","appointmentTakesAllDay","_createCombinedFilter","timeZoneCalculator","getRecurrenceException","_appointment$visible","appointmentVisible","visible","appointmentTakesSeveralDays","isAllDay","appointmentIsLong","useRecurrence","startDateTimeZone","endDateTimeZone","comparableStartDate","createDate","appointmentTimeZone","path","comparableEndDate","isVirtualScrolling","cleanModelState","_initStoreChangeHandlers","on","newItem","_updatedAppointment","pushItems","forEach","pushItem","itemExists","value","data","load","getUpdatedAppointment","getUpdatedAppointmentKeys","filterByDate","_this$_dataSource$fil","_serializeRemoteFilter","combinedFilter","Array","isArray","forceIsoDateParsing","serializeDate","_createAppointmentFilter","customizeDateFilter","filterLoadedAppointments","filterOption","getPreparedDataItems","toArray","filterAllDayAppointments","_this$_dataSource","dataItems","replaceWrongEndDate","_isEndDateWrong","calculatedEndDate","_calculateAppointmentEndDate","setter","filterLoadedVirtualAppointments","groupCount","combinedFilters","itemsToFilter","needPreFilter","minCopy","trimTime","maxCopy","setDate","getDate","hasAllDayAppointments","index","_appointmentHasAllDayDuration","appointmentDurationInHours","_getAppointmentDurationInHours","_appointmentHasShortDayDuration","shortDayDurationInHours","sameDate","currentFilter","bind","setToDayEnd","isNaN","add","rawAppointment","insert","done","update","d","resolve","fail","reject","promise","remove"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointment_model.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport config from \"../../core/config\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport {\r\n    getRecurrenceProcessor\r\n} from \"./recurrence\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isFunction,\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    inArray,\r\n    wrapToArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport query from \"../../data/query\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar DATE_FILTER_POSITION = 0;\r\nvar USER_FILTER_POSITION = 1;\r\nclass FilterMaker {\r\n    constructor(dataAccessors) {\r\n        this._filterRegistry = null;\r\n        this._dataAccessors = dataAccessors\r\n    }\r\n    isRegistered() {\r\n        return !!this._filterRegistry\r\n    }\r\n    clearRegistry() {\r\n        delete this._filterRegistry\r\n    }\r\n    make(type, args) {\r\n        if (!this._filterRegistry) {\r\n            this._filterRegistry = {}\r\n        }\r\n        this._make(type).apply(this, args)\r\n    }\r\n    _make(type) {\r\n        switch (type) {\r\n            case \"date\":\r\n                return (min, max, useAccessors) => {\r\n                    var startDate = useAccessors ? this._dataAccessors.getter.startDate : this._dataAccessors.expr.startDateExpr;\r\n                    var endDate = useAccessors ? this._dataAccessors.getter.endDate : this._dataAccessors.expr.endDateExpr;\r\n                    var recurrenceRule = this._dataAccessors.expr.recurrenceRuleExpr;\r\n                    this._filterRegistry.date = [\r\n                        [\r\n                            [endDate, \">=\", min],\r\n                            [startDate, \"<\", max]\r\n                        ], \"or\", [recurrenceRule, \"startswith\", \"freq\"], \"or\", [\r\n                            [endDate, min],\r\n                            [startDate, min]\r\n                        ]\r\n                    ];\r\n                    if (!recurrenceRule) {\r\n                        this._filterRegistry.date.splice(1, 2)\r\n                    }\r\n                };\r\n            case \"user\":\r\n                return userFilter => {\r\n                    this._filterRegistry.user = userFilter\r\n                }\r\n        }\r\n    }\r\n    combine() {\r\n        var filter = [];\r\n        this._filterRegistry.date && filter.push(this._filterRegistry.date);\r\n        this._filterRegistry.user && filter.push(this._filterRegistry.user);\r\n        return filter\r\n    }\r\n    dateFilter() {\r\n        return this._filterRegistry.date\r\n    }\r\n}\r\nvar compareDateWithStartDayHour = (startDate, endDate, startDayHour, allDay, severalDays) => {\r\n    var startTime = dateUtils.dateTimeFromDecimal(startDayHour);\r\n    var result = startDate.getHours() >= startTime.hours && startDate.getMinutes() >= startTime.minutes || endDate.getHours() === startTime.hours && endDate.getMinutes() > startTime.minutes || endDate.getHours() > startTime.hours || severalDays || allDay;\r\n    return result\r\n};\r\nvar compareDateWithEndDayHour = options => {\r\n    var {\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        startDayHour: startDayHour,\r\n        endDayHour: endDayHour,\r\n        viewStartDayHour: viewStartDayHour,\r\n        viewEndDayHour: viewEndDayHour,\r\n        allDay: allDay,\r\n        severalDays: severalDays,\r\n        min: min,\r\n        max: max,\r\n        checkIntersectViewport: checkIntersectViewport\r\n    } = options;\r\n    var hiddenInterval = (24 - viewEndDayHour + viewStartDayHour) * toMs(\"hour\");\r\n    var apptDuration = endDate.getTime() - startDate.getTime();\r\n    var delta = (hiddenInterval - apptDuration) / toMs(\"hour\");\r\n    var apptStartHour = startDate.getHours();\r\n    var apptStartMinutes = startDate.getMinutes();\r\n    var result;\r\n    var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\r\n    var startTime = dateUtils.dateTimeFromDecimal(startDayHour);\r\n    var apptIntersectViewport = startDate < max && endDate > min;\r\n    result = checkIntersectViewport && apptIntersectViewport || apptStartHour < endTime.hours || apptStartHour === endTime.hours && apptStartMinutes < endTime.minutes || allDay && startDate <= max || severalDays && apptIntersectViewport && (apptStartHour < endTime.hours || 60 * endDate.getHours() + endDate.getMinutes() > 60 * startTime.hours);\r\n    if (apptDuration < hiddenInterval) {\r\n        if (apptStartHour > endTime.hours && apptStartMinutes > endTime.minutes && delta <= apptStartHour - endDayHour) {\r\n            result = false\r\n        }\r\n    }\r\n    return result\r\n};\r\nclass AppointmentModel {\r\n    constructor(dataSource, dataAccessors, baseAppointmentDuration) {\r\n        this.setDataAccessors(dataAccessors);\r\n        this.setDataSource(dataSource);\r\n        this._updatedAppointmentKeys = [];\r\n        this._filterMaker = new FilterMaker(dataAccessors);\r\n        this._baseAppointmentDuration = baseAppointmentDuration\r\n    }\r\n    get keyName() {\r\n        var store = this._dataSource.store();\r\n        return store.key()\r\n    }\r\n    _createFilter(min, max, remoteFiltering, dateSerializationFormat) {\r\n        this._filterMaker.make(\"date\", [min, max]);\r\n        var userFilterPosition = this._excessFiltering() ? this._dataSource.filter()[USER_FILTER_POSITION] : this._dataSource.filter();\r\n        this._filterMaker.make(\"user\", [userFilterPosition]);\r\n        if (remoteFiltering) {\r\n            this._dataSource.filter(this._combineRemoteFilter(dateSerializationFormat))\r\n        }\r\n    }\r\n    _excessFiltering() {\r\n        var dateFilter = this._filterMaker.dateFilter();\r\n        var dataSourceFilter = this._dataSource.filter();\r\n        return dataSourceFilter && (equalByValue(dataSourceFilter, dateFilter) || dataSourceFilter.length && equalByValue(dataSourceFilter[DATE_FILTER_POSITION], dateFilter))\r\n    }\r\n    _combineFilter() {\r\n        return this._filterMaker.combine()\r\n    }\r\n    _getStoreKey(target) {\r\n        var store = this._dataSource.store();\r\n        return store.keyOf(target)\r\n    }\r\n    _filterAppointmentByResources(appointment, resources) {\r\n        var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\r\n            var resourceGetter = this._dataAccessors.getter.resources[resourceName];\r\n            var resource;\r\n            if (isFunction(resourceGetter)) {\r\n                resource = resourceGetter(appointment)\r\n            }\r\n            var appointmentResourceValues = wrapToArray(resource);\r\n            var resourceData = map(resources[resourceIndex].items, item => item.id);\r\n            for (var j = 0; j < appointmentResourceValues.length; j++) {\r\n                if (inArray(appointmentResourceValues[j], resourceData) > -1) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        };\r\n        var result = false;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            var resourceName = resources[i].name;\r\n            result = checkAppointmentResourceValues(resourceName, i);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\r\n        var recurrenceRule = appointment.recurrenceRule;\r\n        var recurrenceException = appointment.recurrenceException;\r\n        var allDay = appointment.allDay;\r\n        var result = true;\r\n        var appointmentStartDate = appointment.startDate;\r\n        var appointmentEndDate = appointment.endDate;\r\n        var recurrenceProcessor = getRecurrenceProcessor();\r\n        if (allDay || this._appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\r\n            var trimmedDates = this._trimDates(min, max);\r\n            min = trimmedDates.min;\r\n            max = new Date(trimmedDates.max.getTime() - toMs(\"minute\"))\r\n        }\r\n        if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = appointmentEndDate > min && appointmentStartDate <= max\r\n        }\r\n        if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = recurrenceProcessor.hasRecurrence({\r\n                rule: recurrenceRule,\r\n                exception: recurrenceException,\r\n                start: appointmentStartDate,\r\n                end: appointmentEndDate,\r\n                min: min,\r\n                max: max,\r\n                firstDayOfWeek: firstDayOfWeek\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _appointmentPartInInterval(startDate, endDate, startDayHour, endDayHour) {\r\n        var apptStartDayHour = startDate.getHours();\r\n        var apptEndDayHour = endDate.getHours();\r\n        return apptStartDayHour <= startDayHour && apptEndDayHour <= endDayHour && apptEndDayHour >= startDayHour || apptEndDayHour >= endDayHour && apptStartDayHour <= endDayHour && apptStartDayHour >= startDayHour\r\n    }\r\n    _createAllDayAppointmentFilter(filterOptions) {\r\n        var {\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour\r\n        } = filterOptions;\r\n        var that = this;\r\n        return [\r\n            [appointment => that.appointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour)]\r\n        ]\r\n    }\r\n    _createCombinedFilter(filterOptions, timeZoneCalculator) {\r\n        var dataAccessors = this._dataAccessors;\r\n        var min = new Date(filterOptions.min);\r\n        var max = new Date(filterOptions.max);\r\n        var getRecurrenceException = filterOptions.recurrenceException;\r\n        var {\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour,\r\n            resources: resources,\r\n            firstDayOfWeek: firstDayOfWeek,\r\n            checkIntersectViewport: checkIntersectViewport\r\n        } = filterOptions;\r\n        var that = this;\r\n        return [\r\n            [appointment => {\r\n                var _appointment$visible;\r\n                var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\r\n                var result = appointmentVisible;\r\n                var startDate = new Date(dataAccessors.getter.startDate(appointment));\r\n                var endDate = new Date(dataAccessors.getter.endDate(appointment));\r\n                var appointmentTakesAllDay = that.appointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour);\r\n                var appointmentTakesSeveralDays = that.appointmentTakesSeveralDays(appointment);\r\n                var isAllDay = dataAccessors.getter.allDay(appointment);\r\n                var appointmentIsLong = appointmentTakesSeveralDays || appointmentTakesAllDay;\r\n                var useRecurrence = isDefined(dataAccessors.getter.recurrenceRule);\r\n                var recurrenceRule;\r\n                if (useRecurrence) {\r\n                    recurrenceRule = dataAccessors.getter.recurrenceRule(appointment)\r\n                }\r\n                if (resources && resources.length) {\r\n                    result = that._filterAppointmentByResources(appointment, resources)\r\n                }\r\n                if (appointmentTakesAllDay && false === filterOptions.allDay) {\r\n                    result = false\r\n                }\r\n                var startDateTimeZone = dataAccessors.getter.startDateTimeZone(appointment);\r\n                var endDateTimeZone = dataAccessors.getter.endDateTimeZone(appointment);\r\n                var comparableStartDate = timeZoneCalculator.createDate(startDate, {\r\n                    appointmentTimeZone: startDateTimeZone,\r\n                    path: \"toGrid\"\r\n                });\r\n                var comparableEndDate = timeZoneCalculator.createDate(endDate, {\r\n                    appointmentTimeZone: endDateTimeZone,\r\n                    path: \"toGrid\"\r\n                });\r\n                if (result && useRecurrence) {\r\n                    var recurrenceException = getRecurrenceException ? getRecurrenceException(appointment) : dataAccessors.getter.recurrenceException(appointment);\r\n                    result = that._filterAppointmentByRRule({\r\n                        startDate: comparableStartDate,\r\n                        endDate: comparableEndDate,\r\n                        recurrenceRule: recurrenceRule,\r\n                        recurrenceException: recurrenceException,\r\n                        allDay: appointmentTakesAllDay\r\n                    }, min, max, startDayHour, endDayHour, firstDayOfWeek)\r\n                }\r\n                if (result && comparableEndDate < min && appointmentIsLong && !isAllDay && (!useRecurrence || useRecurrence && !recurrenceRule)) {\r\n                    result = false\r\n                }\r\n                if (result && isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\r\n                    result = compareDateWithStartDayHour(comparableStartDate, comparableEndDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)\r\n                }\r\n                if (result && isDefined(endDayHour)) {\r\n                    result = compareDateWithEndDayHour({\r\n                        startDate: comparableStartDate,\r\n                        endDate: comparableEndDate,\r\n                        startDayHour: startDayHour,\r\n                        endDayHour: endDayHour,\r\n                        viewStartDayHour: viewStartDayHour,\r\n                        viewEndDayHour: viewEndDayHour,\r\n                        allDay: appointmentTakesAllDay,\r\n                        severalDays: appointmentTakesSeveralDays,\r\n                        min: min,\r\n                        max: max,\r\n                        checkIntersectViewport: checkIntersectViewport\r\n                    })\r\n                }\r\n                if (result && useRecurrence && !recurrenceRule) {\r\n                    if (comparableEndDate < min && !isAllDay) {\r\n                        result = false\r\n                    }\r\n                }\r\n                return result\r\n            }]\r\n        ]\r\n    }\r\n    setDataSource(dataSource) {\r\n        this._dataSource = dataSource;\r\n        this.cleanModelState();\r\n        this._initStoreChangeHandlers();\r\n        this._filterMaker && this._filterMaker.clearRegistry()\r\n    }\r\n    _initStoreChangeHandlers() {\r\n        var dataSource = this._dataSource;\r\n        var store = null === dataSource || void 0 === dataSource ? void 0 : dataSource.store();\r\n        if (store) {\r\n            store.on(\"updating\", newItem => {\r\n                this._updatedAppointment = newItem\r\n            });\r\n            store.on(\"push\", pushItems => {\r\n                var items = dataSource.items();\r\n                var keyName = store.key();\r\n                pushItems.forEach(pushItem => {\r\n                    var itemExists = 0 !== items.filter(item => item[keyName] === pushItem.key).length;\r\n                    if (itemExists) {\r\n                        this._updatedAppointmentKeys.push({\r\n                            key: keyName,\r\n                            value: pushItem.key\r\n                        })\r\n                    } else {\r\n                        var {\r\n                            data: data\r\n                        } = pushItem;\r\n                        data && items.push(data)\r\n                    }\r\n                });\r\n                dataSource.load()\r\n            })\r\n        }\r\n    }\r\n    getUpdatedAppointment() {\r\n        return this._updatedAppointment\r\n    }\r\n    getUpdatedAppointmentKeys() {\r\n        return this._updatedAppointmentKeys\r\n    }\r\n    cleanModelState() {\r\n        this._updatedAppointment = null;\r\n        this._updatedAppointmentKeys = []\r\n    }\r\n    setDataAccessors(dataAccessors) {\r\n        this._dataAccessors = dataAccessors;\r\n        this._filterMaker = new FilterMaker(dataAccessors)\r\n    }\r\n    filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\r\n        if (!this._dataSource) {\r\n            return\r\n        }\r\n        var trimmedDates = this._trimDates(min, max);\r\n        if (!this._filterMaker.isRegistered()) {\r\n            this._createFilter(trimmedDates.min, trimmedDates.max, remoteFiltering, dateSerializationFormat)\r\n        } else {\r\n            var _this$_dataSource$fil;\r\n            this._filterMaker.make(\"date\", [trimmedDates.min, trimmedDates.max]);\r\n            if ((null === (_this$_dataSource$fil = this._dataSource.filter()) || void 0 === _this$_dataSource$fil ? void 0 : _this$_dataSource$fil.length) > 1) {\r\n                var userFilter = this._serializeRemoteFilter([this._dataSource.filter()[1]], dateSerializationFormat);\r\n                this._filterMaker.make(\"user\", userFilter)\r\n            }\r\n            if (remoteFiltering) {\r\n                this._dataSource.filter(this._combineRemoteFilter(dateSerializationFormat))\r\n            }\r\n        }\r\n    }\r\n    _combineRemoteFilter(dateSerializationFormat) {\r\n        var combinedFilter = this._filterMaker.combine();\r\n        return this._serializeRemoteFilter(combinedFilter, dateSerializationFormat)\r\n    }\r\n    _serializeRemoteFilter(filter, dateSerializationFormat) {\r\n        if (!Array.isArray(filter)) {\r\n            return filter\r\n        }\r\n        filter = extend([], filter);\r\n        var startDate = this._dataAccessors.expr.startDateExpr;\r\n        var endDate = this._dataAccessors.expr.endDateExpr;\r\n        if (isString(filter[0])) {\r\n            if (config().forceIsoDateParsing && filter.length > 1) {\r\n                if (filter[0] === startDate || filter[0] === endDate) {\r\n                    filter[filter.length - 1] = dateSerialization.serializeDate(new Date(filter[filter.length - 1]), dateSerializationFormat)\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < filter.length; i++) {\r\n            filter[i] = this._serializeRemoteFilter(filter[i], dateSerializationFormat)\r\n        }\r\n        return filter\r\n    }\r\n    _createAppointmentFilter(filterOptions, timeZoneCalculator) {\r\n        var combinedFilter = this._createCombinedFilter(filterOptions, timeZoneCalculator);\r\n        if (this._filterMaker.isRegistered()) {\r\n            this._filterMaker.make(\"user\", void 0);\r\n            var trimmedDates = this._trimDates(filterOptions.min, filterOptions.max);\r\n            this._filterMaker.make(\"date\", [trimmedDates.min, trimmedDates.max, true]);\r\n            var dateFilter = this.customizeDateFilter(this._filterMaker.combine(), timeZoneCalculator);\r\n            combinedFilter.push([dateFilter])\r\n        }\r\n        return combinedFilter\r\n    }\r\n    filterLoadedAppointments(filterOption, timeZoneCalculator) {\r\n        var combinedFilter = this._createAppointmentFilter(filterOption, timeZoneCalculator);\r\n        return query(this.getPreparedDataItems()).filter(combinedFilter).toArray()\r\n    }\r\n    filterAllDayAppointments(filterOption) {\r\n        var combinedFilter = this._createAllDayAppointmentFilter(filterOption);\r\n        return query(this.getPreparedDataItems()).filter(combinedFilter).toArray()\r\n    }\r\n    getPreparedDataItems() {\r\n        var _this$_dataSource;\r\n        var dataItems = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.items();\r\n        if (!dataItems) {\r\n            return []\r\n        }\r\n        return map(dataItems, item => {\r\n            var startDate = new Date(this._dataAccessors.getter.startDate(item));\r\n            var endDate = new Date(this._dataAccessors.getter.endDate(item));\r\n            this.replaceWrongEndDate(item, startDate, endDate);\r\n            return item\r\n        })\r\n    }\r\n    replaceWrongEndDate(appointment, startDate, endDate) {\r\n        if (this._isEndDateWrong(startDate, endDate)) {\r\n            var isAllDay = this._dataAccessors.getter.allDay(appointment);\r\n            var calculatedEndDate = this._calculateAppointmentEndDate(isAllDay, startDate);\r\n            this._dataAccessors.setter.endDate(appointment, calculatedEndDate)\r\n        }\r\n    }\r\n    filterLoadedVirtualAppointments(filterOptions, timeZoneCalculator, groupCount) {\r\n        var combinedFilters = [];\r\n        var itemsToFilter = this.getPreparedDataItems();\r\n        var needPreFilter = groupCount > 0;\r\n        if (needPreFilter) {\r\n            itemsToFilter = itemsToFilter.filter(item => {\r\n                for (var i = 0; i < filterOptions.length; ++i) {\r\n                    var {\r\n                        resources: resources\r\n                    } = filterOptions[i];\r\n                    if (this._filterAppointmentByResources(item, resources)) {\r\n                        return true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        filterOptions.forEach(filterOption => {\r\n            combinedFilters.length && combinedFilters.push(\"or\");\r\n            var filter = this._createAppointmentFilter(filterOption, timeZoneCalculator);\r\n            combinedFilters.push(filter)\r\n        });\r\n        return query(itemsToFilter).filter(combinedFilters).toArray()\r\n    }\r\n    _trimDates(min, max) {\r\n        var minCopy = dateUtils.trimTime(new Date(min));\r\n        var maxCopy = dateUtils.trimTime(new Date(max));\r\n        maxCopy.setDate(maxCopy.getDate() + 1);\r\n        return {\r\n            min: minCopy,\r\n            max: maxCopy\r\n        }\r\n    }\r\n    hasAllDayAppointments(items, startDayHour, endDayHour) {\r\n        if (!items) {\r\n            return false\r\n        }\r\n        var that = this;\r\n        var result = false;\r\n        each(items, (index, item) => {\r\n            if (that.appointmentTakesAllDay(item, startDayHour, endDayHour)) {\r\n                result = true;\r\n                return false\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    appointmentTakesAllDay(appointment, startDayHour, endDayHour) {\r\n        var dataAccessors = this._dataAccessors;\r\n        var startDate = dataAccessors.getter.startDate(appointment);\r\n        var endDate = dataAccessors.getter.endDate(appointment);\r\n        var allDay = dataAccessors.getter.allDay(appointment);\r\n        return allDay || this._appointmentHasAllDayDuration(startDate, endDate, startDayHour, endDayHour)\r\n    }\r\n    _appointmentHasAllDayDuration(startDate, endDate, startDayHour, endDayHour) {\r\n        startDate = new Date(startDate);\r\n        endDate = new Date(endDate);\r\n        var appointmentDurationInHours = this._getAppointmentDurationInHours(startDate, endDate);\r\n        return appointmentDurationInHours >= 24 || this._appointmentHasShortDayDuration(startDate, endDate, startDayHour, endDayHour)\r\n    }\r\n    _appointmentHasShortDayDuration(startDate, endDate, startDayHour, endDayHour) {\r\n        var appointmentDurationInHours = this._getAppointmentDurationInHours(startDate, endDate);\r\n        var shortDayDurationInHours = endDayHour - startDayHour;\r\n        return appointmentDurationInHours >= shortDayDurationInHours && startDate.getHours() === startDayHour && endDate.getHours() === endDayHour\r\n    }\r\n    _getAppointmentDurationInHours(startDate, endDate) {\r\n        return (endDate.getTime() - startDate.getTime()) / toMs(\"hour\")\r\n    }\r\n    appointmentTakesSeveralDays(appointment) {\r\n        var dataAccessors = this._dataAccessors;\r\n        var startDate = new Date(dataAccessors.getter.startDate(appointment));\r\n        var endDate = new Date(dataAccessors.getter.endDate(appointment));\r\n        return !dateUtils.sameDate(startDate, endDate)\r\n    }\r\n    customizeDateFilter(dateFilter, timeZoneCalculator) {\r\n        var currentFilter = extend(true, [], dateFilter);\r\n        return (appointment => {\r\n            var startDate = new Date(this._dataAccessors.getter.startDate(appointment));\r\n            var endDate = new Date(this._dataAccessors.getter.endDate(appointment));\r\n            appointment = extend(true, {}, appointment);\r\n            var startDateTimeZone = this._dataAccessors.getter.startDateTimeZone(appointment);\r\n            var endDateTimeZone = this._dataAccessors.getter.endDateTimeZone(appointment);\r\n            var comparableStartDate = timeZoneCalculator.createDate(startDate, {\r\n                appointmentTimeZone: startDateTimeZone,\r\n                path: \"toGrid\"\r\n            });\r\n            var comparableEndDate = timeZoneCalculator.createDate(endDate, {\r\n                appointmentTimeZone: endDateTimeZone,\r\n                path: \"toGrid\"\r\n            });\r\n            this._dataAccessors.setter.startDate(appointment, comparableStartDate);\r\n            this._dataAccessors.setter.endDate(appointment, comparableEndDate);\r\n            return query([appointment]).filter(currentFilter).toArray().length > 0\r\n        }).bind(this)\r\n    }\r\n    _calculateAppointmentEndDate(isAllDay, startDate) {\r\n        if (isAllDay) {\r\n            return dateUtils.setToDayEnd(new Date(startDate))\r\n        }\r\n        return new Date(startDate.getTime() + this._baseAppointmentDuration * toMs(\"minute\"))\r\n    }\r\n    _isEndDateWrong(startDate, endDate) {\r\n        return !endDate || isNaN(endDate.getTime()) || startDate.getTime() > endDate.getTime()\r\n    }\r\n    add(rawAppointment) {\r\n        return this._dataSource.store().insert(rawAppointment).done(() => this._dataSource.load())\r\n    }\r\n    update(target, data) {\r\n        var key = this._getStoreKey(target);\r\n        var d = new Deferred;\r\n        this._dataSource.store().update(key, data).done(result => this._dataSource.load().done(() => d.resolve(result)).fail(d.reject)).fail(d.reject);\r\n        return d.promise()\r\n    }\r\n    remove(rawAppointment) {\r\n        var key = this._getStoreKey(rawAppointment);\r\n        return this._dataSource.store().remove(key).done(() => this._dataSource.load())\r\n    }\r\n}\r\nexport default AppointmentModel;\r\n"]},"metadata":{},"sourceType":"module"}