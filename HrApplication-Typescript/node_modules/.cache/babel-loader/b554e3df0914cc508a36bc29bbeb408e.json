{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { noop } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getPublicElement } from \"../../../core/element\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport WorkSpace from \"./ui.scheduler.work_space\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateLocalization from \"../../../localization/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar AGENDA_GROUPED_ATTR = \"dx-group-column-count\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\n\nclass SchedulerAgenda extends WorkSpace {\n  get renderingStrategy() {\n    return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance();\n  }\n\n  _init() {\n    super._init();\n\n    this._activeStateUnit = void 0;\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      agendaDuration: 7,\n      rowHeight: 60,\n      noDataText: \"\"\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"agendaDuration\":\n        break;\n\n      case \"noDataText\":\n      case \"rowHeight\":\n        this._recalculateAgenda(this._rows);\n\n        break;\n\n      case \"groups\":\n        if (!value || !value.length) {\n          if (this._$groupTable) {\n            this._$groupTable.remove();\n\n            this._$groupTable = null;\n\n            this._detachGroupCountAttr();\n          }\n        } else if (!this._$groupTable) {\n          this._initGroupTable();\n\n          this._dateTableScrollable.$content().prepend(this._$groupTable);\n        }\n\n        super._optionChanged(args);\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _renderFocusState() {\n    return noop();\n  }\n\n  _renderFocusTarget() {\n    return noop();\n  }\n\n  _cleanFocusState() {\n    return noop();\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  _isVerticalGroupedWorkSpace() {\n    return false;\n  }\n\n  _getElementClass() {\n    return AGENDA_CLASS;\n  }\n\n  _setFirstViewDate() {\n    this._firstViewDate = new Date(this.option(\"currentDate\"));\n\n    this._setStartDayHour(this._firstViewDate);\n  }\n\n  _getRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n\n  _getCellCount() {\n    return 1;\n  }\n\n  _getTimePanelRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n\n  _getDateByIndex() {\n    return noop();\n  }\n\n  _getFormat() {\n    return \"d ddd\";\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _initWorkSpaceUnits() {\n    this._initGroupTable();\n\n    this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\n    this._$dateTable = $(\"<table>\").addClass(this._getDateTableClass());\n  }\n\n  _initGroupTable() {\n    var groups = this.option(\"groups\");\n\n    if (groups && groups.length) {\n      this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n    }\n  }\n\n  _renderView() {\n    this._setFirstViewDate();\n\n    this._rows = [];\n  }\n\n  _recalculateAgenda(rows) {\n    var cellTemplates = [];\n\n    this._cleanView();\n\n    if (this._rowsIsEmpty(rows)) {\n      this._renderNoData();\n\n      return;\n    }\n\n    this._rows = rows;\n\n    if (this._$groupTable) {\n      cellTemplates = this._renderGroupHeader();\n\n      this._setGroupHeaderCellsHeight();\n    }\n\n    this._renderTimePanel();\n\n    this._renderDateTable();\n\n    this.invoke(\"onAgendaReady\", rows);\n\n    this._applyCellTemplates(cellTemplates);\n\n    this._dateTableScrollable.update();\n  }\n\n  _renderNoData() {\n    this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n\n    this._dateTableScrollable.$content().append(this._$noDataContainer);\n  }\n\n  _setTableSizes() {\n    return noop();\n  }\n\n  _toggleHorizontalScrollClass() {\n    return noop();\n  }\n\n  _createCrossScrollingConfig() {\n    return noop();\n  }\n\n  _setGroupHeaderCellsHeight() {\n    var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n      return !element.getAttribute(\"rowSpan\");\n    });\n\n    var rows = this._removeEmptyRows(this._rows);\n\n    if (!rows.length) {\n      return;\n    }\n\n    for (var i = 0; i < $cells.length; i++) {\n      var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n      $cellContent.outerHeight(this._getGroupRowHeight(rows[i]));\n    }\n  }\n\n  _rowsIsEmpty(rows) {\n    var result = true;\n\n    for (var i = 0; i < rows.length; i++) {\n      var groupRow = rows[i];\n\n      for (var j = 0; j < groupRow.length; j++) {\n        if (groupRow[j]) {\n          result = false;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _detachGroupCountAttr() {\n    this.$element().removeAttr(AGENDA_GROUPED_ATTR);\n  }\n\n  _attachGroupCountAttr() {\n    this.$element().attr(AGENDA_GROUPED_ATTR, this.option(\"groups\").length);\n  }\n\n  _removeEmptyRows(rows) {\n    var result = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].length && !(data = rows[i], !data.some(function (value) {\n        return value > 0;\n      }))) {\n        result.push(rows[i]);\n      }\n    }\n\n    var data;\n    return result;\n  }\n\n  _getGroupHeaderContainer() {\n    return this._$groupTable;\n  }\n\n  _makeGroupRows() {\n    var tree = this.invoke(\"createReducedResourcesTree\");\n    var cellTemplate = this.option(\"resourceCellTemplate\");\n\n    var getGroupHeaderContentClass = this._getGroupHeaderContentClass();\n\n    var cellTemplates = [];\n    var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n      cellTag: \"th\",\n      groupTableClass: GROUP_TABLE_CLASS,\n      groupRowClass: this._getGroupRowClass(),\n      groupCellClass: this._getGroupHeaderClass(),\n\n      groupCellCustomContent(cell, cellText, index, data) {\n        var container = domAdapter.createElement(\"div\");\n        var contentWrapper = domAdapter.createElement(\"div\");\n        container.className = getGroupHeaderContentClass;\n        contentWrapper.appendChild(cellText);\n        container.appendChild(contentWrapper);\n        container.className = getGroupHeaderContentClass;\n\n        if (cellTemplate && cellTemplate.render) {\n          cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n            model: {\n              data: data.data,\n              id: data.value,\n              color: data.color,\n              text: cellText.textContent\n            },\n            container: getPublicElement($(container)),\n            index: index\n          }));\n        } else {\n          contentWrapper.appendChild(cellText);\n          container.appendChild(contentWrapper);\n        }\n\n        cell.appendChild(container);\n      },\n\n      cellTemplate: cellTemplate\n    });\n    return {\n      elements: $(table).find(\".\" + this._getGroupRowClass()),\n      cellTemplates: cellTemplates\n    };\n  }\n\n  _cleanView() {\n    this._$dateTable.empty();\n\n    this._$timePanel.empty();\n\n    if (this._$groupTable) {\n      this._$groupTable.empty();\n    }\n\n    if (this._$noDataContainer) {\n      this._$noDataContainer.empty();\n\n      this._$noDataContainer.remove();\n\n      delete this._$noDataContainer;\n    }\n  }\n\n  _createWorkSpaceElements() {\n    this._createWorkSpaceStaticElements();\n  }\n\n  _createWorkSpaceStaticElements() {\n    if (this._$groupTable) {\n      this._dateTableScrollable.$content().prepend(this._$groupTable);\n    }\n\n    this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\n\n    this.$element().append(this._dateTableScrollable.$element());\n  }\n\n  _renderDateTable() {\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowClass: this._getDateTableRowClass(),\n      cellClass: this._getDateTableCellClass()\n    });\n  }\n\n  _attachTablesEvents() {\n    return noop();\n  }\n\n  _attachEvents() {\n    return noop();\n  }\n\n  _cleanCellDataCache() {\n    return noop();\n  }\n\n  isIndicationAvailable() {\n    return false;\n  }\n\n  _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n    var groupsOpt = this.option(\"groups\");\n    var groups = {};\n    var isGroupedView = !!groupsOpt.length;\n    var path = isGroupedView && this._getPathToLeaf(rowIndex) || [];\n    path.forEach(function (resourceValue, resourceIndex) {\n      var resourceName = groupsOpt[resourceIndex].name;\n      groups[resourceName] = resourceValue;\n    });\n    var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\n    return {\n      model: {\n        text: text,\n        date: date,\n        groups: groups,\n        groupIndex: groupIndex\n      },\n      container: getPublicElement($cell),\n      index: rowIndex\n    };\n  }\n\n  _renderTableBody(options) {\n    var cellTemplates = [];\n    var cellTemplateOpt = options.cellTemplate;\n    this._$rows = [];\n    var i;\n\n    var fillTableBody = function (rowIndex, rowSize) {\n      if (rowSize) {\n        var date;\n        var cellDateNumber;\n        var cellDayName;\n        var $row = $(\"<tr>\");\n        var $td = $(\"<td>\").height(this._getRowHeight(rowSize));\n\n        if (options.getStartDate) {\n          date = options.getStartDate && options.getStartDate(rowIndex);\n          cellDateNumber = dateLocalization.format(date, \"d\");\n          cellDayName = dateLocalization.format(date, this._formatWeekday);\n        }\n\n        if (cellTemplateOpt && cellTemplateOpt.render) {\n          var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n\n          cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n        } else if (cellDateNumber && cellDayName) {\n          $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n        }\n\n        if (options.rowClass) {\n          $row.addClass(options.rowClass);\n        }\n\n        if (options.cellClass) {\n          $td.addClass(options.cellClass);\n        }\n\n        $row.append($td);\n\n        this._$rows.push($row);\n      }\n    }.bind(this);\n\n    for (i = 0; i < this._rows.length; i++) {\n      each(this._rows[i], fillTableBody);\n\n      this._setLastRowClass();\n    }\n\n    $(options.container).append($(\"<tbody>\").append(this._$rows));\n\n    this._applyCellTemplates(cellTemplates);\n  }\n\n  _setLastRowClass() {\n    if (this._rows.length > 1 && this._$rows.length) {\n      var $lastRow = this._$rows[this._$rows.length - 1];\n      $lastRow.addClass(LAST_ROW_CLASS);\n    }\n  }\n\n  _renderTimePanel() {\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount(),\n      cellCount: 1,\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellClass: TIME_PANEL_CELL_CLASS,\n      cellTemplate: this.option(\"dateCellTemplate\"),\n      getStartDate: this._getTimePanelStartDate.bind(this)\n    });\n  }\n\n  _getTimePanelStartDate(rowIndex) {\n    var current = new Date(this.option(\"currentDate\"));\n    var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n    return cellDate;\n  }\n\n  _getRowHeight(rowSize) {\n    var baseHeight = this.option(\"rowHeight\");\n    var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n    return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n  }\n\n  _getGroupRowHeight(groupRows) {\n    if (!groupRows) {\n      return;\n    }\n\n    var result = 0;\n\n    for (var i = 0; i < groupRows.length; i++) {\n      result += this._getRowHeight(groupRows[i]);\n    }\n\n    return result;\n  }\n\n  _calculateRows(appointments) {\n    return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"));\n  }\n\n  preRenderAppointments(options) {\n    super.preRenderAppointments(options);\n\n    this._calculateRows(options.appointments);\n  }\n\n  onDataSourceChanged(appointments) {\n    super.onDataSourceChanged();\n\n    this._renderView();\n\n    var rows = this._calculateRows(appointments);\n\n    this._recalculateAgenda(rows);\n  }\n\n  getAgendaVerticalStepHeight() {\n    return this.option(\"rowHeight\");\n  }\n\n  getEndViewDate() {\n    var currentDate = new Date(this.option(\"currentDate\"));\n    var agendaDuration = this.option(\"agendaDuration\");\n    currentDate.setHours(this.option(\"endDayHour\"));\n    var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n    return new Date(result);\n  }\n\n  getEndViewDateByEndDayHour() {\n    return this.getEndViewDate();\n  }\n\n  getCoordinatesByDate() {\n    return {\n      top: 0,\n      left: 0,\n      max: 0,\n      groupIndex: 0\n    };\n  }\n\n  getCellDataByCoordinates() {\n    return {\n      startDate: null,\n      endDate: null\n    };\n  }\n\n  updateScrollPosition(date) {\n    var scheduler = this.option(\"observer\");\n    var newDate = scheduler.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var bounds = this.getVisibleBounds();\n    var startDateHour = newDate.getHours();\n    var startDateMinutes = newDate.getMinutes();\n\n    if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\n      this.scrollToTime(startDateHour, startDateMinutes, newDate);\n    }\n  }\n\n  needUpdateScrollPosition(hours, minutes, bounds) {\n    var isUpdateNeeded = false;\n\n    if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    return isUpdateNeeded;\n  }\n\n}\n\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nexport default SchedulerAgenda;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.agenda.js"],"names":["$","domAdapter","noop","each","getPublicElement","registerComponent","WorkSpace","extend","dateLocalization","tableCreatorModule","tableCreator","AGENDA_CLASS","AGENDA_DATE_CLASS","GROUP_TABLE_CLASS","AGENDA_GROUPED_ATTR","TIME_PANEL_ROW_CLASS","TIME_PANEL_CELL_CLASS","NODATA_CONTAINER_CLASS","LAST_ROW_CLASS","INNER_CELL_MARGIN","OUTER_CELL_MARGIN","SchedulerAgenda","renderingStrategy","invoke","getRenderingStrategyInstance","_init","_activeStateUnit","_getDefaultOptions","agendaDuration","rowHeight","noDataText","_optionChanged","args","name","value","_recalculateAgenda","_rows","length","_$groupTable","remove","_detachGroupCountAttr","_initGroupTable","_dateTableScrollable","$content","prepend","_renderFocusState","_renderFocusTarget","_cleanFocusState","supportAllDayRow","_isVerticalGroupedWorkSpace","_getElementClass","_setFirstViewDate","_firstViewDate","Date","option","_setStartDayHour","_getRowCount","_getCellCount","_getTimePanelRowCount","_getDateByIndex","_getFormat","_renderAllDayPanel","_toggleAllDayVisibility","_initWorkSpaceUnits","_$timePanel","addClass","_getTimePanelClass","_$dateTable","_getDateTableClass","groups","_renderView","rows","cellTemplates","_cleanView","_rowsIsEmpty","_renderNoData","_renderGroupHeader","_setGroupHeaderCellsHeight","_renderTimePanel","_renderDateTable","_applyCellTemplates","update","_$noDataContainer","html","append","_setTableSizes","_toggleHorizontalScrollClass","_createCrossScrollingConfig","$cells","_getGroupHeaderCells","filter","_","element","getAttribute","_removeEmptyRows","i","$cellContent","eq","find","outerHeight","_getGroupRowHeight","result","groupRow","j","$element","removeAttr","_attachGroupCountAttr","attr","data","some","push","_getGroupHeaderContainer","_makeGroupRows","tree","cellTemplate","getGroupHeaderContentClass","_getGroupHeaderContentClass","table","makeGroupedTableFromJSON","VERTICAL","cellTag","groupTableClass","groupRowClass","_getGroupRowClass","groupCellClass","_getGroupHeaderClass","groupCellCustomContent","cell","cellText","index","container","createElement","contentWrapper","className","appendChild","render","bind","model","id","color","text","textContent","elements","empty","_createWorkSpaceElements","_createWorkSpaceStaticElements","_renderTableBody","rowClass","_getDateTableRowClass","cellClass","_getDateTableCellClass","_attachTablesEvents","_attachEvents","_cleanCellDataCache","isIndicationAvailable","_prepareCellTemplateOptions","date","rowIndex","$cell","groupsOpt","isGroupedView","path","_getPathToLeaf","forEach","resourceValue","resourceIndex","resourceName","groupIndex","_getGroupIndexByResourceId","options","cellTemplateOpt","_$rows","fillTableBody","rowSize","cellDateNumber","cellDayName","$row","$td","height","_getRowHeight","getStartDate","format","_formatWeekday","templateOptions","_setLastRowClass","$lastRow","rowCount","cellCount","_getTimePanelStartDate","current","cellDate","setDate","getDate","baseHeight","innerOffset","groupRows","_calculateRows","appointments","calculateRows","preRenderAppointments","onDataSourceChanged","getAgendaVerticalStepHeight","getEndViewDate","currentDate","setHours","getEndViewDateByEndDayHour","getCoordinatesByDate","top","left","max","getCellDataByCoordinates","startDate","endDate","updateScrollPosition","scheduler","newDate","timeZoneCalculator","createDate","bounds","getVisibleBounds","startDateHour","getHours","startDateMinutes","getMinutes","needUpdateScrollPosition","scrollToTime","hours","minutes","isUpdateNeeded","bottom"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport WorkSpace from \"./ui.scheduler.work_space\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\r\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar AGENDA_GROUPED_ATTR = \"dx-group-column-count\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\r\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\r\nvar INNER_CELL_MARGIN = 5;\r\nvar OUTER_CELL_MARGIN = 20;\r\nclass SchedulerAgenda extends WorkSpace {\r\n    get renderingStrategy() {\r\n        return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance()\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._activeStateUnit = void 0\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            agendaDuration: 7,\r\n            rowHeight: 60,\r\n            noDataText: \"\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        var value = args.value;\r\n        switch (name) {\r\n            case \"agendaDuration\":\r\n                break;\r\n            case \"noDataText\":\r\n            case \"rowHeight\":\r\n                this._recalculateAgenda(this._rows);\r\n                break;\r\n            case \"groups\":\r\n                if (!value || !value.length) {\r\n                    if (this._$groupTable) {\r\n                        this._$groupTable.remove();\r\n                        this._$groupTable = null;\r\n                        this._detachGroupCountAttr()\r\n                    }\r\n                } else if (!this._$groupTable) {\r\n                    this._initGroupTable();\r\n                    this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n                }\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _renderFocusState() {\r\n        return noop()\r\n    }\r\n    _renderFocusTarget() {\r\n        return noop()\r\n    }\r\n    _cleanFocusState() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return false\r\n    }\r\n    _getElementClass() {\r\n        return AGENDA_CLASS\r\n    }\r\n    _setFirstViewDate() {\r\n        this._firstViewDate = new Date(this.option(\"currentDate\"));\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getCellCount() {\r\n        return 1\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getDateByIndex() {\r\n        return noop()\r\n    }\r\n    _getFormat() {\r\n        return \"d ddd\"\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._initGroupTable();\r\n        this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\r\n        this._$dateTable = $(\"<table>\").addClass(this._getDateTableClass())\r\n    }\r\n    _initGroupTable() {\r\n        var groups = this.option(\"groups\");\r\n        if (groups && groups.length) {\r\n            this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS)\r\n        }\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        this._rows = []\r\n    }\r\n    _recalculateAgenda(rows) {\r\n        var cellTemplates = [];\r\n        this._cleanView();\r\n        if (this._rowsIsEmpty(rows)) {\r\n            this._renderNoData();\r\n            return\r\n        }\r\n        this._rows = rows;\r\n        if (this._$groupTable) {\r\n            cellTemplates = this._renderGroupHeader();\r\n            this._setGroupHeaderCellsHeight()\r\n        }\r\n        this._renderTimePanel();\r\n        this._renderDateTable();\r\n        this.invoke(\"onAgendaReady\", rows);\r\n        this._applyCellTemplates(cellTemplates);\r\n        this._dateTableScrollable.update()\r\n    }\r\n    _renderNoData() {\r\n        this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\r\n        this._dateTableScrollable.$content().append(this._$noDataContainer)\r\n    }\r\n    _setTableSizes() {\r\n        return noop()\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        return noop()\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        return noop()\r\n    }\r\n    _setGroupHeaderCellsHeight() {\r\n        var $cells = this._getGroupHeaderCells().filter((function(_, element) {\r\n            return !element.getAttribute(\"rowSpan\")\r\n        }));\r\n        var rows = this._removeEmptyRows(this._rows);\r\n        if (!rows.length) {\r\n            return\r\n        }\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\r\n            $cellContent.outerHeight(this._getGroupRowHeight(rows[i]))\r\n        }\r\n    }\r\n    _rowsIsEmpty(rows) {\r\n        var result = true;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var groupRow = rows[i];\r\n            for (var j = 0; j < groupRow.length; j++) {\r\n                if (groupRow[j]) {\r\n                    result = false;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _detachGroupCountAttr() {\r\n        this.$element().removeAttr(AGENDA_GROUPED_ATTR)\r\n    }\r\n    _attachGroupCountAttr() {\r\n        this.$element().attr(AGENDA_GROUPED_ATTR, this.option(\"groups\").length)\r\n    }\r\n    _removeEmptyRows(rows) {\r\n        var result = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n            if (rows[i].length && !(data = rows[i], !data.some((function(value) {\r\n                    return value > 0\r\n                })))) {\r\n                result.push(rows[i])\r\n            }\r\n        }\r\n        var data;\r\n        return result\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        return this._$groupTable\r\n    }\r\n    _makeGroupRows() {\r\n        var tree = this.invoke(\"createReducedResourcesTree\");\r\n        var cellTemplate = this.option(\"resourceCellTemplate\");\r\n        var getGroupHeaderContentClass = this._getGroupHeaderContentClass();\r\n        var cellTemplates = [];\r\n        var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\r\n            cellTag: \"th\",\r\n            groupTableClass: GROUP_TABLE_CLASS,\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupCellClass: this._getGroupHeaderClass(),\r\n            groupCellCustomContent(cell, cellText, index, data) {\r\n                var container = domAdapter.createElement(\"div\");\r\n                var contentWrapper = domAdapter.createElement(\"div\");\r\n                container.className = getGroupHeaderContentClass;\r\n                contentWrapper.appendChild(cellText);\r\n                container.appendChild(contentWrapper);\r\n                container.className = getGroupHeaderContentClass;\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\r\n                        model: {\r\n                            data: data.data,\r\n                            id: data.value,\r\n                            color: data.color,\r\n                            text: cellText.textContent\r\n                        },\r\n                        container: getPublicElement($(container)),\r\n                        index: index\r\n                    }))\r\n                } else {\r\n                    contentWrapper.appendChild(cellText);\r\n                    container.appendChild(contentWrapper)\r\n                }\r\n                cell.appendChild(container)\r\n            },\r\n            cellTemplate: cellTemplate\r\n        });\r\n        return {\r\n            elements: $(table).find(\".\" + this._getGroupRowClass()),\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _cleanView() {\r\n        this._$dateTable.empty();\r\n        this._$timePanel.empty();\r\n        if (this._$groupTable) {\r\n            this._$groupTable.empty()\r\n        }\r\n        if (this._$noDataContainer) {\r\n            this._$noDataContainer.empty();\r\n            this._$noDataContainer.remove();\r\n            delete this._$noDataContainer\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceStaticElements()\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        if (this._$groupTable) {\r\n            this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n        }\r\n        this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\r\n        this.$element().append(this._dateTableScrollable.$element())\r\n    }\r\n    _renderDateTable() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowClass: this._getDateTableRowClass(),\r\n            cellClass: this._getDateTableCellClass()\r\n        })\r\n    }\r\n    _attachTablesEvents() {\r\n        return noop()\r\n    }\r\n    _attachEvents() {\r\n        return noop()\r\n    }\r\n    _cleanCellDataCache() {\r\n        return noop()\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\r\n        var groupsOpt = this.option(\"groups\");\r\n        var groups = {};\r\n        var isGroupedView = !!groupsOpt.length;\r\n        var path = isGroupedView && this._getPathToLeaf(rowIndex) || [];\r\n        path.forEach((function(resourceValue, resourceIndex) {\r\n            var resourceName = groupsOpt[resourceIndex].name;\r\n            groups[resourceName] = resourceValue\r\n        }));\r\n        var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\r\n        return {\r\n            model: {\r\n                text: text,\r\n                date: date,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: rowIndex\r\n        }\r\n    }\r\n    _renderTableBody(options) {\r\n        var cellTemplates = [];\r\n        var cellTemplateOpt = options.cellTemplate;\r\n        this._$rows = [];\r\n        var i;\r\n        var fillTableBody = function(rowIndex, rowSize) {\r\n            if (rowSize) {\r\n                var date;\r\n                var cellDateNumber;\r\n                var cellDayName;\r\n                var $row = $(\"<tr>\");\r\n                var $td = $(\"<td>\").height(this._getRowHeight(rowSize));\r\n                if (options.getStartDate) {\r\n                    date = options.getStartDate && options.getStartDate(rowIndex);\r\n                    cellDateNumber = dateLocalization.format(date, \"d\");\r\n                    cellDayName = dateLocalization.format(date, this._formatWeekday)\r\n                }\r\n                if (cellTemplateOpt && cellTemplateOpt.render) {\r\n                    var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\r\n                    cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions))\r\n                } else if (cellDateNumber && cellDayName) {\r\n                    $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName)\r\n                }\r\n                if (options.rowClass) {\r\n                    $row.addClass(options.rowClass)\r\n                }\r\n                if (options.cellClass) {\r\n                    $td.addClass(options.cellClass)\r\n                }\r\n                $row.append($td);\r\n                this._$rows.push($row)\r\n            }\r\n        }.bind(this);\r\n        for (i = 0; i < this._rows.length; i++) {\r\n            each(this._rows[i], fillTableBody);\r\n            this._setLastRowClass()\r\n        }\r\n        $(options.container).append($(\"<tbody>\").append(this._$rows));\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _setLastRowClass() {\r\n        if (this._rows.length > 1 && this._$rows.length) {\r\n            var $lastRow = this._$rows[this._$rows.length - 1];\r\n            $lastRow.addClass(LAST_ROW_CLASS)\r\n        }\r\n    }\r\n    _renderTimePanel() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount(),\r\n            cellCount: 1,\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellClass: TIME_PANEL_CELL_CLASS,\r\n            cellTemplate: this.option(\"dateCellTemplate\"),\r\n            getStartDate: this._getTimePanelStartDate.bind(this)\r\n        })\r\n    }\r\n    _getTimePanelStartDate(rowIndex) {\r\n        var current = new Date(this.option(\"currentDate\"));\r\n        var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\r\n        return cellDate\r\n    }\r\n    _getRowHeight(rowSize) {\r\n        var baseHeight = this.option(\"rowHeight\");\r\n        var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\r\n        return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0\r\n    }\r\n    _getGroupRowHeight(groupRows) {\r\n        if (!groupRows) {\r\n            return\r\n        }\r\n        var result = 0;\r\n        for (var i = 0; i < groupRows.length; i++) {\r\n            result += this._getRowHeight(groupRows[i])\r\n        }\r\n        return result\r\n    }\r\n    _calculateRows(appointments) {\r\n        return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"))\r\n    }\r\n    preRenderAppointments(options) {\r\n        super.preRenderAppointments(options);\r\n        this._calculateRows(options.appointments)\r\n    }\r\n    onDataSourceChanged(appointments) {\r\n        super.onDataSourceChanged();\r\n        this._renderView();\r\n        var rows = this._calculateRows(appointments);\r\n        this._recalculateAgenda(rows)\r\n    }\r\n    getAgendaVerticalStepHeight() {\r\n        return this.option(\"rowHeight\")\r\n    }\r\n    getEndViewDate() {\r\n        var currentDate = new Date(this.option(\"currentDate\"));\r\n        var agendaDuration = this.option(\"agendaDuration\");\r\n        currentDate.setHours(this.option(\"endDayHour\"));\r\n        var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\r\n        return new Date(result)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.getEndViewDate()\r\n    }\r\n    getCoordinatesByDate() {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            max: 0,\r\n            groupIndex: 0\r\n        }\r\n    }\r\n    getCellDataByCoordinates() {\r\n        return {\r\n            startDate: null,\r\n            endDate: null\r\n        }\r\n    }\r\n    updateScrollPosition(date) {\r\n        var scheduler = this.option(\"observer\");\r\n        var newDate = scheduler.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var bounds = this.getVisibleBounds();\r\n        var startDateHour = newDate.getHours();\r\n        var startDateMinutes = newDate.getMinutes();\r\n        if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\r\n            this.scrollToTime(startDateHour, startDateMinutes, newDate)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(hours, minutes, bounds) {\r\n        var isUpdateNeeded = false;\r\n        if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\r\nexport default SchedulerAgenda;\r\n"]},"metadata":{},"sourceType":"module"}