{"ast":null,"code":"var _jsxFileName = \"/home/igor/welcomedev-react-starter/src/components/GoogleCalendar.tsx\",\n    _s = $RefreshSig$();\n\n//---------------------------------------------\n// import 'whatwg-fetch';\n// import React from 'react';\n// import Scheduler from 'devextreme-react/scheduler';\n// import CustomStore from 'devextreme/data/custom_store';\n// function getData(_:any, requestOptions:any) {\n//   const PUBLIC_KEY = 'AIzaSyBnNAISIUKe6xdhq1_rjor2rxoI3UlMY7k',\n//     CALENDAR_ID = 'f7jnetm22dsjc3npc2lu3buvu4@group.calendar.google.com';\n//   const dataUrl = [ 'https://www.googleapis.com/calendar/v3/calendars/',\n//     CALENDAR_ID, '/events?key=', PUBLIC_KEY].join('');\n//   return fetch(dataUrl, requestOptions).then(\n//     (response) => response.json()\n//   ).then((data) => data.items);\n// }\n// const dataSource = new CustomStore({\n//   load: (options) => getData(options, { showDeleted: false })\n// });\n// const currentDate = new Date();\n// const views:any = ['day', 'workWeek', 'month'];\n// class GoogleCalendar extends React.Component {\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"long-title\">\n//           <h3>QCerris</h3>\n//         </div>\n//         <Scheduler\n//           dataSource={dataSource}\n//           views={views}\n//           defaultCurrentView=\"workWeek\"\n//           defaultCurrentDate={currentDate}\n//           height={500}\n//           startDayHour={7}\n//           editing={false}\n//           showAllDayPanel={false}\n//           startDateExpr=\"start.dateTime\"\n//           endDateExpr=\"end.dateTime\"\n//           textExpr=\"summary\"\n//           timeZone=\"Europe/Belgrade\" />\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default GoogleCalendar;\n// import * as React from 'react';\n// import Button from '@mui/material/Button';\n// import { DatePicker, MuiPickersUtilsProvider,} from '@material-ui/pickers';\n// import DateFnsUtils from '@date-io/date-fns';\n// export default function CustomInput() {\n//     const [selectedDate, handleDateChange] = React.useState<Date | null | number|any>(new Date());\n//     const [selectedDate1, handleDateChange1] = React.useState<Date | null | number|any>(new Date());\n//     // const [value1, setValue1] = React.useState<Date | null | number|any>(new Date());\n//     function getDifferenceInDays(date1: number | Date | any, date2: number | Date | any) {\n//         const diffInMs = Math.abs(date2 - date1);\n//         return diffInMs / (1000 * 60 * 60 * 24);\n//     }\n//     return (\n//         <div>\n//             <div>\n//                 <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                     <DatePicker value={selectedDate} onChange={handleDateChange} />\n//                     <DatePicker value={selectedDate1} onChange={handleDateChange1} />\n//                 </MuiPickersUtilsProvider>\n//             </div>\n//             <br/>\n//             <div>\n//                 {getDifferenceInDays(selectedDate.getTime(),selectedDate1.getTime()) ?  \n//                     <Button variant=\"contained\" color=\"success\" > Submit </Button> \n//                     : \n//                     <Button variant=\"contained\" color=\"error\"> Error </Button>\n//                 }\n//             </div>\n//             <div>\n//             </div>\n//         </div>\n//     );\n// }\n//------------------------------------------------------------------------------------\nimport React from 'react'; // import './App.css';\n\nimport format from \"date-fns/format\";\nimport getDay from \"date-fns/getDay\";\nimport parse from \"date-fns/parse\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useState } from 'react'; //------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst locales = {\n  \"en-US\": require(\"date-fns/locale/en-US\")\n};\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales\n});\nconst events = [{\n  title: \"Big Meeting\",\n  allDay: true,\n  start: new Date(2021, 10, 0),\n  end: new Date(2021, 10, 0)\n}, {\n  title: \"Vacation\",\n  start: new Date(2021, 11, 7),\n  end: new Date(2021, 11, 10)\n}, {\n  title: \"Conference\",\n  start: new Date(2021, 10, 20),\n  end: new Date(2021, 10, 23)\n}]; //-----------------------------------------------------------------------------\n\nfunction GoogleCalendar() {\n  _s();\n\n  // const startValue: Date = new Date(new Date().getFullYear(), new Date().getMonth(), 14);\n  // const endValue: Date = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 15);\n  // const minDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), 8);\n  // const maxDate: Date = new Date(new Date().getFullYear(), new Date().getMonth()+1, 20);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    start: new Date(),\n    end: new Date()\n  });\n  const [allEvents, setAllEvents] = useState(events);\n\n  function handleEvent() {\n    setAllEvents([...allEvents, newEvent]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add Title\",\n        style: {\n          width: \"20%\",\n          marginRight: \"10px\"\n        },\n        value: newEvent.title,\n        onChange: e => setNewEvent({ ...newEvent,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        placeholderText: \"Start Date\",\n        style: {\n          marginRight: \"10px\"\n        },\n        selected: newEvent.start,\n        onChange: start => setNewEvent({ ...newEvent,\n          start\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        placeholderText: \"End Date\",\n        selected: newEvent.end,\n        onChange: end => setNewEvent({ ...newEvent,\n          end\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: allEvents,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500,\n        margin: \"50px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GoogleCalendar, \"mHHgA+qYU7bWzmqpUCKiY8pYdN0=\");\n\n_c = GoogleCalendar;\nexport default GoogleCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleCalendar\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/components/GoogleCalendar.tsx"],"names":["React","format","getDay","parse","startOfWeek","Calendar","dateFnsLocalizer","DatePicker","useState","locales","require","localizer","events","title","allDay","start","Date","end","GoogleCalendar","newEvent","setNewEvent","allEvents","setAllEvents","handleEvent","width","marginRight","e","target","value","height","margin"],"mappings":"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","sourcesContent":["//---------------------------------------------\n\n// import 'whatwg-fetch';\n// import React from 'react';\n// import Scheduler from 'devextreme-react/scheduler';\n// import CustomStore from 'devextreme/data/custom_store';\n\n// function getData(_:any, requestOptions:any) {\n\n//   const PUBLIC_KEY = 'AIzaSyBnNAISIUKe6xdhq1_rjor2rxoI3UlMY7k',\n//     CALENDAR_ID = 'f7jnetm22dsjc3npc2lu3buvu4@group.calendar.google.com';\n//   const dataUrl = [ 'https://www.googleapis.com/calendar/v3/calendars/',\n//     CALENDAR_ID, '/events?key=', PUBLIC_KEY].join('');\n\n//   return fetch(dataUrl, requestOptions).then(\n//     (response) => response.json()\n//   ).then((data) => data.items);\n// }\n\n// const dataSource = new CustomStore({\n//   load: (options) => getData(options, { showDeleted: false })\n// });\n\n// const currentDate = new Date();\n// const views:any = ['day', 'workWeek', 'month'];\n\n// class GoogleCalendar extends React.Component {\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"long-title\">\n//           <h3>QCerris</h3>\n//         </div>\n//         <Scheduler\n//           dataSource={dataSource}\n//           views={views}\n//           defaultCurrentView=\"workWeek\"\n//           defaultCurrentDate={currentDate}\n//           height={500}\n//           startDayHour={7}\n//           editing={false}\n//           showAllDayPanel={false}\n//           startDateExpr=\"start.dateTime\"\n//           endDateExpr=\"end.dateTime\"\n//           textExpr=\"summary\"\n//           timeZone=\"Europe/Belgrade\" />\n//       </React.Fragment>\n\n//     );\n//   }\n// }\n\n// export default GoogleCalendar;\n\n// import * as React from 'react';\n// import Button from '@mui/material/Button';\n// import { DatePicker, MuiPickersUtilsProvider,} from '@material-ui/pickers';\n// import DateFnsUtils from '@date-io/date-fns';\n\n\n// export default function CustomInput() {\n//     const [selectedDate, handleDateChange] = React.useState<Date | null | number|any>(new Date());\n//     const [selectedDate1, handleDateChange1] = React.useState<Date | null | number|any>(new Date());\n\n//     // const [value1, setValue1] = React.useState<Date | null | number|any>(new Date());\n\n//     function getDifferenceInDays(date1: number | Date | any, date2: number | Date | any) {\n//         const diffInMs = Math.abs(date2 - date1);\n//         return diffInMs / (1000 * 60 * 60 * 24);\n//     }\n\n//     return (\n//         <div>\n//             <div>\n//                 <MuiPickersUtilsProvider utils={DateFnsUtils}>\n//                     <DatePicker value={selectedDate} onChange={handleDateChange} />\n//                     <DatePicker value={selectedDate1} onChange={handleDateChange1} />\n//                 </MuiPickersUtilsProvider>\n//             </div>\n//             <br/>\n//             <div>\n//                 {getDifferenceInDays(selectedDate.getTime(),selectedDate1.getTime()) ?  \n//                     <Button variant=\"contained\" color=\"success\" > Submit </Button> \n//                     : \n//                     <Button variant=\"contained\" color=\"error\"> Error </Button>\n//                 }\n//             </div>\n//             <div>\n              \n//             </div>\n//         </div>\n//     );\n// }\n\n//------------------------------------------------------------------------------------\n\nimport React from 'react';\n// import './App.css';\nimport { DateRangePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport format from \"date-fns/format\";\nimport getDay from \"date-fns/getDay\";\nimport parse from \"date-fns/parse\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useState } from 'react';\n\n//------------------------------------------------------------------\n\ninterface Props{\n    title?:string,\n    start?:Date  | null,\n    end?:Date | null,\n    allDay?: boolean | null\n}\n\nconst locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\"),\n};\n\nconst localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales,\n});\n\nconst events : Props[] = [\n    {\n        title: \"Big Meeting\",\n        allDay: true,\n        start: new Date(2021, 10, 0),\n        end: new Date(2021, 10, 0),\n    },\n    {\n        title: \"Vacation\",\n        start: new Date(2021, 11, 7),\n        end: new Date(2021, 11, 10),\n    },\n    {\n        title: \"Conference\",\n        start: new Date(2021, 10, 20),\n        end: new Date(2021, 10, 23),\n    },\n];\n\n//-----------------------------------------------------------------------------\n\nfunction GoogleCalendar() {\n  \n    // const startValue: Date = new Date(new Date().getFullYear(), new Date().getMonth(), 14);\n    // const endValue: Date = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 15);\n    // const minDate: Date = new Date(new Date().getFullYear(), new Date().getMonth(), 8);\n    // const maxDate: Date = new Date(new Date().getFullYear(), new Date().getMonth()+1, 20);\n  \n    const [newEvent, setNewEvent] = useState({title:\"\", start:new Date(), end: new Date()})\n    const [allEvents, setAllEvents] = useState(events)\n\n    function handleEvent(){\n        setAllEvents([...allEvents, newEvent])\n    }\n\n    return (\n        <div>\n        {/* <DateRangePickerComponent placeholder=\"Enter Date Range\"\n        startDate={startValue}\n        endDate={endValue}\n        min={minDate}\n        max={maxDate}\n        minDays={3}\n        maxDays={5}\n        format=\"dd-MMM-yy\"\n        //Uncomment below code to show month range picker. Also comment the properties min, max, mindays and maxdays\n        // start=\"Year\"\n        // depth=\"Year\"\n        ></DateRangePickerComponent> */}\n        <div>\n            <input type=\"text\" placeholder=\"Add Title\" style={{ width: \"20%\", marginRight: \"10px\" }} value={newEvent.title} onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })} />\n            <DatePicker placeholderText=\"Start Date\" style={{ marginRight: \"10px\" }} selected={newEvent.start} onChange={(start) => setNewEvent({ ...newEvent, start })} />\n            <DatePicker placeholderText=\"End Date\" selected={newEvent.end} onChange={(end) => setNewEvent({ ...newEvent, end })} />\n            <button  onClick={handleEvent}>\n                Add Event\n            </button>\n        </div>\n        <Calendar localizer={localizer} events={allEvents} startAccessor=\"start\" endAccessor=\"end\" style={{height: 500, margin:\"50px\"}} />\n        </div>\n    );\n}\n\nexport default GoogleCalendar;"]},"metadata":{},"sourceType":"module"}