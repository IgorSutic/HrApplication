{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { isDefined } from \"../../../core/utils/type\";\nvar DEFAULT_CELL_HEIGHT = 50;\nvar MIN_CELL_WIDTH = 1;\nvar MIN_SCROLL_OFFSET = 10;\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 30;\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\nvar scrollingOrientations = {\n  vertical: \"vertical\",\n  horizontal: \"horizontal\",\n  both: \"both\"\n};\nvar DefaultScrollingOrientation = scrollingOrientations.both;\nexport default class VirtualScrollingDispatcher {\n  constructor(workspace) {\n    this._workspace = workspace;\n    this._rowHeight = this.getCellHeight();\n    this._cellWidth = this.getCellWidth();\n    this._renderer = new Renderer(this.workspace);\n\n    this._createVirtualScrolling();\n\n    this._attachScrollableEvents();\n  }\n\n  get workspace() {\n    return this._workspace;\n  }\n\n  get isRTL() {\n    return this.workspace._isRTL();\n  }\n\n  get renderer() {\n    return this._renderer;\n  }\n\n  get isVirtualScrolling() {\n    return this.workspace.isVirtualScrolling();\n  }\n\n  get verticalVirtualScrolling() {\n    return this._verticalVirtualScrolling;\n  }\n\n  set verticalVirtualScrolling(value) {\n    this._verticalVirtualScrolling = value;\n  }\n\n  get horizontalVirtualScrolling() {\n    return this._horizontalVirtualScrolling;\n  }\n\n  set horizontalVirtualScrolling(value) {\n    this._horizontalVirtualScrolling = value;\n  }\n\n  get document() {\n    return domAdapter.getDocument();\n  }\n\n  get height() {\n    return this.workspace.invoke(\"getOption\", \"height\");\n  }\n\n  get width() {\n    return this.workspace.invoke(\"getOption\", \"width\");\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  set rowHeight(value) {\n    this._rowHeight = value;\n  }\n\n  get outlineCount() {\n    return this.workspace.option(\"scrolling.outlineCount\");\n  }\n\n  get viewportHeight() {\n    return this.height ? this.workspace.$element().height() : getWindow().innerHeight;\n  }\n\n  get cellWidth() {\n    return this._cellWidth;\n  }\n\n  set cellWidth(value) {\n    this._cellWidth = value;\n  }\n\n  get viewportWidth() {\n    return this.width ? this.workspace.$element().width() : getWindow().innerWidth;\n  }\n\n  get cellCountInsideTopVirtualRow() {\n    var _this$verticalScrolli;\n\n    return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0;\n  }\n\n  get cellCountInsideLeftVirtualCell() {\n    var _this$horizontalScrol;\n\n    return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0;\n  }\n\n  get cellCountInsideRightVirtualCell() {\n    var _this$horizontalScrol2;\n\n    return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0;\n  }\n\n  get topVirtualRowsCount() {\n    return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0;\n  }\n\n  get leftVirtualCellsCount() {\n    var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\n    return virtualItemsCount > 0 ? 1 : 0;\n  }\n\n  get virtualRowOffset() {\n    var _this$verticalScrolli2;\n\n    return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0;\n  }\n\n  get virtualCellOffset() {\n    var _this$horizontalScrol3;\n\n    return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0;\n  }\n\n  get scrollingState() {\n    var _this$verticalVirtual, _this$horizontalVirtu;\n\n    return {\n      vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\n      horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\n    };\n  }\n\n  get verticalScrollingState() {\n    return this.scrollingState.vertical;\n  }\n\n  get horizontalScrollingState() {\n    return this.scrollingState.horizontal;\n  }\n\n  get scrollingOrientation() {\n    return this.workspace.option(\"scrolling.orientation\") || DefaultScrollingOrientation;\n  }\n\n  get verticalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both;\n  }\n\n  get horizontalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both;\n  }\n\n  getRenderState() {\n    var _this$verticalVirtual2, _this$horizontalVirtu2;\n\n    var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\n    var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\n    return _extends({}, verticalRenderState, horizontalRenderState);\n  }\n\n  getCellHeight() {\n    var cellHeight = this.workspace.getCellHeight(false);\n    var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\n    return Math.floor(result);\n  }\n\n  getCellWidth() {\n    var cellWidth = this.workspace.getCellWidth();\n    var minCellWidth = this.workspace.getCellMinWidth();\n\n    if (!cellWidth || cellWidth < minCellWidth) {\n      cellWidth = minCellWidth;\n    }\n\n    var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\n    return Math.floor(result);\n  }\n\n  calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\n    var {\n      _workspace: workSpace\n    } = this;\n    var {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    } = position;\n    var {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay\n    } = cellData;\n    var timeToScroll = date.getTime();\n    var cellStartTime = startDate.getTime();\n    var cellEndTime = endDate.getTime();\n    var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\n    var cellWidth = this.getCellWidth();\n    var rowHeight = this.getCellHeight();\n    var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\n    var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\n\n    if (workSpace.option(\"rtlEnabled\")) {\n      left = workSpace.getScrollableOuterWidth() - left;\n    }\n\n    return {\n      top: top,\n      left: left\n    };\n  }\n\n  dispose() {\n    if (this._onScrollHandler) {\n      eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n    }\n  }\n\n  _createVirtualScrolling() {\n    if (this.verticalScrollingAllowed) {\n      this.verticalVirtualScrolling = new VerticalVirtualScrolling({\n        workspace: this.workspace,\n        viewportHeight: this.viewportHeight,\n        rowHeight: this.rowHeight,\n        outlineCount: this.outlineCount\n      });\n    }\n\n    if (this.horizontalScrollingAllowed) {\n      this.horizontalVirtualScrolling = new HorizontalVirtualScrolling({\n        workspace: this.workspace,\n        viewportWidth: this.viewportWidth,\n        cellWidth: this.cellWidth,\n        outlineCount: this.outlineCount\n      });\n    }\n  }\n\n  _attachScrollableEvents() {\n    if (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) {\n      if (this.height || this.horizontalScrollingAllowed) {\n        this._attachScrollableScroll();\n      }\n\n      if (!this.height) {\n        this._attachWindowScroll();\n      }\n    }\n  }\n\n  _attachScrollableScroll() {\n    var scrollable = this.workspace.getScrollable();\n    var currentOnScroll = scrollable.option(\"onScroll\");\n    scrollable.option(\"onScroll\", e => {\n      null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll.apply(scrollable, [e]);\n\n      this._process(null === e || void 0 === e ? void 0 : e.scrollOffset);\n    });\n  }\n\n  _attachWindowScroll() {\n    var window = getWindow();\n    this._onScrollHandler = this.workspace._createAction(() => {\n      var {\n        scrollX: scrollX,\n        scrollY: scrollY\n      } = window;\n\n      if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\n        this._process({\n          left: scrollX,\n          top: scrollY\n        });\n      }\n    });\n    eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n  }\n\n  _process(scrollPosition) {\n    if (scrollPosition) {\n      var _this$verticalVirtual3, _this$horizontalVirtu3;\n\n      var {\n        left: left,\n        top: top\n      } = scrollPosition;\n      var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\n      var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\n\n      if (verticalStateChanged || horizontalStateChanged) {\n        this.renderer.updateRender();\n      }\n    }\n  }\n\n  updateDimensions(isForce) {\n    var cellHeight = this.getCellHeight(false);\n    var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\n\n    if (needUpdateVertical || isForce) {\n      var _this$verticalVirtual4;\n\n      this.rowHeight = cellHeight;\n      null === (_this$verticalVirtual4 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual4 ? void 0 : _this$verticalVirtual4.reinitState(cellHeight, isForce);\n    }\n\n    var cellWidth = this.getCellWidth();\n    var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\n\n    if (needUpdateHorizontal || isForce) {\n      var _this$horizontalVirtu4;\n\n      this.cellWidth = cellWidth;\n      null === (_this$horizontalVirtu4 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu4 ? void 0 : _this$horizontalVirtu4.reinitState(cellWidth, isForce);\n    }\n\n    if (needUpdateVertical || needUpdateHorizontal) {\n      this.renderer._renderGrid();\n    }\n  }\n\n}\n\nclass VirtualScrollingBase {\n  constructor(options) {\n    this.options = options;\n    this._state = this.defaultState;\n    this._viewportSize = options.viewportSize;\n    this._itemSize = options.itemSize;\n    this._position = -1;\n    this._itemSizeChanged = false;\n    this.updateState(0);\n  }\n\n  get viewportSize() {\n    return this._viewportSize;\n  }\n\n  get itemSize() {\n    return this._itemSize;\n  }\n\n  set itemSize(value) {\n    this._itemSizeChanged = this._itemSize !== value;\n    this._itemSize = value;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get startIndex() {\n    return this.state.startIndex;\n  }\n\n  get pageSize() {\n    return Math.ceil(this.viewportSize / this.itemSize);\n  }\n\n  get outlineCount() {\n    return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2);\n  }\n\n  get workspace() {\n    return this.options.workspace;\n  }\n\n  get groupCount() {\n    return this.workspace._getGroupCount();\n  }\n\n  get isVerticalGrouping() {\n    return this.workspace._isVerticalGroupedWorkSpace();\n  }\n\n  get defaultState() {\n    return {\n      prevPosition: 0,\n      startIndex: -1,\n      itemCount: 0,\n      virtualItemCountBefore: 0,\n      virtualItemCountAfter: 0,\n      outlineCountBefore: 0,\n      outlineCountAfter: 0,\n      virtualItemSizeBefore: 0,\n      virtualItemSizeAfter: 0,\n      outlineSizeBefore: 0,\n      outlineSizeAfter: 0\n    };\n  }\n\n  get maxScrollPosition() {\n    return this.getTotalItemCount() * this.itemSize - this.viewportSize;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  needUpdateState(position) {\n    var {\n      prevPosition: prevPosition,\n      startIndex: startIndex\n    } = this.state;\n    var isFirstInitialization = startIndex < 0;\n\n    if (isFirstInitialization) {\n      return true;\n    }\n\n    var isStartIndexChanged = false;\n\n    if (this._validateAndSavePosition(position)) {\n      if (0 === position || position === this.maxScrollPosition) {\n        return true;\n      }\n\n      var currentPosition = prevPosition;\n      var currentItemsCount = Math.floor(currentPosition / this.itemSize);\n      var itemsCount = Math.floor(position / this.itemSize);\n      isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount;\n    }\n\n    return isStartIndexChanged;\n  }\n\n  _validateAndSavePosition(position) {\n    if (!isDefined(position)) {\n      return false;\n    }\n\n    var result = this.position !== position;\n    this.position = position;\n    return result;\n  }\n\n  _correctPosition(position) {\n    return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1;\n  }\n\n  updateState(position, isForce) {\n    position = this._correctPosition(position);\n\n    if (!this.needUpdateState(position) && !isForce) {\n      return false;\n    }\n\n    var itemsInfoBefore = this._calcItemInfoBefore(position);\n\n    var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\n\n    var {\n      outlineCountAfter: outlineCountAfter,\n      virtualItemCountAfter: virtualItemCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    } = this._calcItemInfoAfter(itemsDeltaBefore);\n\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemsInfoBefore;\n    var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\n    var itemCountBefore = Math.floor(position / this.itemSize);\n    this.state.prevPosition = itemCountBefore * this.itemSize;\n    this.state.startIndex = itemCountBefore - outlineCountBefore;\n    this.state.virtualItemCountBefore = virtualItemCountBefore;\n    this.state.outlineCountBefore = outlineCountBefore;\n    this.state.itemCount = itemCount;\n    this.state.outlineCountAfter = outlineCountAfter;\n    this.state.virtualItemCountAfter = virtualItemCountAfter;\n\n    this._updateStateCore();\n\n    return true;\n  }\n\n  reinitState(itemSize, isForceUpdate) {\n    var {\n      position: position\n    } = this;\n    this.itemSize = itemSize;\n    this.updateState(0, isForceUpdate);\n\n    if (position > 0) {\n      this.updateState(position, isForceUpdate);\n    }\n  }\n\n  _calcItemInfoBefore(position) {\n    var virtualItemCountBefore = Math.floor(position / this.itemSize);\n    var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\n    virtualItemCountBefore -= outlineCountBefore;\n    return {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    };\n  }\n\n  _calcItemDeltaBefore(itemInfoBefore) {\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemInfoBefore;\n    var totalItemCount = this.getTotalItemCount();\n    return totalItemCount - virtualItemCountBefore - outlineCountBefore;\n  }\n\n  getTotalItemCount() {\n    throw \"getTotalItemCount method should be implemented\";\n  }\n\n  getRenderState() {\n    throw \"getRenderState method should be implemented\";\n  }\n\n  _calcItemInfoAfter(itemsDeltaBefore) {\n    var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\n    var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\n    var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\n\n    if (virtualItemCountAfter > 0) {\n      virtualItemCountAfter -= outlineCountAfter;\n    }\n\n    return {\n      virtualItemCountAfter: virtualItemCountAfter,\n      outlineCountAfter: outlineCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    };\n  }\n\n  _updateStateCore() {\n    var {\n      state: state\n    } = this;\n    var virtualItemCountBefore = state.virtualItemCountBefore;\n    var virtualItemCountAfter = state.virtualItemCountAfter;\n    var outlineCountBefore = state.outlineCountBefore;\n    var outlineCountAfter = state.outlineCountAfter;\n    var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\n    var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\n    var prevOutlineSizeBefore = state.outlineSizeBefore;\n    var prevOutlineSizeAfter = state.outlineSizeAfter;\n    var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\n    var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\n    var outlineSizeBefore = this.itemSize * outlineCountBefore;\n    var outlineSizeAfter = this.itemSize * outlineCountAfter;\n    var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\n    var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\n    var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\n    var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\n    var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\n    var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\n    var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\n\n    if (needAddItems) {\n      this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    }\n  }\n\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    var {\n      state: state\n    } = this;\n    state.virtualItemSizeBefore = virtualItemSizeBefore;\n    state.virtualItemSizeAfter = virtualItemSizeAfter;\n  }\n\n}\n\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super({\n      workspace: options.workspace,\n      viewportSize: options.viewportHeight,\n      itemSize: options.rowHeight,\n      outlineCount: options.outlineCount\n    });\n  }\n\n  get prevTopPosition() {\n    return this.state.prevPosition;\n  }\n\n  get rowCount() {\n    return this.state.itemCount;\n  }\n\n  get topVirtualRowCount() {\n    return this.state.virtualItemCountBefore;\n  }\n\n  get bottomVirtualRowCount() {\n    return this.state.virtualItemCountAfter;\n  }\n\n  getTotalItemCount() {\n    return this.workspace._getTotalRowCount(this.groupCount, this.isVerticalGrouping);\n  }\n\n  getRenderState() {\n    return {\n      topVirtualRowHeight: this.state.virtualItemSizeBefore,\n      bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\n      startRowIndex: this.state.startIndex,\n      rowCount: this.state.itemCount,\n      startIndex: this.state.startIndex\n    };\n  }\n\n}\n\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super({\n      workspace: options.workspace,\n      viewportSize: options.viewportWidth,\n      itemSize: options.cellWidth,\n      outlineCount: options.outlineCount\n    });\n  }\n\n  get isRTL() {\n    return this.workspace._isRTL();\n  }\n\n  getTotalItemCount() {\n    return this.workspace._getTotalCellCount(this.groupCount, this.isVerticalGrouping);\n  }\n\n  getRenderState() {\n    return {\n      leftVirtualCellWidth: this.state.virtualItemSizeBefore,\n      rightVirtualCellWidth: this.state.virtualItemSizeAfter,\n      startCellIndex: this.state.startIndex,\n      cellCount: this.state.itemCount,\n      cellWidth: this.itemSize\n    };\n  }\n\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    if (!this.isRTL) {\n      super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    } else {\n      var {\n        state: state\n      } = this;\n      state.virtualItemSizeAfter = virtualItemSizeBefore;\n      state.virtualItemSizeBefore = virtualItemSizeAfter;\n      state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount;\n    }\n  }\n\n}\n\nclass Renderer {\n  constructor(workspace) {\n    this._workspace = workspace;\n    this._renderAppointmentTimeout = null;\n  }\n\n  getRenderTimeout() {\n    return VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT;\n  }\n\n  get workspace() {\n    return this._workspace;\n  }\n\n  updateRender() {\n    this._renderGrid();\n\n    this._renderAppointments();\n  }\n\n  _renderGrid() {\n    this.workspace.renderRWorkspace(false);\n  }\n\n  _renderAppointments() {\n    var renderTimeout = this.getRenderTimeout();\n\n    if (renderTimeout >= 0) {\n      clearTimeout(this._renderAppointmentTimeout);\n      this._renderAppointmentTimeout = setTimeout(() => this.workspace.updateAppointments(), renderTimeout);\n    } else {\n      this.workspace.updateAppointments();\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js"],"names":["_extends","domAdapter","eventsEngine","getWindow","addNamespace","isDefined","DEFAULT_CELL_HEIGHT","MIN_CELL_WIDTH","MIN_SCROLL_OFFSET","VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT","DOCUMENT_SCROLL_EVENT_NAMESPACE","scrollingOrientations","vertical","horizontal","both","DefaultScrollingOrientation","VirtualScrollingDispatcher","constructor","workspace","_workspace","_rowHeight","getCellHeight","_cellWidth","getCellWidth","_renderer","Renderer","_createVirtualScrolling","_attachScrollableEvents","isRTL","_isRTL","renderer","isVirtualScrolling","verticalVirtualScrolling","_verticalVirtualScrolling","value","horizontalVirtualScrolling","_horizontalVirtualScrolling","document","getDocument","height","invoke","width","rowHeight","outlineCount","option","viewportHeight","$element","innerHeight","cellWidth","viewportWidth","innerWidth","cellCountInsideTopVirtualRow","_this$verticalScrolli","verticalScrollingState","virtualItemCountBefore","cellCountInsideLeftVirtualCell","_this$horizontalScrol","horizontalScrollingState","cellCountInsideRightVirtualCell","_this$horizontalScrol2","virtualItemCountAfter","topVirtualRowsCount","leftVirtualCellsCount","virtualItemsCount","virtualRowOffset","_this$verticalScrolli2","virtualItemSizeBefore","virtualCellOffset","_this$horizontalScrol3","scrollingState","_this$verticalVirtual","_this$horizontalVirtu","state","scrollingOrientation","verticalScrollingAllowed","horizontalScrollingAllowed","getRenderState","_this$verticalVirtual2","_this$horizontalVirtu2","verticalRenderState","horizontalRenderState","cellHeight","result","Math","floor","minCellWidth","getCellMinWidth","calculateCoordinatesByDataAndPosition","cellData","position","date","isCalculateTime","isVerticalDirectionView","workSpace","rowIndex","columnIndex","startDate","endDate","allDay","timeToScroll","getTime","cellStartTime","cellEndTime","scrollInCell","top","left","getScrollableOuterWidth","dispose","_onScrollHandler","off","VerticalVirtualScrolling","HorizontalVirtualScrolling","_attachScrollableScroll","_attachWindowScroll","scrollable","getScrollable","currentOnScroll","e","apply","_process","scrollOffset","window","_createAction","scrollX","scrollY","on","scrollPosition","_this$verticalVirtual3","_this$horizontalVirtu3","verticalStateChanged","updateState","horizontalStateChanged","updateRender","updateDimensions","isForce","needUpdateVertical","_this$verticalVirtual4","reinitState","needUpdateHorizontal","_this$horizontalVirtu4","_renderGrid","VirtualScrollingBase","options","_state","defaultState","_viewportSize","viewportSize","_itemSize","itemSize","_position","_itemSizeChanged","startIndex","pageSize","ceil","groupCount","_getGroupCount","isVerticalGrouping","_isVerticalGroupedWorkSpace","prevPosition","itemCount","outlineCountBefore","outlineCountAfter","virtualItemSizeAfter","outlineSizeBefore","outlineSizeAfter","maxScrollPosition","getTotalItemCount","needUpdateState","isFirstInitialization","isStartIndexChanged","_validateAndSavePosition","currentPosition","currentItemsCount","itemsCount","abs","_correctPosition","min","itemsInfoBefore","_calcItemInfoBefore","itemsDeltaBefore","_calcItemDeltaBefore","itemCountWithAfter","_calcItemInfoAfter","itemCountBefore","_updateStateCore","isForceUpdate","itemInfoBefore","totalItemCount","prevVirtualItemSizeBefore","prevVirtualItemSizeAfter","prevOutlineSizeBefore","prevOutlineSizeAfter","prevVirtualSizeBefore","virtualSizeBefore","prevVirtualSizeAfter","virtualSizeAfter","isAppend","isPrepend","needAddItems","_updateStateVirtualItems","prevTopPosition","rowCount","topVirtualRowCount","bottomVirtualRowCount","_getTotalRowCount","topVirtualRowHeight","bottomVirtualRowHeight","startRowIndex","_getTotalCellCount","leftVirtualCellWidth","rightVirtualCellWidth","startCellIndex","cellCount","_renderAppointmentTimeout","getRenderTimeout","_renderAppointments","renderRWorkspace","renderTimeout","clearTimeout","setTimeout","updateAppointments"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nvar DEFAULT_CELL_HEIGHT = 50;\r\nvar MIN_CELL_WIDTH = 1;\r\nvar MIN_SCROLL_OFFSET = 10;\r\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 30;\r\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\r\nvar scrollingOrientations = {\r\n    vertical: \"vertical\",\r\n    horizontal: \"horizontal\",\r\n    both: \"both\"\r\n};\r\nvar DefaultScrollingOrientation = scrollingOrientations.both;\r\nexport default class VirtualScrollingDispatcher {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._rowHeight = this.getCellHeight();\r\n        this._cellWidth = this.getCellWidth();\r\n        this._renderer = new Renderer(this.workspace);\r\n        this._createVirtualScrolling();\r\n        this._attachScrollableEvents()\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    get isRTL() {\r\n        return this.workspace._isRTL()\r\n    }\r\n    get renderer() {\r\n        return this._renderer\r\n    }\r\n    get isVirtualScrolling() {\r\n        return this.workspace.isVirtualScrolling()\r\n    }\r\n    get verticalVirtualScrolling() {\r\n        return this._verticalVirtualScrolling\r\n    }\r\n    set verticalVirtualScrolling(value) {\r\n        this._verticalVirtualScrolling = value\r\n    }\r\n    get horizontalVirtualScrolling() {\r\n        return this._horizontalVirtualScrolling\r\n    }\r\n    set horizontalVirtualScrolling(value) {\r\n        this._horizontalVirtualScrolling = value\r\n    }\r\n    get document() {\r\n        return domAdapter.getDocument()\r\n    }\r\n    get height() {\r\n        return this.workspace.invoke(\"getOption\", \"height\")\r\n    }\r\n    get width() {\r\n        return this.workspace.invoke(\"getOption\", \"width\")\r\n    }\r\n    get rowHeight() {\r\n        return this._rowHeight\r\n    }\r\n    set rowHeight(value) {\r\n        this._rowHeight = value\r\n    }\r\n    get outlineCount() {\r\n        return this.workspace.option(\"scrolling.outlineCount\")\r\n    }\r\n    get viewportHeight() {\r\n        return this.height ? this.workspace.$element().height() : getWindow().innerHeight\r\n    }\r\n    get cellWidth() {\r\n        return this._cellWidth\r\n    }\r\n    set cellWidth(value) {\r\n        this._cellWidth = value\r\n    }\r\n    get viewportWidth() {\r\n        return this.width ? this.workspace.$element().width() : getWindow().innerWidth\r\n    }\r\n    get cellCountInsideTopVirtualRow() {\r\n        var _this$verticalScrolli;\r\n        return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideLeftVirtualCell() {\r\n        var _this$horizontalScrol;\r\n        return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideRightVirtualCell() {\r\n        var _this$horizontalScrol2;\r\n        return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0\r\n    }\r\n    get topVirtualRowsCount() {\r\n        return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0\r\n    }\r\n    get leftVirtualCellsCount() {\r\n        var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\r\n        return virtualItemsCount > 0 ? 1 : 0\r\n    }\r\n    get virtualRowOffset() {\r\n        var _this$verticalScrolli2;\r\n        return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0\r\n    }\r\n    get virtualCellOffset() {\r\n        var _this$horizontalScrol3;\r\n        return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0\r\n    }\r\n    get scrollingState() {\r\n        var _this$verticalVirtual, _this$horizontalVirtu;\r\n        return {\r\n            vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\r\n            horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\r\n        }\r\n    }\r\n    get verticalScrollingState() {\r\n        return this.scrollingState.vertical\r\n    }\r\n    get horizontalScrollingState() {\r\n        return this.scrollingState.horizontal\r\n    }\r\n    get scrollingOrientation() {\r\n        return this.workspace.option(\"scrolling.orientation\") || DefaultScrollingOrientation\r\n    }\r\n    get verticalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    get horizontalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    getRenderState() {\r\n        var _this$verticalVirtual2, _this$horizontalVirtu2;\r\n        var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\r\n        var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\r\n        return _extends({}, verticalRenderState, horizontalRenderState)\r\n    }\r\n    getCellHeight() {\r\n        var cellHeight = this.workspace.getCellHeight(false);\r\n        var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\r\n        return Math.floor(result)\r\n    }\r\n    getCellWidth() {\r\n        var cellWidth = this.workspace.getCellWidth();\r\n        var minCellWidth = this.workspace.getCellMinWidth();\r\n        if (!cellWidth || cellWidth < minCellWidth) {\r\n            cellWidth = minCellWidth\r\n        }\r\n        var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\r\n        return Math.floor(result)\r\n    }\r\n    calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\r\n        var {\r\n            _workspace: workSpace\r\n        } = this;\r\n        var {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        } = position;\r\n        var {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        } = cellData;\r\n        var timeToScroll = date.getTime();\r\n        var cellStartTime = startDate.getTime();\r\n        var cellEndTime = endDate.getTime();\r\n        var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\r\n        var cellWidth = this.getCellWidth();\r\n        var rowHeight = this.getCellHeight();\r\n        var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\r\n        var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\r\n        if (workSpace.option(\"rtlEnabled\")) {\r\n            left = workSpace.getScrollableOuterWidth() - left\r\n        }\r\n        return {\r\n            top: top,\r\n            left: left\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._onScrollHandler) {\r\n            eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n        }\r\n    }\r\n    _createVirtualScrolling() {\r\n        if (this.verticalScrollingAllowed) {\r\n            this.verticalVirtualScrolling = new VerticalVirtualScrolling({\r\n                workspace: this.workspace,\r\n                viewportHeight: this.viewportHeight,\r\n                rowHeight: this.rowHeight,\r\n                outlineCount: this.outlineCount\r\n            })\r\n        }\r\n        if (this.horizontalScrollingAllowed) {\r\n            this.horizontalVirtualScrolling = new HorizontalVirtualScrolling({\r\n                workspace: this.workspace,\r\n                viewportWidth: this.viewportWidth,\r\n                cellWidth: this.cellWidth,\r\n                outlineCount: this.outlineCount\r\n            })\r\n        }\r\n    }\r\n    _attachScrollableEvents() {\r\n        if (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) {\r\n            if (this.height || this.horizontalScrollingAllowed) {\r\n                this._attachScrollableScroll()\r\n            }\r\n            if (!this.height) {\r\n                this._attachWindowScroll()\r\n            }\r\n        }\r\n    }\r\n    _attachScrollableScroll() {\r\n        var scrollable = this.workspace.getScrollable();\r\n        var currentOnScroll = scrollable.option(\"onScroll\");\r\n        scrollable.option(\"onScroll\", e => {\r\n            null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll.apply(scrollable, [e]);\r\n            this._process(null === e || void 0 === e ? void 0 : e.scrollOffset)\r\n        })\r\n    }\r\n    _attachWindowScroll() {\r\n        var window = getWindow();\r\n        this._onScrollHandler = this.workspace._createAction(() => {\r\n            var {\r\n                scrollX: scrollX,\r\n                scrollY: scrollY\r\n            } = window;\r\n            if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\r\n                this._process({\r\n                    left: scrollX,\r\n                    top: scrollY\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n    }\r\n    _process(scrollPosition) {\r\n        if (scrollPosition) {\r\n            var _this$verticalVirtual3, _this$horizontalVirtu3;\r\n            var {\r\n                left: left,\r\n                top: top\r\n            } = scrollPosition;\r\n            var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\r\n            var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\r\n            if (verticalStateChanged || horizontalStateChanged) {\r\n                this.renderer.updateRender()\r\n            }\r\n        }\r\n    }\r\n    updateDimensions(isForce) {\r\n        var cellHeight = this.getCellHeight(false);\r\n        var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\r\n        if (needUpdateVertical || isForce) {\r\n            var _this$verticalVirtual4;\r\n            this.rowHeight = cellHeight;\r\n            null === (_this$verticalVirtual4 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual4 ? void 0 : _this$verticalVirtual4.reinitState(cellHeight, isForce)\r\n        }\r\n        var cellWidth = this.getCellWidth();\r\n        var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\r\n        if (needUpdateHorizontal || isForce) {\r\n            var _this$horizontalVirtu4;\r\n            this.cellWidth = cellWidth;\r\n            null === (_this$horizontalVirtu4 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu4 ? void 0 : _this$horizontalVirtu4.reinitState(cellWidth, isForce)\r\n        }\r\n        if (needUpdateVertical || needUpdateHorizontal) {\r\n            this.renderer._renderGrid()\r\n        }\r\n    }\r\n}\r\nclass VirtualScrollingBase {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this._state = this.defaultState;\r\n        this._viewportSize = options.viewportSize;\r\n        this._itemSize = options.itemSize;\r\n        this._position = -1;\r\n        this._itemSizeChanged = false;\r\n        this.updateState(0)\r\n    }\r\n    get viewportSize() {\r\n        return this._viewportSize\r\n    }\r\n    get itemSize() {\r\n        return this._itemSize\r\n    }\r\n    set itemSize(value) {\r\n        this._itemSizeChanged = this._itemSize !== value;\r\n        this._itemSize = value\r\n    }\r\n    get state() {\r\n        return this._state\r\n    }\r\n    set state(value) {\r\n        this._state = value\r\n    }\r\n    get startIndex() {\r\n        return this.state.startIndex\r\n    }\r\n    get pageSize() {\r\n        return Math.ceil(this.viewportSize / this.itemSize)\r\n    }\r\n    get outlineCount() {\r\n        return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2)\r\n    }\r\n    get workspace() {\r\n        return this.options.workspace\r\n    }\r\n    get groupCount() {\r\n        return this.workspace._getGroupCount()\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.workspace._isVerticalGroupedWorkSpace()\r\n    }\r\n    get defaultState() {\r\n        return {\r\n            prevPosition: 0,\r\n            startIndex: -1,\r\n            itemCount: 0,\r\n            virtualItemCountBefore: 0,\r\n            virtualItemCountAfter: 0,\r\n            outlineCountBefore: 0,\r\n            outlineCountAfter: 0,\r\n            virtualItemSizeBefore: 0,\r\n            virtualItemSizeAfter: 0,\r\n            outlineSizeBefore: 0,\r\n            outlineSizeAfter: 0\r\n        }\r\n    }\r\n    get maxScrollPosition() {\r\n        return this.getTotalItemCount() * this.itemSize - this.viewportSize\r\n    }\r\n    get position() {\r\n        return this._position\r\n    }\r\n    set position(value) {\r\n        this._position = value\r\n    }\r\n    needUpdateState(position) {\r\n        var {\r\n            prevPosition: prevPosition,\r\n            startIndex: startIndex\r\n        } = this.state;\r\n        var isFirstInitialization = startIndex < 0;\r\n        if (isFirstInitialization) {\r\n            return true\r\n        }\r\n        var isStartIndexChanged = false;\r\n        if (this._validateAndSavePosition(position)) {\r\n            if (0 === position || position === this.maxScrollPosition) {\r\n                return true\r\n            }\r\n            var currentPosition = prevPosition;\r\n            var currentItemsCount = Math.floor(currentPosition / this.itemSize);\r\n            var itemsCount = Math.floor(position / this.itemSize);\r\n            isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount\r\n        }\r\n        return isStartIndexChanged\r\n    }\r\n    _validateAndSavePosition(position) {\r\n        if (!isDefined(position)) {\r\n            return false\r\n        }\r\n        var result = this.position !== position;\r\n        this.position = position;\r\n        return result\r\n    }\r\n    _correctPosition(position) {\r\n        return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1\r\n    }\r\n    updateState(position, isForce) {\r\n        position = this._correctPosition(position);\r\n        if (!this.needUpdateState(position) && !isForce) {\r\n            return false\r\n        }\r\n        var itemsInfoBefore = this._calcItemInfoBefore(position);\r\n        var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\r\n        var {\r\n            outlineCountAfter: outlineCountAfter,\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        } = this._calcItemInfoAfter(itemsDeltaBefore);\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemsInfoBefore;\r\n        var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\r\n        var itemCountBefore = Math.floor(position / this.itemSize);\r\n        this.state.prevPosition = itemCountBefore * this.itemSize;\r\n        this.state.startIndex = itemCountBefore - outlineCountBefore;\r\n        this.state.virtualItemCountBefore = virtualItemCountBefore;\r\n        this.state.outlineCountBefore = outlineCountBefore;\r\n        this.state.itemCount = itemCount;\r\n        this.state.outlineCountAfter = outlineCountAfter;\r\n        this.state.virtualItemCountAfter = virtualItemCountAfter;\r\n        this._updateStateCore();\r\n        return true\r\n    }\r\n    reinitState(itemSize, isForceUpdate) {\r\n        var {\r\n            position: position\r\n        } = this;\r\n        this.itemSize = itemSize;\r\n        this.updateState(0, isForceUpdate);\r\n        if (position > 0) {\r\n            this.updateState(position, isForceUpdate)\r\n        }\r\n    }\r\n    _calcItemInfoBefore(position) {\r\n        var virtualItemCountBefore = Math.floor(position / this.itemSize);\r\n        var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\r\n        virtualItemCountBefore -= outlineCountBefore;\r\n        return {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        }\r\n    }\r\n    _calcItemDeltaBefore(itemInfoBefore) {\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemInfoBefore;\r\n        var totalItemCount = this.getTotalItemCount();\r\n        return totalItemCount - virtualItemCountBefore - outlineCountBefore\r\n    }\r\n    getTotalItemCount() {\r\n        throw \"getTotalItemCount method should be implemented\"\r\n    }\r\n    getRenderState() {\r\n        throw \"getRenderState method should be implemented\"\r\n    }\r\n    _calcItemInfoAfter(itemsDeltaBefore) {\r\n        var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\r\n        var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\r\n        var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\r\n        if (virtualItemCountAfter > 0) {\r\n            virtualItemCountAfter -= outlineCountAfter\r\n        }\r\n        return {\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            outlineCountAfter: outlineCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        }\r\n    }\r\n    _updateStateCore() {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        var virtualItemCountBefore = state.virtualItemCountBefore;\r\n        var virtualItemCountAfter = state.virtualItemCountAfter;\r\n        var outlineCountBefore = state.outlineCountBefore;\r\n        var outlineCountAfter = state.outlineCountAfter;\r\n        var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\r\n        var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\r\n        var prevOutlineSizeBefore = state.outlineSizeBefore;\r\n        var prevOutlineSizeAfter = state.outlineSizeAfter;\r\n        var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\r\n        var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\r\n        var outlineSizeBefore = this.itemSize * outlineCountBefore;\r\n        var outlineSizeAfter = this.itemSize * outlineCountAfter;\r\n        var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\r\n        var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\r\n        var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\r\n        var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\r\n        var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\r\n        var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\r\n        var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\r\n        if (needAddItems) {\r\n            this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        state.virtualItemSizeBefore = virtualItemSizeBefore;\r\n        state.virtualItemSizeAfter = virtualItemSizeAfter\r\n    }\r\n}\r\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super({\r\n            workspace: options.workspace,\r\n            viewportSize: options.viewportHeight,\r\n            itemSize: options.rowHeight,\r\n            outlineCount: options.outlineCount\r\n        })\r\n    }\r\n    get prevTopPosition() {\r\n        return this.state.prevPosition\r\n    }\r\n    get rowCount() {\r\n        return this.state.itemCount\r\n    }\r\n    get topVirtualRowCount() {\r\n        return this.state.virtualItemCountBefore\r\n    }\r\n    get bottomVirtualRowCount() {\r\n        return this.state.virtualItemCountAfter\r\n    }\r\n    getTotalItemCount() {\r\n        return this.workspace._getTotalRowCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            topVirtualRowHeight: this.state.virtualItemSizeBefore,\r\n            bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\r\n            startRowIndex: this.state.startIndex,\r\n            rowCount: this.state.itemCount,\r\n            startIndex: this.state.startIndex\r\n        }\r\n    }\r\n}\r\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super({\r\n            workspace: options.workspace,\r\n            viewportSize: options.viewportWidth,\r\n            itemSize: options.cellWidth,\r\n            outlineCount: options.outlineCount\r\n        })\r\n    }\r\n    get isRTL() {\r\n        return this.workspace._isRTL()\r\n    }\r\n    getTotalItemCount() {\r\n        return this.workspace._getTotalCellCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            leftVirtualCellWidth: this.state.virtualItemSizeBefore,\r\n            rightVirtualCellWidth: this.state.virtualItemSizeAfter,\r\n            startCellIndex: this.state.startIndex,\r\n            cellCount: this.state.itemCount,\r\n            cellWidth: this.itemSize\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        if (!this.isRTL) {\r\n            super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        } else {\r\n            var {\r\n                state: state\r\n            } = this;\r\n            state.virtualItemSizeAfter = virtualItemSizeBefore;\r\n            state.virtualItemSizeBefore = virtualItemSizeAfter;\r\n            state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount\r\n        }\r\n    }\r\n}\r\nclass Renderer {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._renderAppointmentTimeout = null\r\n    }\r\n    getRenderTimeout() {\r\n        return VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    updateRender() {\r\n        this._renderGrid();\r\n        this._renderAppointments()\r\n    }\r\n    _renderGrid() {\r\n        this.workspace.renderRWorkspace(false)\r\n    }\r\n    _renderAppointments() {\r\n        var renderTimeout = this.getRenderTimeout();\r\n        if (renderTimeout >= 0) {\r\n            clearTimeout(this._renderAppointmentTimeout);\r\n            this._renderAppointmentTimeout = setTimeout(() => this.workspace.updateAppointments(), renderTimeout)\r\n        } else {\r\n            this.workspace.updateAppointments()\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}