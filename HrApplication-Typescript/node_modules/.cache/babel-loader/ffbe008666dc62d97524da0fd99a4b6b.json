{"ast":null,"code":"var _jsxFileName = \"/home/igor/welcomedev-react-starter/src/components/GoogleLogin.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React from 'react';\nimport { useState } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'; // const clientId = '930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com'\n// const GoogleLogin : React.FC = () => {\n//     const onSuccess = (res:any) => {\n//         console.log(\"Login success: currentUser: \", res.profileObj);\n//         refreshTokenSetup(res);\n//     }\n//     const onFailure = (res:any) => {\n//         console.log(\"Login failed: res:\", res)\n//     }\n//     const {signIn } = useGoogleLogin({\n//         onSuccess,\n//         onFailure,\n//         clientId,\n//         isSignedIn: true,\n//         accessType: 'offline'\n//     });\n//     return (\n//         <div>\n//             <button onClick={signIn} className=\"button\" >\n//                 <img src=\"static/images/google.svg\" alt=\"google login\" className=\"icon\"></img>\n//                 <span className=\"buttonText\">Sign in with Google</span>\n//             </button>\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginG = () => {\n  _s();\n\n  const [data, setData] = useState({\n    isAuthenticated: false,\n    token: '',\n    user: null\n  });\n  const {\n    isAuthenticated,\n    user\n  } = data;\n\n  const logout = () => {\n    setData({ ...data,\n      token: \"\",\n      user: null,\n      isAuthenticated: false\n    });\n  };\n\n  const onFailure = error => {\n    alert(error);\n  };\n\n  const responseGoogle = response => {\n    let tokenBlob = new Blob([JSON.stringify({\n      access_token: response.accessToken\n    }, null, 2)]);\n    let config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    axios.post('http://localhost:8000/api/auth/google/login', tokenBlob, config).then(response => {\n      const token = response.headers;\n\n      if (token) {\n        setData({ ...data,\n          token: token,\n          isAuthenticated: true\n        });\n      }\n    });\n  };\n\n  let content = !!isAuthenticated ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Authenticated\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GoogleLogout, {\n        clientId: config.GOOGLE_CLIENT_ID,\n        buttonText: \"Logout\",\n        onLogoutSuccess: logout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: \"930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com\",\n      buttonText: \"Login\",\n      onSuccess: googleResponse,\n      onFailure: onFailure,\n      isSignedIn: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 13\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 13\n  }, this);\n};\n\n_s(LoginG, \"ZaiDtDOsf9nYtCfirNA05W8Xrws=\");\n\n_c = LoginG;\nexport default LoginG; // function refreshTokenSetup(res: any) {\n//     throw new Error('Function not implemented.AAAA');\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginG\");","map":{"version":3,"sources":["/home/igor/welcomedev-react-starter/src/components/GoogleLogin.tsx"],"names":["axios","React","useState","GoogleLogin","GoogleLogout","LoginG","data","setData","isAuthenticated","token","user","logout","onFailure","error","alert","responseGoogle","response","tokenBlob","Blob","JSON","stringify","access_token","accessToken","config","headers","post","then","content","GOOGLE_CLIENT_ID","googleResponse"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,oBAAxC,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,MAAiB,GAAG,MAAM;AAAA;;AAE5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAC7BM,IAAAA,eAAe,EAAG,KADW;AAE7BC,IAAAA,KAAK,EAAG,EAFqB;AAG7BC,IAAAA,IAAI,EAAG;AAHsB,GAAD,CAAhC;AAKA,QAAM;AAACF,IAAAA,eAAD;AAAkBE,IAAAA;AAAlB,MAA0BJ,IAAhC;;AAGA,QAAMK,MAAM,GAAG,MAAM;AACjBJ,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AACKG,MAAAA,KAAK,EAAE,EADZ;AACgBC,MAAAA,IAAI,EAAE,IADtB;AAC4BF,MAAAA,eAAe,EAAE;AAD7C,KAAD,CAAP;AAGH,GAJD;;AAMA,QAAMI,SAAS,GAAIC,KAAD,IAAgB;AAC9BC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH,GAFD;;AAIA,QAAME,cAAc,GAAIC,QAAD,IAAoB;AAEvC,QAAIC,SAAS,GAAG,IAAIC,IAAJ,CAAS,CACrBC,IAAI,CAACC,SAAL,CAAe;AACXC,MAAAA,YAAY,EAAEL,QAAQ,CAACM;AADZ,KAAf,EAEG,IAFH,EAES,CAFT,CADqB,CAAT,CAAhB;AAMA,QAAIC,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP;AADA,KAAb;AAOAxB,IAAAA,KAAK,CAACyB,IAAN,CAAW,6CAAX,EAA0DR,SAA1D,EAAqEM,MAArE,EACCG,IADD,CACMV,QAAQ,IAAI;AACd,YAAMP,KAAK,GAAGO,QAAQ,CAACQ,OAAvB;;AACA,UAAIf,KAAJ,EAAU;AACNF,QAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AACKG,UAAAA,KAAK,EAAEA,KADZ;AACmBD,UAAAA,eAAe,EAAE;AADpC,SAAD,CAAP;AAGH;AACJ,KARD;AASH,GAxBD;;AA0BA,MAAImB,OAAO,GAAG,CAAC,CAAEnB,eAAH,gBAEN;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEe,MAAM,CAACK,gBAA/B;AACc,QAAA,UAAU,EAAC,QADzB;AAEc,QAAA,eAAe,EAAEjB;AAF/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFM,gBAgBN;AAAA,2BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAE,0EADd;AAEI,MAAA,UAAU,EAAC,OAFf;AAGI,MAAA,SAAS,EAAEkB,cAHf;AAII,MAAA,SAAS,EAAEjB,SAJf;AAKI,MAAA,UAAU;AALd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAhBR;AA4BI,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACKe;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKP,CA/ED;;GAAMtB,M;;KAAAA,M;AAiFN,eAAeA,MAAf,C,CAEA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport React from 'react'\nimport { useState } from 'react';\nimport {useGoogleLogin} from 'react-google-login';\nimport {GoogleLogin, GoogleLogout} from 'react-google-login';\n\n// const clientId = '930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com'\n\n// const GoogleLogin : React.FC = () => {\n\n//     const onSuccess = (res:any) => {\n//         console.log(\"Login success: currentUser: \", res.profileObj);\n//         refreshTokenSetup(res);\n//     }\n\n//     const onFailure = (res:any) => {\n//         console.log(\"Login failed: res:\", res)\n//     }\n\n//     const {signIn } = useGoogleLogin({\n//         onSuccess,\n//         onFailure,\n//         clientId,\n//         isSignedIn: true,\n//         accessType: 'offline'\n//     });\n\n//     return (\n//         <div>\n//             <button onClick={signIn} className=\"button\" >\n//                 <img src=\"static/images/google.svg\" alt=\"google login\" className=\"icon\"></img>\n//                 <span className=\"buttonText\">Sign in with Google</span>\n//             </button>\n//         </div>\n//     )\n// }\n\nconst LoginG : React.FC = () => {\n\n    const [data, setData] = useState({\n        isAuthenticated : false,\n        token : '',\n        user : null\n    })\n    const {isAuthenticated, user} = data;\n\n\n    const logout = () => {\n        setData({\n            ...data, token: \"\", user: null, isAuthenticated: false\n        })\n    };\n\n    const onFailure = (error :any) => {\n        alert(error);\n    };\n\n    const responseGoogle = (response : any) => {\n\n        let tokenBlob = new Blob([\n            JSON.stringify({\n                access_token: response.accessToken\n            }, null, 2)\n        ]);\n\n        let config = {\n            headers: {\n            'Content-Type': 'application/json'\n            }\n        };\n\n  \n        axios.post('http://localhost:8000/api/auth/google/login', tokenBlob, config)\n        .then(response => {\n            const token = response.headers;\n            if (token){\n                setData({\n                    ...data, token: token, isAuthenticated: true\n                });\n            }\n        });\n    };\n\n    let content = !! isAuthenticated ?\n        (\n            <div>\n                <p>Authenticated</p>\n                {/* <div>\n                    {user && user.email}\n                </div> */}\n                <div>\n                    <GoogleLogout clientId={config.GOOGLE_CLIENT_ID}\n                                  buttonText=\"Logout\"\n                                  onLogoutSuccess={logout}\n                    />\n                </div>\n            </div>\n        ) :\n        (\n            <div>\n                <GoogleLogin\n                    clientId= \"930716669637-27uerudri95vjbfrjqbe5s8dngf1pdf2.apps.googleusercontent.com\"\n                    buttonText=\"Login\"\n                    onSuccess={googleResponse}\n                    onFailure={onFailure}\n                    isSignedIn\n                />\n\n            </div>\n        );\n\n        return (\n            <div className=\"App\">\n                {content}\n            </div>\n    );\n}\n\nexport default LoginG;\n\n// function refreshTokenSetup(res: any) {\n//     throw new Error('Function not implemented.AAAA');\n// }\n"]},"metadata":{},"sourceType":"module"}