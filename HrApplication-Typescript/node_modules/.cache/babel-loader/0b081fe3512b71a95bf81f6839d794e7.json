{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { data as elementData } from \"../../../core/element_data\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getBoundingRect, getElementsFromPoint } from \"../../../core/utils/position\";\nimport messageLocalization from \"../../../localization/message\";\nimport dateLocalization from \"../../../localization/date\";\nimport { noop } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace, isMouseEvent } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport errors from \"../../widget/ui.errors\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { name as contextMenuEventName } from \"../../../events/contextmenu\";\nimport { enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../../events/drag\";\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\nimport { APPOINTMENT_SETTINGS_KEY, FIXED_CONTAINER_CLASS, VIRTUAL_CELL_CLASS } from \"../constants\";\nimport timeZoneUtils from \"../utils.timeZone\";\nimport WidgetObserver from \"../base/widgetObserver\";\nimport { resetPosition, locate } from \"../../../animation/translator\";\nimport VirtualScrollingDispatcher from \"./ui.scheduler.virtual_scrolling\";\nimport ViewDataProvider from \"./view_data_provider\";\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport VirtualSelectionState from \"./virtual_selection_state\";\nimport { Cache } from \"./cache\";\nimport { isDateInRange } from \"./utils/base\";\nvar abstract = WidgetObserver.abstract;\nvar toMs = dateUtils.dateToMilliseconds;\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\nvar TIME_PANEL_CLASS = \"dx-scheduler-time-panel\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\nvar ALL_DAY_TITLE_HIDDEN_CLASS = \"dx-scheduler-all-day-title-hidden\";\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar GROUP_ROW_CLASS = \"dx-scheduler-group-row\";\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\nvar GROUP_HEADER_CONTENT_CLASS = \"dx-scheduler-group-header-content\";\nvar DATE_TABLE_CLASS = \"dx-scheduler-date-table\";\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\nvar DATE_TABLE_ROW_CLASS = \"dx-scheduler-date-table-row\";\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\nvar DragEventNames = {\n  ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\n  DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\n  LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\n};\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\nvar CELL_DATA = \"dxCellData\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\nvar DAY_MS = toMs(\"day\");\nvar HOUR_MS = toMs(\"hour\");\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\n\nclass ScrollSemaphore {\n  constructor() {\n    this.counter = 0;\n  }\n\n  isFree() {\n    return 0 === this.counter;\n  }\n\n  take() {\n    this.counter++;\n  }\n\n  release() {\n    this.counter--;\n\n    if (this.counter < 0) {\n      this.counter = 0;\n    }\n  }\n\n}\n\nvar formatWeekday = function (date) {\n  return dateLocalization.getDayNames(\"abbreviated\")[date.getDay()];\n};\n\nclass SchedulerWorkSpace extends WidgetObserver {\n  get viewDataProvider() {\n    if (!this._viewDataProvider) {\n      this._viewDataProvider = new ViewDataProvider(this);\n    }\n\n    return this._viewDataProvider;\n  }\n\n  get cache() {\n    if (!this._cache) {\n      this._cache = new Cache();\n    }\n\n    return this._cache;\n  }\n\n  get virtualSelectionState() {\n    if (!this._virtualSelectionState) {\n      this._virtualSelectionState = new VirtualSelectionState(this.viewDataProvider);\n    }\n\n    return this._virtualSelectionState;\n  }\n\n  get isAllDayPanelVisible() {\n    return this._isShowAllDayPanel() && this.supportAllDayRow();\n  }\n\n  get isDateAndTimeView() {\n    return true;\n  }\n\n  get verticalGroupTableClass() {\n    return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS;\n  }\n\n  get viewDirection() {\n    return \"vertical\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrDateHeader;\n  }\n\n  _supportedKeys() {\n    var clickHandler = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (this._selectedCells && this._selectedCells.length) {\n        var $itemElement = $(this.option(\"focusedElement\"));\n        var $cellElement = $($itemElement.length ? $itemElement : this._selectedCells);\n        e.target = this._selectedCells;\n        this._showPopup = true;\n\n        this._cellClickAction({\n          event: e,\n          cellElement: $(this._selectedCells),\n          cellData: this.getCellData($cellElement)\n        });\n      }\n    };\n\n    var arrowPressHandler = function (e, cell) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this._moveToCell(cell, e.shiftKey);\n    };\n\n    return extend(super._supportedKeys(), {\n      enter: clickHandler,\n      space: clickHandler,\n      downArrow: function (e) {\n        var $cell = this._getCellFromNextRow(\"next\", e.shiftKey);\n\n        arrowPressHandler.call(this, e, $cell);\n      },\n      upArrow: function (e) {\n        var $cell = this._getCellFromNextRow(\"prev\", e.shiftKey);\n\n        arrowPressHandler.call(this, e, $cell);\n      },\n      rightArrow: function (e) {\n        var $rightCell = this._getCellFromNextColumn(\"next\", e.shiftKey);\n\n        arrowPressHandler.call(this, e, $rightCell);\n      },\n      leftArrow: function (e) {\n        var $leftCell = this._getCellFromNextColumn(\"prev\", e.shiftKey);\n\n        arrowPressHandler.call(this, e, $leftCell);\n      }\n    });\n  }\n\n  _dispose() {\n    var _this$virtualScrollin;\n\n    super._dispose();\n\n    null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.dispose();\n  }\n\n  _isRTL() {\n    return this.option(\"rtlEnabled\");\n  }\n\n  _getFocusedCell() {\n    return this._$focusedCell || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0);\n  }\n\n  _getAllFocusedCells() {\n    return this._selectedCells || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0);\n  }\n\n  _getCellFromNextRow(direction) {\n    var $currentCell = this._$focusedCell;\n\n    if (isDefined($currentCell)) {\n      var cellIndex = $currentCell.index();\n      var $row = $currentCell.parent();\n      var $cell = $row[direction]().children().eq(cellIndex);\n      $cell = this._checkForViewBounds($cell);\n      return $cell;\n    }\n  }\n\n  _checkForViewBounds($item) {\n    if (!$item.length) {\n      $item = this._$focusedCell;\n    }\n\n    return $item;\n  }\n\n  _getCellFromNextColumn(direction, isMultiSelection) {\n    var $focusedCell = this._$focusedCell;\n\n    if (!isDefined($focusedCell)) {\n      return;\n    }\n\n    var $nextCell;\n    var $row = $focusedCell.parent();\n    var nextColumnDirection = direction;\n    var isDirectionNext = \"next\" === direction;\n    var previousColumnDirection = isDirectionNext ? \"prev\" : \"next\";\n\n    var isRTL = this._isRTL();\n\n    var groupCount = this._getGroupCount();\n\n    var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\n\n    var isGroupedByDate = this.isGroupedByDate();\n\n    var totalCellCount = this._getTotalCellCount(groupCount);\n\n    var rowCellCount = isMultiSelection && !isGroupedByDate ? this._getCellCount() : totalCellCount;\n    var lastIndexInRow = rowCellCount - 1;\n    var currentIndex = $focusedCell.index();\n    var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\n\n    var isEdgeCell = this._isEdgeCell(isHorizontalGrouping ? totalCellCount - 1 : lastIndexInRow, currentIndex, step, direction);\n\n    var sign = isRTL ? 1 : -1;\n    var directionSign = isDirectionNext ? 1 : -1;\n    var resultingSign = sign * directionSign;\n\n    if (isEdgeCell || isMultiSelection && this._isGroupEndCell($focusedCell, direction)) {\n      var nextIndex = currentIndex - resultingSign * step + resultingSign * rowCellCount;\n      var rowDirection = isRTL ? previousColumnDirection : nextColumnDirection;\n      $nextCell = $row[rowDirection]().children().eq(nextIndex);\n      $nextCell = this._checkForViewBounds($nextCell);\n    } else {\n      $nextCell = $row.children().eq(currentIndex - resultingSign * step);\n    }\n\n    return $nextCell;\n  }\n\n  _isEdgeCell(lastIndexInRow, cellIndex, step, direction) {\n    var isRTL = this._isRTL();\n\n    var isDirectionNext = \"next\" === direction;\n    var rightEdgeCellIndex = isRTL ? 0 : lastIndexInRow;\n    var leftEdgeCellIndex = isRTL ? lastIndexInRow : 0;\n    var edgeCellIndex = isDirectionNext ? rightEdgeCellIndex : leftEdgeCellIndex;\n    var isNextCellGreaterThanEdge = cellIndex + step > edgeCellIndex;\n    var isNextCellLessThanEdge = cellIndex - step < edgeCellIndex;\n    var isRightEdgeCell = isRTL ? isNextCellLessThanEdge : isNextCellGreaterThanEdge;\n    var isLeftEdgeCell = isRTL ? isNextCellGreaterThanEdge : isNextCellLessThanEdge;\n    return isDirectionNext ? isRightEdgeCell : isLeftEdgeCell;\n  }\n\n  _isGroupEndCell($cell, direction) {\n    if (this.isGroupedByDate()) {\n      return false;\n    }\n\n    var isDirectionNext = \"next\" === direction;\n\n    var cellsInRow = this._getCellCount();\n\n    var currentCellIndex = $cell.index();\n    var result = currentCellIndex % cellsInRow;\n    var endCell = isDirectionNext ? cellsInRow - 1 : 0;\n    var startCell = isDirectionNext ? 0 : cellsInRow - 1;\n    return this._isRTL() ? result === startCell : result === endCell;\n  }\n\n  _moveToCell($cell, isMultiSelection) {\n    isMultiSelection = isMultiSelection && this.option(\"allowMultipleCellSelection\");\n\n    this._setSelectedAndFocusedCells($cell, isMultiSelection);\n\n    this._dateTableScrollable.scrollToElement($cell);\n  }\n\n  _setSelectedAndFocusedCells($cell, isMultiSelection) {\n    if (!isDefined($cell) || !$cell.length) {\n      return;\n    }\n\n    var updateViewData = this.isVirtualScrolling();\n    var $correctedCell = $cell;\n\n    if (isMultiSelection) {\n      $correctedCell = this._correctCellForGroup($cell);\n    }\n\n    if ($correctedCell.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n      return;\n    }\n\n    this._setSelectedCells($correctedCell, isMultiSelection);\n\n    this._setFocusedCell($correctedCell, updateViewData);\n  }\n\n  _setFocusedCell($cell) {\n    var updateViewData = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n\n    this._releaseFocusedCell();\n\n    var $correctedCell = $cell;\n\n    if (updateViewData) {\n      var {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      } = this._getCoordinatesByCell($cell);\n\n      var isAllDayCell = this._hasAllDayClass($cell);\n\n      this.virtualSelectionState.setFocusedCell(rowIndex, columnIndex, isAllDayCell);\n      var focusedCell = this.virtualSelectionState.getFocusedCell();\n      var {\n        cellData: cellData,\n        coordinates: coordinates\n      } = focusedCell;\n      var {\n        allDay: allDay\n      } = cellData;\n      $correctedCell = allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\n    }\n\n    this._toggleFocusedCellClass(true, $correctedCell);\n\n    this._$focusedCell = $correctedCell;\n  }\n\n  _setSelectedCells($firstCell, isMultiSelection) {\n    this._releaseSelectedCells();\n\n    this._selectedCells = [];\n\n    if (this.isVirtualScrolling()) {\n      this._setSelectedCellsInVirtualMode($firstCell, isMultiSelection);\n    } else {\n      this._setSelectedCellsInStandardMode($firstCell, isMultiSelection);\n    }\n\n    var $selectedCells = $(this._selectedCells);\n\n    this._toggleFocusClass(true, $selectedCells);\n\n    this.setAria(\"label\", \"Add appointment\", $selectedCells);\n    var selectedCellData = this.getSelectedCellData().map(_ref => {\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groups: groups,\n        groupIndex: groupIndex\n      } = _ref;\n      return {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groups: groups,\n        groupIndex: groupIndex || 0\n      };\n    });\n    this.option(\"selectedCellData\", selectedCellData);\n\n    this._selectionChangedAction({\n      selectedCellData: selectedCellData\n    });\n  }\n\n  _setSelectedCellsInStandardMode($firstCell, isMultiSelection) {\n    if (isMultiSelection) {\n      var $previousCell = this._$prevCell;\n      var orientation = \"day\" === this.option(\"type\") && (!this.option(\"groups\").length || \"vertical\" === this.option(\"groupOrientation\")) ? \"vertical\" : \"horizontal\";\n\n      var $targetCells = this._getCellsBetween($firstCell, $previousCell, orientation);\n\n      this._selectedCells = $targetCells.toArray();\n    } else {\n      this._selectedCells = [$firstCell.get(0)];\n      this._$prevCell = $firstCell;\n    }\n  }\n\n  _setSelectedCellsInVirtualMode($firstCell, isMultiSelection) {\n    if (isMultiSelection) {\n      var {\n        rowIndex: firstRow,\n        columnIndex: firstColumn\n      } = this._getCoordinatesByCell($firstCell);\n\n      var isFirstAllDay = this._hasAllDayClass($firstCell);\n\n      var firstCell = {\n        rowIndex: firstRow,\n        columnIndex: firstColumn,\n        allDay: isFirstAllDay\n      };\n      this.virtualSelectionState.setSelectedCells(firstCell);\n    } else {\n      this._selectedCells = [$firstCell.get(0)];\n      this._$prevCell = $firstCell;\n\n      var {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      } = this._getCoordinatesByCell($firstCell);\n\n      var isAllDayCell = this._hasAllDayClass($firstCell);\n\n      var _firstCell = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        allDay: isAllDayCell\n      };\n      this.virtualSelectionState.setSelectedCells(_firstCell, _firstCell);\n    }\n\n    this._setSelectedCellsByCellData(this.virtualSelectionState.getSelectedCells());\n  }\n\n  _correctCellForGroup($cell) {\n    if (this.isVirtualScrolling()) {\n      var isVirtualCell = $cell.hasClass(VIRTUAL_CELL_CLASS);\n\n      if (isVirtualCell) {\n        return this._$focusedCell;\n      }\n\n      var cellData = this.getCellData($cell);\n      var isValidFocusedCell = this.virtualSelectionState.isValidFocusedCell(cellData);\n      return isValidFocusedCell ? $cell : this._$focusedCell;\n    }\n\n    var $focusedCell = this._$focusedCell;\n\n    var cellGroupIndex = this._getGroupIndexByCell($cell);\n\n    var focusedCellGroupIndex = this._getGroupIndexByCell($focusedCell);\n\n    var isDifferentTables = this._hasAllDayClass($cell) !== this._hasAllDayClass($focusedCell);\n\n    return focusedCellGroupIndex !== cellGroupIndex || isDifferentTables ? $focusedCell : $cell;\n  }\n\n  _getCellsBetween($first, $last, direction) {\n    var isAllDayTable = this._hasAllDayClass($last);\n\n    var $cells = this._getCells(isAllDayTable, direction);\n\n    var firstIndex = $cells.index($first);\n    var lastIndex = $cells.index($last);\n\n    if (firstIndex > lastIndex) {\n      var buffer = firstIndex;\n      firstIndex = lastIndex;\n      lastIndex = buffer;\n    }\n\n    $cells = $cells.slice(firstIndex, lastIndex + 1);\n\n    if (this._getGroupCount() > 1) {\n      var result = [];\n\n      var focusedGroupIndex = this._getGroupIndexByCell($first);\n\n      each($cells, function (_, cell) {\n        var groupIndex = this._getGroupIndexByCell($(cell));\n\n        if (focusedGroupIndex === groupIndex) {\n          result.push(cell);\n        }\n      }.bind(this));\n      $cells = $(result);\n    }\n\n    return $cells;\n  }\n\n  _hasAllDayClass($cell) {\n    return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n  }\n\n  _getGroupIndexByCell($cell) {\n    if (this.isVirtualScrolling()) {\n      var {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      } = this._getCoordinatesByCell($cell);\n\n      var isAllDayCell = $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n      return this.viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell).groupIndex;\n    }\n\n    return this._groupedStrategy.getGroupIndexByCell($cell);\n  }\n\n  _toggleFocusedCellClass(isFocused, $element) {\n    var $focusTarget = $element && $element.length ? $element : this._focusTarget();\n    $focusTarget.toggleClass(DATE_TABLE_FOCUSED_CELL_CLASS, isFocused);\n  }\n\n  _releaseSelectedAndFocusedCells() {\n    this._releaseFocusedCell();\n\n    this._releaseSelectedCells();\n\n    this.option(\"selectedCellData\", []);\n  }\n\n  _releaseFocusedCell() {\n    var $cell = this._$focusedCell;\n\n    if (isDefined($cell) && $cell.length) {\n      this._toggleFocusedCellClass(false, $cell);\n\n      this.setAria(\"label\", void 0, $cell);\n    }\n  }\n\n  _releaseSelectedCells() {\n    var $cells = $(this._selectedCells);\n\n    if (isDefined($cells) && $cells.length) {\n      this._toggleFocusClass(false, $cells);\n\n      this.setAria(\"label\", void 0, $cells);\n    }\n  }\n\n  _focusInHandler(e) {\n    if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\n      delete this._isCellClick;\n      delete this._contextMenuHandled;\n\n      super._focusInHandler.apply(this, arguments);\n\n      var $cell = this._getFocusedCell();\n\n      this._setSelectedAndFocusedCells($cell);\n    }\n  }\n\n  _focusOutHandler() {\n    super._focusOutHandler.apply(this, arguments);\n\n    if (!this._contextMenuHandled) {\n      var _this$virtualSelectio;\n\n      this._releaseSelectedAndFocusedCells();\n\n      null === (_this$virtualSelectio = this.virtualSelectionState) || void 0 === _this$virtualSelectio ? void 0 : _this$virtualSelectio.releaseSelectedAndFocusedCells();\n    }\n  }\n\n  _focusTarget() {\n    return this.$element();\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      currentDate: new Date(),\n      intervalCount: 1,\n      startDate: null,\n      firstDayOfWeek: void 0,\n      startDayHour: 0,\n      endDayHour: 24,\n      hoursInterval: .5,\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      groups: [],\n      showAllDayPanel: true,\n      allDayExpanded: false,\n      onCellClick: null,\n      crossScrollingEnabled: false,\n      dataCellTemplate: null,\n      timeCellTemplate: null,\n      resourceCellTemplate: null,\n      dateCellTemplate: null,\n      allowMultipleCellSelection: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true,\n      groupOrientation: \"horizontal\",\n      selectedCellData: [],\n      groupByDate: false,\n      scrolling: {\n        mode: \"standard\"\n      },\n      renovateRender: true,\n      height: void 0,\n      draggingMode: \"outlook\"\n    });\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"startDayHour\":\n      case \"endDayHour\":\n        this.invoke(\"validateDayHours\");\n\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"dateCellTemplate\":\n      case \"resourceCellTemplate\":\n      case \"dataCellTemplate\":\n      case \"timeCellTemplate\":\n      case \"hoursInterval\":\n      case \"firstDayOfWeek\":\n      case \"currentDate\":\n      case \"startDate\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"groups\":\n        this._cleanView();\n\n        this._removeAllDayElements();\n\n        this._initGrouping();\n\n        this.repaint();\n        break;\n\n      case \"groupOrientation\":\n        this._initGroupedStrategy();\n\n        this._createAllDayPanelElements();\n\n        this._removeAllDayElements();\n\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"showAllDayPanel\":\n        if (this._isVerticalGroupedWorkSpace()) {\n          this._cleanView();\n\n          this._removeAllDayElements();\n\n          this._initGrouping();\n\n          this.repaint();\n        } else if (!this.isRenovatedRender()) {\n          this._toggleAllDayVisibility(true);\n        } else {\n          this.renderRWorkspace();\n        }\n\n        break;\n\n      case \"allDayExpanded\":\n        this._changeAllDayVisibility();\n\n        this._attachTablesEvents();\n\n        this.headerPanelOffsetRecalculate();\n\n        this._updateScrollable();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"onCellContextMenu\":\n        this._attachContextMenuEvent();\n\n        break;\n\n      case \"intervalCount\":\n        this._cleanWorkSpace();\n\n        this._toggleWorkSpaceCountClass();\n\n        this._toggleFixedScrollableClass();\n\n        break;\n\n      case \"groupByDate\":\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this._toggleHorizontalScrollClass();\n\n        this._dateTableScrollable.option(this._dateTableScrollableConfig());\n\n        break;\n\n      case \"width\":\n        super._optionChanged(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"allowMultipleCellSelection\":\n      case \"selectedCellData\":\n        break;\n\n      case \"scrolling\":\n        if (this._isVirtualModeOn()) {\n          if (!this.option(\"renovateRender\")) {\n            this.option(\"renovateRender\", true);\n          } else {\n            this.repaint();\n          }\n        } else {\n          this.option(\"renovateRender\", false);\n        }\n\n        break;\n\n      case \"renovateRender\":\n        this.repaint();\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _cleanWorkSpace() {\n    var _this$virtualScrollin2;\n\n    this._cleanView();\n\n    this._toggleGroupedClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    null === (_this$virtualScrollin2 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin2 ? void 0 : _this$virtualScrollin2.updateDimensions(true);\n\n    this._renderView();\n\n    this.option(\"crossScrollingEnabled\") && this._setTableSizes();\n    this.cache.clear();\n  }\n\n  _init() {\n    this._headerSemaphore = new ScrollSemaphore();\n    this._sideBarSemaphore = new ScrollSemaphore();\n    this._dataTableSemaphore = new ScrollSemaphore();\n    this._viewDataProvider = null;\n    this._virtualSelectionState = null;\n    this._activeStateUnit = CELL_SELECTOR;\n    this._maxAllowedVerticalPosition = [];\n    this._maxAllowedPosition = [];\n\n    super._init();\n\n    this._initGrouping();\n\n    this._toggleHorizontalScrollClass();\n\n    this._toggleWorkSpaceCountClass();\n\n    this._toggleGroupByDateClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass());\n  }\n\n  _initGrouping() {\n    this._initGroupedStrategy();\n\n    this._toggleGroupingDirectionClass();\n\n    this._toggleGroupByDateClass();\n  }\n\n  _initGroupedStrategy() {\n    var strategyName = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    var Strategy = \"vertical\" === strategyName ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\n    this._groupedStrategy = new Strategy(this);\n  }\n\n  _getDefaultGroupStrategy() {\n    return \"horizontal\";\n  }\n\n  _isVerticalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\");\n  }\n\n  _isHorizontalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\");\n  }\n\n  _toggleHorizontalScrollClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"));\n  }\n\n  _toggleGroupByDateClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate());\n  }\n\n  _toggleWorkSpaceCountClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount());\n  }\n\n  _isWorkSpaceWithCount() {\n    return this.option(\"intervalCount\") > 1;\n  }\n\n  _toggleWorkSpaceWithOddCells() {\n    this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells());\n  }\n\n  _isWorkspaceWithOddCells() {\n    return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling();\n  }\n\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace());\n  }\n\n  _getRealGroupOrientation() {\n    return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\";\n  }\n\n  _getTimePanelClass() {\n    return TIME_PANEL_CLASS;\n  }\n\n  _getDateTableClass() {\n    return DATE_TABLE_CLASS;\n  }\n\n  _getDateTableRowClass() {\n    return DATE_TABLE_ROW_CLASS;\n  }\n\n  _getDateTableCellClass(i, j) {\n    var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._needApplyLastGroupCellClass() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1, i, j) : cellClass;\n  }\n\n  _needApplyLastGroupCellClass() {\n    return true;\n  }\n\n  _getGroupRowClass() {\n    return GROUP_ROW_CLASS;\n  }\n\n  _getGroupHeaderClass(i) {\n    var cellClass = GROUP_HEADER_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1);\n  }\n\n  _getGroupHeaderContentClass() {\n    return GROUP_HEADER_CONTENT_CLASS;\n  }\n\n  _initWorkSpaceUnits() {\n    this._$headerPanel = $(\"<table>\");\n    this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\n    this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\n    this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\n\n    this._initAllDayPanelElements();\n\n    if (this.isRenovatedRender()) {\n      this.createRAllDayPanelElements();\n    } else {\n      this._createAllDayPanelElements();\n    }\n\n    this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\n    this._$dateTable = $(\"<table>\");\n    this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS);\n  }\n\n  _initAllDayPanelElements() {\n    this._allDayTitles = [];\n    this._allDayTables = [];\n    this._allDayPanels = [];\n  }\n\n  createRAllDayPanelElements() {\n    this._$allDayPanel = $(\"<div>\");\n    this._$allDayTitle = $(\"<div>\").appendTo(this.$element());\n  }\n\n  _createAllDayPanelElements() {\n    var groupCount = this._getGroupCount();\n\n    if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\n      for (var i = 0; i < groupCount; i++) {\n        var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\n\n        this._allDayTitles.push($allDayTitle);\n\n        this._$allDayTable = $(\"<table>\");\n\n        this._allDayTables.push(this._$allDayTable);\n\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n\n        this._allDayPanels.push(this._$allDayPanel);\n      }\n    } else {\n      this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\n      this._$allDayTable = $(\"<table>\");\n      this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n    }\n  }\n\n  _initDateTableScrollable() {\n    var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\n    this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\n  }\n\n  _dateTableScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      bounceEnabled: false,\n      updateManually: true\n    };\n\n    if (this._needCreateCrossScrolling()) {\n      config = extend(config, this._createCrossScrollingConfig());\n    }\n\n    return config;\n  }\n\n  _createCrossScrollingConfig() {\n    var config = {};\n    config.direction = \"both\";\n\n    config.onScroll = e => {\n      this._dataTableSemaphore.take();\n\n      this._sideBarSemaphore.isFree() && this._sidebarScrollable && this._sidebarScrollable.scrollTo({\n        top: e.scrollOffset.top\n      });\n      this._headerSemaphore.isFree() && this._headerScrollable && this._headerScrollable.scrollTo({\n        left: e.scrollOffset.left\n      });\n\n      this._dataTableSemaphore.release();\n    };\n\n    config.onEnd = () => {\n      this.notifyObserver(\"updateResizableArea\", {});\n    };\n\n    return config;\n  }\n\n  _createWorkSpaceElements() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this._createWorkSpaceStaticElements();\n    }\n  }\n\n  _createWorkSpaceStaticElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._dateTableScrollable.$content().append(this._$allDayContainer, this._$groupTable, this._$timePanel, this._$dateTable);\n\n      this.$element().append(this._$fixedContainer, this._$headerPanel, this._dateTableScrollable.$element());\n    } else {\n      this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\n\n      this.$element().append(this._$fixedContainer, this._$headerPanel, this._$allDayContainer, this._$allDayPanel, this._dateTableScrollable.$element());\n    }\n  }\n\n  _createWorkSpaceScrollableElements() {\n    this.$element().append(this._$fixedContainer);\n\n    this._createHeaderScrollable();\n\n    this._createSidebarScrollable();\n\n    this.$element().append(this._dateTableScrollable.$element());\n\n    this._headerScrollable.$content().append(this._$headerPanel);\n\n    this._dateTableScrollable.$content().append(this._$dateTable);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._dateTableScrollable.$content().prepend(this._$allDayContainer);\n\n      this._sidebarScrollable.$content().append(this._$groupTable, this._$timePanel);\n    } else {\n      this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel);\n    }\n\n    this._sidebarScrollable.$content().append(this._$timePanel);\n  }\n\n  _createHeaderScrollable() {\n    var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this.$element());\n    this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\n  }\n\n  _headerScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"horizontal\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._headerSemaphore.take();\n\n        this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\n          left: e.scrollOffset.left\n        });\n\n        this._headerSemaphore.release();\n      }\n    };\n    return config;\n  }\n\n  _createSidebarScrollable() {\n    var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this.$element());\n    this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"vertical\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._sideBarSemaphore.take();\n\n        this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\n          top: e.scrollOffset.top\n        });\n\n        this._sideBarSemaphore.release();\n      }\n    });\n  }\n\n  _visibilityChanged(visible) {\n    this.cache.clear();\n\n    if (visible) {\n      this._updateGroupTableHeight();\n    }\n\n    if (visible && this._needCreateCrossScrolling()) {\n      this._setTableSizes();\n    }\n  }\n\n  _attachTableClasses() {\n    this._addTableClass(this._$dateTable, this._getDateTableClass());\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS);\n      }\n    } else {\n      this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS);\n    }\n  }\n\n  _attachHeaderTableClasses() {\n    this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS);\n  }\n\n  _addTableClass($el, className) {\n    $el && !$el.hasClass(className) && $el.addClass(className);\n  }\n\n  _setTableSizes() {\n    this._attachTableClasses();\n\n    var cellWidth = this.getCellWidth();\n\n    if (cellWidth < this.getCellMinWidth()) {\n      cellWidth = this.getCellMinWidth();\n    }\n\n    var minWidth = this.getWorkSpaceMinWidth();\n\n    var groupCount = this._getGroupCount();\n\n    var totalCellCount = this._getTotalCellCount(groupCount);\n\n    var width = cellWidth * totalCellCount;\n\n    if (width < minWidth) {\n      width = minWidth;\n    }\n\n    this._$headerPanel.width(width);\n\n    this._$dateTable.width(width);\n\n    this._$allDayTable && this._$allDayTable.width(width);\n\n    this._attachHeaderTableClasses();\n\n    this._updateGroupTableHeight();\n\n    this._updateScrollable();\n  }\n\n  getWorkSpaceMinWidth() {\n    return this._groupedStrategy.getWorkSpaceMinWidth();\n  }\n\n  _dimensionChanged() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._setTableSizes();\n    }\n\n    this.headerPanelOffsetRecalculate();\n    this.cache.clear();\n\n    this._cleanAllowedPositions();\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\");\n  }\n\n  _getElementClass() {\n    return noop();\n  }\n\n  _getRowCount() {\n    return noop();\n  }\n\n  _getRowCountWithAllDayRows() {\n    var allDayRowCount = this._isShowAllDayPanel() ? 1 : 0;\n    return this._getRowCount() + allDayRowCount;\n  }\n\n  _getCellCount() {\n    return noop();\n  }\n\n  _initMarkup() {\n    this.cache.clear();\n\n    this._initWorkSpaceUnits();\n\n    this._initDateTableScrollable();\n\n    this._createWorkSpaceElements();\n\n    this._initVirtualScrolling();\n\n    super._initMarkup();\n\n    if (!this.option(\"crossScrollingEnabled\")) {\n      this._attachTableClasses();\n\n      this._attachHeaderTableClasses();\n    }\n\n    this._toggleGroupedClass();\n\n    this._toggleFixedScrollableClass();\n\n    this._renderView();\n\n    this._attachEvents();\n\n    this._setFocusOnCellByOption(this.option(\"selectedCellData\"));\n  }\n\n  isRenovatedRender() {\n    return this.renovatedRenderSupported() && this.option(\"renovateRender\");\n  }\n\n  _isVirtualModeOn() {\n    return \"virtual\" === this.option(\"scrolling.mode\");\n  }\n\n  isVirtualScrolling() {\n    return this.isRenovatedRender() && this._isVirtualModeOn();\n  }\n\n  _initVirtualScrolling() {\n    if (this.virtualScrollingDispatcher) {\n      this.virtualScrollingDispatcher.dispose();\n      this.virtualScrollingDispatcher = null;\n    }\n\n    if (this.isVirtualScrolling()) {\n      this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this);\n    }\n  }\n\n  _render() {\n    super._render();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  }\n\n  _toggleGroupedClass() {\n    this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0);\n  }\n\n  _toggleFixedScrollableClass() {\n    return noop();\n  }\n\n  _renderView() {\n    this._setFirstViewDate();\n\n    if (this.isRenovatedRender()) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this.renderRGroupPanel();\n      }\n    } else {\n      this._applyCellTemplates(this._renderGroupHeader());\n    }\n\n    if (this.isRenovatedRender()) {\n      this.renderRWorkspace();\n    } else {\n      this._renderDateHeader();\n\n      this._renderTimePanel();\n\n      this._renderGroupAllDayPanel();\n\n      this._renderDateTable();\n\n      this._renderAllDayPanel();\n    }\n\n    this._updateGroupTableHeight();\n\n    this._shader = new VerticalShader(this);\n  }\n\n  onDataSourceChanged() {}\n\n  preRenderAppointments(options) {\n    this.option(\"allDayExpanded\", options.allDayExpanded);\n  }\n\n  isGroupedAllDayPanel() {\n    return this._isShowAllDayPanel() && this._isVerticalGroupedWorkSpace();\n  }\n\n  generateRenderOptions(isProvideVirtualCellsWidth) {\n    var _this$_getToday;\n\n    var groupCount = this._getGroupCount();\n\n    var verticalGroupCount = !this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\n    var horizontalGroupCount = this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\n    var allDayElements = this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0;\n\n    var rowCountInGroup = this._getRowCount();\n\n    var cellCount = this._getTotalCellCount(groupCount);\n\n    var rowCount = this._getTotalRowCount(groupCount, this._isVerticalGroupedWorkSpace());\n\n    var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    var options = {\n      horizontalGroupCount: horizontalGroupCount,\n      verticalGroupCount: verticalGroupCount,\n      rowCountInGroup: rowCountInGroup,\n      cellCount: cellCount,\n      cellCountInGroupRow: this._getCellCount(),\n      cellDataGetters: [this._getCellData.bind(this)],\n      allDayElements: allDayElements,\n      startRowIndex: 0,\n      startCellIndex: 0,\n      groupOrientation: groupOrientation,\n      rowCount: rowCount,\n      totalRowCount: rowCount,\n      totalCellCount: cellCount,\n      groupCount: groupCount,\n      getDateHeaderText: this._getHeaderText.bind(this),\n      getDateHeaderDate: this._getDateByIndex.bind(this),\n      getTimeCellDate: this._getTimeCellDate.bind(this),\n      today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\n      groupByDate: this.isGroupedByDate(),\n      groupsList: this._getAllGroups(),\n      isHorizontalGrouping: this._isHorizontalGroupedWorkSpace(),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth\n    };\n\n    if (this.isVirtualScrolling()) {\n      extend(options, this.virtualScrollingDispatcher.getRenderState());\n    }\n\n    return options;\n  }\n\n  renovatedRenderSupported() {\n    return false;\n  }\n\n  renderRWorkspace() {\n    var _this$virtualScrollin3;\n\n    var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n    this._cleanAllowedPositions();\n\n    this.viewDataProvider.update(isGenerateNewViewData);\n    this.renderRHeaderPanel();\n    this.renderRTimeTable();\n    this.renderRDateTable();\n    this.renderRAllDayPanel();\n    this.updateRSelection();\n    null === (_this$virtualScrollin3 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin3 ? void 0 : _this$virtualScrollin3.updateDimensions();\n  }\n\n  renderRDateTable() {\n    this.renderRComponent(this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  renderRGroupPanel() {\n    var options = {\n      groups: this.option(\"groups\"),\n      groupOrientation: this.option(\"groupOrientation\"),\n      groupByDate: this.isGroupedByDate(),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      className: this.verticalGroupTableClass,\n      baseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\n      columnCountPerGroup: this._getCellCount()\n    };\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountAttr();\n\n      this.renderRComponent(this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options);\n    } else {\n      this._detachGroupCountAttr();\n    }\n  }\n\n  renderRAllDayPanel() {\n    var visible = this._isShowAllDayPanel() && !this.isGroupedAllDayPanel();\n\n    if (this.supportAllDayRow() && !this._isVerticalGroupedWorkSpace()) {\n      this._toggleAllDayVisibility(false);\n\n      var groupCount = this._getGroupCount();\n\n      var cellCount = this._getTotalCellCount(groupCount);\n\n      var options = {\n        viewData: this.viewDataProvider.viewData,\n        visible: visible,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        startCellIndex: 0,\n        cellCount: cellCount\n      };\n\n      if (this.isVirtualScrolling()) {\n        var {\n          horizontalVirtualScrolling: horizontalVirtualScrolling\n        } = this.virtualScrollingDispatcher;\n        var renderState = null === horizontalVirtualScrolling || void 0 === horizontalVirtualScrolling ? void 0 : horizontalVirtualScrolling.getRenderState();\n        extend(options, _extends({}, renderState));\n      }\n\n      this.renderRComponent(this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\n      this.renderRComponent(this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {\n        visible: visible\n      });\n      this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS));\n    }\n\n    this._toggleAllDayVisibility(true);\n  }\n\n  renderRTimeTable() {\n    this.renderRComponent(this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\n      timePanelData: this.viewDataProvider.timePanelData,\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groupOrientation: this.option(\"groupOrientation\")\n    });\n  }\n\n  renderRHeaderPanel() {\n    var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountAttr();\n    } else {\n      this._detachGroupCountAttr();\n    }\n\n    this.renderRComponent(this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\n      dateHeaderData: this.viewDataProvider.dateHeaderData,\n      dateCellTemplate: this.option(\"dateCellTemplate\"),\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groups: this.option(\"groups\"),\n      groupByDate: this.isGroupedByDate(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      className: this.verticalGroupTableClass,\n      groupPanelCellBaseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\n      columnCountPerGroup: this._getCellCount(),\n      isRenderDateHeader: isRenderDateHeader\n    });\n  }\n\n  renderRComponent(parentElement, componentClass, componentName, viewModel) {\n    var component = this[componentName];\n\n    if (!component) {\n      var container = getPublicElement(parentElement);\n      component = this._createComponent(container, componentClass, _extends({}, viewModel, {\n        groupOrientation: this.option(\"groupOrientation\")\n      }));\n      this[componentName] = component;\n    } else {\n      component.option(viewModel);\n    }\n  }\n\n  updateRSelection() {\n    var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n    var focusedCell = this.virtualSelectionState.getFocusedCell();\n    var selectedCells = this.virtualSelectionState.getSelectedCells();\n\n    if (null !== focusedCell && void 0 !== focusedCell && focusedCell.coordinates) {\n      var {\n        coordinates: coordinates,\n        cellData: cellData\n      } = focusedCell;\n      var $cell = !isVerticalGrouping && cellData.allDay ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\n      $cell && this._setFocusedCell($cell);\n    }\n\n    selectedCells && this._setSelectedCellsByCellData(selectedCells);\n  }\n\n  _updateGroupTableHeight() {\n    if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      this._setHorizontalGroupHeaderCellsHeight();\n    }\n  }\n\n  _renderDateTimeIndication() {\n    return noop();\n  }\n\n  _setIndicationUpdateInterval() {\n    return noop();\n  }\n\n  _refreshDateTimeIndication() {\n    return noop();\n  }\n\n  _setFocusOnCellByOption(data) {\n    this._releaseSelectedAndFocusedCells();\n\n    this._setSelectedCellsByCellData(data);\n  }\n\n  _setSelectedCellsByCellData(data) {\n    var _data$;\n\n    var cells = [];\n\n    var $cells = this._getAllCells(null === data || void 0 === data ? void 0 : null === (_data$ = data[0]) || void 0 === _data$ ? void 0 : _data$.allDay);\n\n    var cellsInRow = this._getTotalCellCount(this._getGroupCount());\n\n    if (this.isVirtualScrolling()) {\n      var renderState = this.virtualScrollingDispatcher.getRenderState();\n      cellsInRow = renderState.cellCount || cellsInRow;\n    }\n\n    data.forEach(cellData => {\n      var {\n        groups: groups,\n        startDate: startDate,\n        allDay: allDay,\n        index: index\n      } = cellData;\n      var {\n        groupIndex: groupIndex\n      } = cellData;\n\n      if (!groupIndex) {\n        groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n      }\n\n      var coordinates = this.isVirtualScrolling() ? this.viewDataProvider.findCellPositionInMap({\n        groupIndex: groupIndex,\n        startDate: startDate,\n        isAllDay: allDay,\n        index: index\n      }) : this.getCoordinatesByDate(startDate, groupIndex, allDay);\n\n      if (coordinates) {\n        var {\n          rowIndex: rowIndex,\n          cellIndex: cellIndex\n        } = coordinates;\n\n        var _index = rowIndex * cellsInRow + cellIndex;\n\n        var $cell = $cells[_index];\n\n        if (isDefined($cell)) {\n          this._toggleFocusClass(true, $($cell));\n\n          cells.push($cell);\n        }\n      }\n    });\n    this._selectedCells = cells;\n  }\n\n  _isGroupsSpecified(resources) {\n    return this.option(\"groups\").length && resources;\n  }\n\n  _getGroupIndexByResourceId(id) {\n    var groups = this.option(\"groups\");\n    var resourceTree = this.invoke(\"createResourcesTree\", groups);\n\n    if (!resourceTree.length) {\n      return 0;\n    }\n\n    return this._getGroupIndexRecursively(resourceTree, id);\n  }\n\n  _getGroupIndexRecursively(resourceTree, id) {\n    var currentKey = resourceTree[0].name;\n    var currentValue = id[currentKey];\n    return resourceTree.reduce((prevIndex, _ref2) => {\n      var {\n        leafIndex: leafIndex,\n        value: value,\n        children: children\n      } = _ref2;\n      var areValuesEqual = currentValue === value;\n\n      if (areValuesEqual && void 0 !== leafIndex) {\n        return leafIndex;\n      }\n\n      if (areValuesEqual) {\n        return this._getGroupIndexRecursively(children, id);\n      }\n\n      return prevIndex;\n    }, 0);\n  }\n\n  _getCalculatedFirstDayOfWeek() {\n    var firstDayOfWeekOption = this._firstDayOfWeek();\n\n    var firstDayOfWeek = isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\n    return firstDayOfWeek;\n  }\n\n  _setFirstViewDate() {\n    var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n    this._firstViewDate = dateUtils.getFirstWeekDate(this._getViewStartByOptions(), firstDayOfWeek);\n\n    this._setStartDayHour(this._firstViewDate);\n  }\n\n  _getViewStartByOptions() {\n    if (!this.option(\"startDate\")) {\n      return this.option(\"currentDate\");\n    } else {\n      var startDate = dateUtils.trimTime(this._getStartViewDate());\n      var currentDate = this.option(\"currentDate\");\n      var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n      var endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\n\n      while (!isDateInRange(currentDate, startDate, endDate, diff)) {\n        startDate = endDate;\n        endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\n      }\n\n      return diff > 0 ? startDate : endDate;\n    }\n  }\n\n  _getHeaderDate() {\n    return this.getStartViewDate();\n  }\n\n  _getStartViewDate() {\n    return this.option(\"startDate\");\n  }\n\n  _getIntervalDuration() {\n    return toMs(\"day\") * this.option(\"intervalCount\");\n  }\n\n  _setStartDayHour(date) {\n    var startDayHour = this.option(\"startDayHour\");\n\n    if (isDefined(startDayHour)) {\n      date.setHours(startDayHour, startDayHour % 1 * 60, 0, 0);\n    }\n  }\n\n  _firstDayOfWeek() {\n    return this.option(\"firstDayOfWeek\");\n  }\n\n  _attachEvents() {\n    this._createSelectionChangedAction();\n\n    this._attachClickEvent();\n\n    this._attachContextMenuEvent();\n  }\n\n  _attachClickEvent() {\n    var that = this;\n\n    var pointerDownAction = this._createAction(function (e) {\n      that._pointerDownHandler(e.event);\n    });\n\n    this._createCellClickAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\n    eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, function (e) {\n      if (isMouseEvent(e) && e.which > 1) {\n        e.preventDefault();\n        return;\n      }\n\n      pointerDownAction({\n        event: e\n      });\n    });\n    eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, function (e) {\n      var $cell = $(e.target);\n\n      that._cellClickAction({\n        event: e,\n        cellElement: getPublicElement($cell),\n        cellData: that.getCellData($cell)\n      });\n    });\n  }\n\n  _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\", {\n      afterExecute: e => this._cellClickHandler(e.args[0].event)\n    });\n  }\n\n  _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  }\n\n  _cellClickHandler(e) {\n    var $target = $(e.target);\n\n    if (this._showPopup && this._hasFocusClass($target)) {\n      delete this._showPopup;\n\n      this._showAddAppointmentPopup($target);\n    }\n  }\n\n  _pointerDownHandler(e) {\n    var $target = $(e.target);\n\n    if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\n      this._isCellClick = false;\n      return;\n    }\n\n    this._isCellClick = true;\n\n    if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n      this._showPopup = true;\n    } else {\n      this._setSelectedAndFocusedCells($target);\n    }\n  }\n\n  _showAddAppointmentPopup($cell) {\n    var firstCellData = this.getCellData($cell.first());\n    var lastCellData = this.getCellData($cell.last());\n\n    if (this.isVirtualScrolling()) {\n      var selectedCells = this.virtualSelectionState.getSelectedCells();\n      firstCellData = selectedCells[0];\n      lastCellData = selectedCells[selectedCells.length - 1];\n    }\n\n    var result = {\n      startDate: firstCellData.startDate,\n      endDate: lastCellData.endDate\n    };\n\n    if (void 0 !== lastCellData.allDay) {\n      result.allDay = lastCellData.allDay;\n    }\n\n    this.invoke(\"showAddAppointmentPopup\", result, lastCellData.groups);\n  }\n\n  _attachContextMenuEvent() {\n    this._createContextMenuAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    var eventName = addNamespace(contextMenuEventName, this.NAME);\n    eventsEngine.off($element, eventName, cellSelector);\n    eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this));\n  }\n\n  _contextMenuHandler(e) {\n    var $cell = $(e.target);\n\n    this._contextMenuAction({\n      event: e,\n      cellElement: getPublicElement($cell),\n      cellData: this.getCellData($cell)\n    });\n\n    this._contextMenuHandled = true;\n  }\n\n  _createContextMenuAction() {\n    this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\");\n  }\n\n  _getGroupHeaderContainer() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$groupTable;\n    }\n\n    return this._$thead;\n  }\n\n  _getDateHeaderContainer() {\n    return this._$thead;\n  }\n\n  _renderGroupHeader() {\n    var $container = this._getGroupHeaderContainer();\n\n    var groupCount = this._getGroupCount();\n\n    var cellTemplates = [];\n\n    if (groupCount) {\n      var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\n\n      this._attachGroupCountAttr();\n\n      $container.append(groupRows.elements);\n      cellTemplates = groupRows.cellTemplates;\n    } else {\n      this._detachGroupCountAttr();\n    }\n\n    return cellTemplates;\n  }\n\n  _applyCellTemplates(templates) {\n    null === templates || void 0 === templates ? void 0 : templates.forEach(function (template) {\n      template();\n    });\n  }\n\n  _detachGroupCountAttr() {\n    var groupedAttr = this._groupedStrategy.getGroupCountAttr();\n\n    this.$element().removeAttr(groupedAttr.attr);\n  }\n\n  _attachGroupCountAttr() {\n    var groupedAttr = this._groupedStrategy.getGroupCountAttr(this.option(\"groups\"));\n\n    this.$element().attr(groupedAttr.attr, groupedAttr.count);\n  }\n\n  headerPanelOffsetRecalculate() {\n    if (!this.option(\"resourceCellTemplate\") && !this.option(\"dateCellTemplate\")) {\n      return;\n    }\n\n    var headerPanelHeight = this.getHeaderPanelHeight();\n    var headerHeight = this.invoke(\"getHeaderHeight\");\n    var allDayPanelHeight = this.isAllDayPanelVisible ? this._groupedStrategy.getAllDayTableHeight() : 0;\n    headerPanelHeight && this._headerScrollable && this._headerScrollable.$element().height(headerPanelHeight + allDayPanelHeight);\n    headerPanelHeight && this._dateTableScrollable.$element().css({\n      paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\n      marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\n    });\n    headerPanelHeight && this._sidebarScrollable && this._sidebarScrollable.$element().css({\n      paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\n      marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\n    });\n    this._$allDayTitle && this._$allDayTitle.css(\"top\", headerHeight + headerPanelHeight + \"px\");\n  }\n\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupHeaderRowClass: this._getGroupRowClass(),\n      groupRowClass: this._getGroupRowClass(),\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: this._getGroupHeaderContentClass()\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate);\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  }\n\n  _renderDateHeader() {\n    var container = this._getDateHeaderContainer();\n\n    var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\n\n    var count = this._getCellCount();\n\n    var cellTemplate = this._getDateHeaderTemplate();\n\n    var repeatCount = this._getCalculateHeaderCellRepeatCount();\n\n    var templateCallbacks = [];\n    var groupByDate = this.isGroupedByDate();\n\n    if (!groupByDate) {\n      for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\n        for (var cellIndex = 0; cellIndex < count; cellIndex++) {\n          var templateIndex = rowIndex * count + cellIndex;\n\n          this._renderDateHeaderTemplate($headerRow, cellIndex, templateIndex, cellTemplate, templateCallbacks);\n        }\n      }\n\n      container.append($headerRow);\n    } else {\n      var colSpan = groupByDate ? this._getGroupCount() : 1;\n\n      for (var _cellIndex = 0; _cellIndex < count; _cellIndex++) {\n        var _templateIndex = _cellIndex * repeatCount;\n\n        var cellElement = this._renderDateHeaderTemplate($headerRow, _cellIndex, _templateIndex, cellTemplate, templateCallbacks);\n\n        cellElement.attr(\"colSpan\", colSpan);\n      }\n\n      container.prepend($headerRow);\n    }\n\n    this._applyCellTemplates(templateCallbacks);\n\n    return $headerRow;\n  }\n\n  _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\n    var text = this._getHeaderText(panelCellIndex);\n\n    var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\n\n    if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\n      templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\n        model: _extends({\n          text: text,\n          date: this._getDateByIndex(panelCellIndex)\n        }, this._getGroupsForDateHeaderTemplate(templateIndex)),\n        index: templateIndex,\n        container: getPublicElement($cell)\n      }));\n    } else {\n      $cell.text(text);\n    }\n\n    container.append($cell);\n    return $cell;\n  }\n\n  _getGroupsForDateHeaderTemplate(templateIndex) {\n    var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n    var groupIndex;\n    var groups;\n\n    if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\n      groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\n\n      var groupsArray = this._getCellGroups(groupIndex);\n\n      groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n    }\n\n    return {\n      groups: groups,\n      groupIndex: groupIndex\n    };\n  }\n\n  _getHeaderPanelCellClass(i) {\n    var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate());\n  }\n\n  _getCalculateHeaderCellRepeatCount() {\n    return this._groupedStrategy.calculateHeaderCellRepeatCount();\n  }\n\n  _renderAllDayPanel(index) {\n    var cellCount = this._getCellCount();\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      cellCount *= this._getGroupCount() || 1;\n    }\n\n    var cellTemplates = this._renderTableBody({\n      container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\n      rowCount: 1,\n      cellCount: cellCount,\n      cellClass: this._getAllDayPanelCellClass.bind(this),\n      rowClass: ALL_DAY_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: this._getAllDayCellData.bind(this),\n      groupIndex: index\n    }, true);\n\n    this._toggleAllDayVisibility(true);\n\n    this._applyCellTemplates(cellTemplates);\n  }\n\n  _renderGroupAllDayPanel() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._renderAllDayPanel(i);\n      }\n    }\n  }\n\n  _getAllDayPanelCellClass(i, j) {\n    var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1);\n  }\n\n  _getAllDayCellData(cell, rowIndex, cellIndex, groupIndex) {\n    var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\n\n    var cellGroupIndex = groupIndex || this._getGroupIndex(rowIndex, cellIndex);\n\n    startDate = dateUtils.trimTime(startDate);\n    var data = {\n      startDate: startDate,\n      endDate: startDate,\n      allDay: true,\n      groupIndex: cellGroupIndex\n    };\n\n    var groupsArray = this._getCellGroups(cellGroupIndex);\n\n    if (groupsArray.length) {\n      data.groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n    }\n\n    return {\n      key: CELL_DATA,\n      value: data\n    };\n  }\n\n  _toggleAllDayVisibility(isUpdateScrollable) {\n    var showAllDayPanel = this._isShowAllDayPanel();\n\n    this._$allDayPanel.toggle(showAllDayPanel);\n\n    this._$allDayTitle && this._$allDayTitle.toggleClass(ALL_DAY_TITLE_HIDDEN_CLASS, !showAllDayPanel);\n    this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\n\n    this._changeAllDayVisibility();\n\n    isUpdateScrollable && this._updateScrollable();\n  }\n\n  _changeAllDayVisibility() {\n    this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel());\n  }\n\n  _updateScrollable() {\n    this._dateTableScrollable.update();\n\n    this._headerScrollable && this._headerScrollable.update();\n    this._sidebarScrollable && this._sidebarScrollable.update();\n  }\n\n  _renderTimePanel() {\n    var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\n\n    var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\n\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount() * repeatCount,\n      cellCount: 1,\n      cellClass: this._getTimeCellClass.bind(this),\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellTemplate: this.option(\"timeCellTemplate\"),\n      getCellText: (i => {\n        var index = i % this._getRowCount();\n\n        if (index % 2 === 0) {\n          return dateLocalization.format(this._getTimeCellDateCore(startViewDate, i), \"shorttime\");\n        }\n\n        return \"\";\n      }).bind(this),\n      getCellDate: this._getTimeCellDate.bind(this),\n      groupCount: this._getGroupCount(),\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\n      getTemplateData: (rowIndex => {\n        if (!this._isVerticalGroupedWorkSpace()) {\n          return {};\n        }\n\n        var groupIndex = this._getGroupIndex(rowIndex, 0);\n\n        var groupsArray = this._getCellGroups(groupIndex);\n\n        var groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n\n        return {\n          groupIndex: groupIndex,\n          groups: groups\n        };\n      }).bind(this)\n    });\n  }\n\n  _getTimePanelRowCount() {\n    return this._getCellCountInDay();\n  }\n\n  _getCellCountInDay(skipRound) {\n    var result = this._calculateDayDuration() / this.option(\"hoursInterval\");\n    return skipRound ? result : Math.ceil(result);\n  }\n\n  _calculateDayDuration() {\n    return this.option(\"endDayHour\") - this.option(\"startDayHour\");\n  }\n\n  _getTimeCellClass(i) {\n    var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass;\n  }\n\n  _getTimeCellDate(i) {\n    return this._getTimeCellDateCore(this.getStartViewDate(), i);\n  }\n\n  _getTimeCellDateCore(startViewDate, i) {\n    var result = new Date(startViewDate);\n    var timeCellDuration = Math.round(this.getCellDuration());\n\n    var cellCountInDay = this._getCellCountInDay(true);\n\n    result.setMilliseconds(result.getMilliseconds() + timeCellDuration * (i % cellCountInDay) - this._getTimeOffsetForStartViewDate());\n    return result;\n  }\n\n  _renderDateTable() {\n    var groupCount = this._getGroupCount();\n\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowCount: this._getTotalRowCount(groupCount),\n      cellCount: this._getTotalCellCount(groupCount),\n      cellClass: this._getDateTableCellClass.bind(this),\n      rowClass: this._getDateTableRowClass(),\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: this._getCellData.bind(this),\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\n      groupCount: groupCount,\n      groupByDate: this.option(\"groupByDate\")\n    });\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return this._groupedStrategy.insertAllDayRowsIntoDateTable();\n  }\n\n  _getTotalCellCount(groupCount) {\n    return this._groupedStrategy.getTotalCellCount(groupCount);\n  }\n\n  _getTotalRowCount(groupCount, includeAllDayPanelRows) {\n    var result = this._groupedStrategy.getTotalRowCount(groupCount);\n\n    if (includeAllDayPanelRows && groupCount > 1 && this.isAllDayPanelVisible) {\n      result += groupCount;\n    }\n\n    return result;\n  }\n\n  _getCellData(cell, rowIndex, cellIndex) {\n    var data = this._prepareCellData(rowIndex, cellIndex, cell);\n\n    return {\n      key: CELL_DATA,\n      value: data\n    };\n  }\n\n  _prepareCellData(rowIndex, cellIndex) {\n    var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\n\n    var endDate = this.calculateEndDate(startDate);\n\n    var groupIndex = this._getGroupIndex(rowIndex, cellIndex);\n\n    var data = {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: this._getTableAllDay(),\n      groupIndex: groupIndex\n    };\n\n    var groupsArray = this._getCellGroups(groupIndex);\n\n    if (groupsArray.length) {\n      data.groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n    }\n\n    return data;\n  }\n\n  _getGroupIndex(rowIndex, cellIndex) {\n    return this._groupedStrategy.getGroupIndex(rowIndex, cellIndex);\n  }\n\n  _getTableAllDay() {\n    return false;\n  }\n\n  calculateEndDate(startDate) {\n    var result = new Date(startDate);\n    result.setMilliseconds(result.getMilliseconds() + Math.round(this._getInterval()));\n    return result;\n  }\n\n  _getGroupCount() {\n    var groups = this.option(\"groups\");\n    var result = 0;\n\n    for (var i = 0, len = groups.length; i < len; i++) {\n      if (!i) {\n        result = groups[i].items.length;\n      } else {\n        result *= groups[i].items.length;\n      }\n    }\n\n    return result;\n  }\n\n  _getPathToLeaf(leafIndex) {\n    var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\n\n    var leaf = function findLeafByIndex(data, index) {\n      for (var i = 0; i < data.length; i++) {\n        if (data[i].leafIndex === index) {\n          return data[i];\n        } else {\n          var _leaf = findLeafByIndex(data[i].children, index);\n\n          if (_leaf) {\n            return _leaf;\n          }\n        }\n      }\n    }(tree, leafIndex);\n\n    return function makeBranch(leaf, result) {\n      result = result || [];\n      result.push(leaf.value);\n\n      if (leaf.parent) {\n        makeBranch(leaf.parent, result);\n      }\n\n      return result;\n    }(leaf).reverse();\n  }\n\n  _getAllGroups() {\n    var groupCount = this._getGroupCount();\n\n    return [...new Array(groupCount)].map((_, groupIndex) => {\n      var groupsArray = this._getCellGroups(groupIndex);\n\n      return this._getGroupsObjectFromGroupsArray(groupsArray);\n    });\n  }\n\n  _getCellGroups(groupIndex) {\n    var result = [];\n\n    if (this._getGroupCount()) {\n      var groups = this.option(\"groups\");\n\n      if (groupIndex < 0) {\n        return;\n      }\n\n      var path = this._getPathToLeaf(groupIndex);\n\n      for (var i = 0; i < groups.length; i++) {\n        result.push({\n          name: groups[i].name,\n          id: path[i]\n        });\n      }\n    }\n\n    return result;\n  }\n\n  _getGroupsObjectFromGroupsArray(groupsArray) {\n    return groupsArray.reduce((currentGroups, _ref3) => {\n      var {\n        name: name,\n        id: id\n      } = _ref3;\n      return _extends({}, currentGroups, {\n        [name]: id\n      });\n    }, {});\n  }\n\n  _attachTablesEvents() {\n    var element = this.$element();\n\n    this._attachDragEvents(element);\n\n    this._attachPointerEvents(element);\n  }\n\n  _detachDragEvents(element) {\n    eventsEngine.off(element, DragEventNames.ENTER);\n    eventsEngine.off(element, DragEventNames.LEAVE);\n    eventsEngine.off(element, DragEventNames.DROP);\n  }\n\n  _attachDragEvents(element) {\n    this._detachDragEvents(element);\n\n    eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\n      checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\n    }, e => {\n      this.removeDroppableCellClass();\n      $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n    });\n    eventsEngine.on(element, DragEventNames.LEAVE, () => this.removeDroppableCellClass());\n    eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => this.removeDroppableCellClass());\n  }\n\n  _attachPointerEvents(element) {\n    var isPointerDown = false;\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isMouseEvent(e) && 1 === e.which) {\n        isPointerDown = true;\n        this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n        eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\n          isPointerDown = false;\n          this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        });\n      }\n    });\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._moveToCell($(e.target), true);\n      }\n    });\n  }\n\n  _getDateTables() {\n    return this._$dateTable.add(this._$allDayTable);\n  }\n\n  _getDateTable() {\n    return this._$dateTable;\n  }\n\n  _getAllDayTable() {\n    return this._$allDayTable;\n  }\n\n  _getInterval() {\n    if (void 0 === this._interval) {\n      this._interval = this.option(\"hoursInterval\") * HOUR_MS;\n    }\n\n    return this._interval;\n  }\n\n  _getHeaderText(headerIndex) {\n    return dateLocalization.format(this._getDateForHeaderText(headerIndex), this._getFormat());\n  }\n\n  _getDateForHeaderText(index) {\n    return this._getDateByIndex(index);\n  }\n\n  _getDateByIndex() {\n    return abstract();\n  }\n\n  _getFormat() {\n    return abstract();\n  }\n\n  _calculateCellIndex(rowIndex, cellIndex) {\n    return this._groupedStrategy.calculateCellIndex(rowIndex, cellIndex);\n  }\n\n  _renderTableBody(options, delayCellTemplateRendering) {\n    var result = [];\n\n    if (!delayCellTemplateRendering) {\n      this._applyCellTemplates(tableCreator.makeTable(options));\n    } else {\n      result = tableCreator.makeTable(options);\n    }\n\n    return result;\n  }\n\n  _removeAllDayElements() {\n    this._$allDayTable && this._$allDayTable.remove();\n    this._$allDayTitle && this._$allDayTitle.remove();\n  }\n\n  _cleanView() {\n    var _this$virtualSelectio2, _this$_shader;\n\n    this.cache.clear();\n\n    this._cleanTableWidths();\n\n    this._cleanAllowedPositions();\n\n    null === (_this$virtualSelectio2 = this.virtualSelectionState) || void 0 === _this$virtualSelectio2 ? void 0 : _this$virtualSelectio2.releaseSelectedAndFocusedCells();\n\n    if (!this.isRenovatedRender()) {\n      var _this$_$allDayTable, _this$_$sidebarTable;\n\n      this._$thead.empty();\n\n      this._$dateTable.empty();\n\n      this._$timePanel.empty();\n\n      this._$groupTable.empty();\n\n      null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\n      null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty();\n    }\n\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n    delete this._hiddenInterval;\n    delete this._interval;\n  }\n\n  _clean() {\n    eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n\n    this._disposeRenovatedComponents();\n\n    super._clean();\n  }\n\n  _cleanTableWidths() {\n    this._$headerPanel.css(\"width\", \"\");\n\n    this._$dateTable.css(\"width\", \"\");\n\n    this._$allDayTable && this._$allDayTable.css(\"width\", \"\");\n  }\n\n  _disposeRenovatedComponents() {\n    var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\n\n    null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\n    this.renovatedAllDayPanel = void 0;\n    null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\n    this.renovatedDateTable = void 0;\n    null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\n    this.renovatedTimePanel = void 0;\n    null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\n    this.renovatedGroupPanel = void 0;\n    null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\n    this.renovatedHeaderPanel = void 0;\n  }\n\n  getWorkArea() {\n    return this._dateTableScrollable.$content();\n  }\n\n  getScrollable() {\n    return this._dateTableScrollable;\n  }\n\n  getScrollableScrollTop() {\n    return this._dateTableScrollable.scrollTop();\n  }\n\n  getGroupedScrollableScrollTop(allDay) {\n    return this._groupedStrategy.getScrollableScrollTop(allDay);\n  }\n\n  getScrollableScrollLeft() {\n    return this._dateTableScrollable.scrollLeft();\n  }\n\n  getScrollableOuterWidth() {\n    return this._dateTableScrollable.scrollWidth();\n  }\n\n  getScrollableContainer() {\n    return $(this._dateTableScrollable.container());\n  }\n\n  getHeaderPanelHeight() {\n    return this._$headerPanel && this._$headerPanel.outerHeight(true);\n  }\n\n  getTimePanelWidth() {\n    return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width;\n  }\n\n  getGroupTableWidth() {\n    return this._$groupTable ? this._$groupTable.outerWidth() : 0;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return this._groupedStrategy.getLeftOffset();\n  }\n\n  getGroupedStrategy() {\n    return this._groupedStrategy;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var cellIndex = Math.floor(index / this._getRowCount());\n    var rowIndex = index - this._getRowCount() * cellIndex;\n    return {\n      cellIndex: cellIndex,\n      rowIndex: rowIndex\n    };\n  }\n\n  _getDateByCellIndexes(rowIndex, cellIndex, patchedIndexes) {\n    cellIndex = !patchedIndexes ? this._patchCellIndex(cellIndex) : cellIndex;\n    var firstViewDate = this.getStartViewDate();\n    var firstViewDateTime = firstViewDate.getTime();\n\n    var millisecondsOffset = this._getMillisecondsOffset(rowIndex, cellIndex);\n\n    var offsetByCount = this._getOffsetByCount(cellIndex);\n\n    var startViewDateOffset = this._getTimeOffsetForStartViewDate();\n\n    var currentDate = new Date(firstViewDateTime + millisecondsOffset + offsetByCount - startViewDateOffset);\n    currentDate.setTime(currentDate.getTime() + dateUtils.getTimezonesDifference(firstViewDate, currentDate));\n    return currentDate;\n  }\n\n  _patchCellIndex(cellIndex) {\n    if (this.isGroupedByDate()) {\n      cellIndex = Math.floor(cellIndex / this._getGroupCount());\n    }\n\n    return cellIndex;\n  }\n\n  _getOffsetByCount() {\n    return 0;\n  }\n\n  _getMillisecondsOffset(rowIndex, cellIndex) {\n    return this._getInterval() * this._calculateCellIndex(rowIndex, cellIndex) + this._calculateHiddenInterval(rowIndex, cellIndex);\n  }\n\n  _calculateHiddenInterval(rowIndex, cellIndex) {\n    var dayCount = cellIndex % this._getCellCount();\n\n    return dayCount * this._getHiddenInterval();\n  }\n\n  _getHiddenInterval() {\n    if (void 0 === this._hiddenInterval) {\n      this._hiddenInterval = DAY_MS - this.getVisibleDayDuration();\n    }\n\n    return this._hiddenInterval;\n  }\n\n  _getIntervalBetween(currentDate, allDay) {\n    var firstViewDate = this.getStartViewDate();\n    var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\n\n    var days = this._getDaysOfInterval(fullInterval, startDayTime);\n\n    var weekendsCount = this._getWeekendsCount(days);\n\n    var result = (days - weekendsCount) * DAY_MS;\n\n    if (!allDay) {\n      result = fullInterval - days * this._getHiddenInterval() - weekendsCount * this.getVisibleDayDuration();\n    }\n\n    return result;\n  }\n\n  _getWeekendsCount() {\n    return 0;\n  }\n\n  _getDaysOfInterval(fullInterval, startDayTime) {\n    return Math.floor((fullInterval + startDayTime) / DAY_MS);\n  }\n\n  _getGroupIndexes(appointmentResources) {\n    var result = [];\n\n    if (this._isGroupsSpecified(appointmentResources)) {\n      var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\n      result = this.invoke(\"getResourceTreeLeaves\", tree, appointmentResources);\n    }\n\n    return result;\n  }\n\n  _updateIndex(index) {\n    return index * this._getRowCount();\n  }\n\n  _getDroppableCell() {\n    return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getWorkSpaceWidth() {\n    return this.cache.get(\"workspaceWidth\", () => {\n      if (this._needCreateCrossScrolling()) {\n        return getBoundingRect(this._$dateTable.get(0)).width;\n      }\n\n      var totalWidth = getBoundingRect(this.$element().get(0)).width;\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupTableWidth = this.getGroupTableWidth();\n      return totalWidth - timePanelWidth - groupTableWidth;\n    });\n  }\n\n  _getCellPositionByIndex(index, groupIndex, inAllDayRow) {\n    var cellCoordinates = this._getCellCoordinatesByIndex(index);\n\n    var $cell = this._getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow);\n\n    return this._getCellPositionWithCache($cell, cellCoordinates, groupIndex);\n  }\n\n  _getCellPositionWithCache($cell, cellCoordinates, groupIndex) {\n    var result = this._getCellPosition($cell);\n\n    this.setCellDataCache(cellCoordinates, groupIndex, $cell);\n\n    if (result) {\n      result.rowIndex = cellCoordinates.rowIndex;\n      result.cellIndex = cellCoordinates.cellIndex;\n    }\n\n    return result;\n  }\n\n  _getCellPosition($cell) {\n    var position = $cell.position();\n\n    if (this.option(\"rtlEnabled\")) {\n      position.left += getBoundingRect($cell.get(0)).width;\n    }\n\n    return position;\n  }\n\n  _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\n\n    return this._dom_getDateCell(indexes);\n  }\n\n  _dom_getDateCell(position) {\n    return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.cellIndex);\n  }\n\n  _dom_getAllDayPanelCell(cellIndex) {\n    return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(cellIndex);\n  }\n\n  _getCells(allDay, direction) {\n    var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n\n    if (\"vertical\" === direction) {\n      var result = [];\n\n      for (var i = 1;; i++) {\n        var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\n\n        if (!cells.length) {\n          break;\n        }\n\n        result = result.concat(cells.toArray());\n      }\n\n      return $(result);\n    } else {\n      return this.$element().find(\".\" + cellClass);\n    }\n  }\n\n  _getAllCells(allDay) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"));\n    }\n\n    var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n    return this.$element().find(\".\" + cellClass);\n  }\n\n  _setHorizontalGroupHeaderCellsHeight() {\n    var height = getBoundingRect(this._$dateTable.get(0)).height;\n\n    this._$groupTable.outerHeight(height);\n  }\n\n  _getDateTableBorder() {\n    return DATE_TABLE_CELL_BORDER;\n  }\n\n  _getDateTableBorderOffset() {\n    return 2 * this._getDateTableBorder();\n  }\n\n  _getGroupHeaderCellsContent() {\n    return this.$element().find(\".\" + GROUP_HEADER_CONTENT_CLASS);\n  }\n\n  _getGroupHeaderCells() {\n    return this.$element().find(\".\" + GROUP_HEADER_CLASS);\n  }\n\n  _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\n    var currentDate = date || new Date(this.option(\"currentDate\"));\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n\n    if (hours < startDayHour) {\n      hours = startDayHour;\n    }\n\n    if (hours >= endDayHour) {\n      hours = endDayHour - 1;\n    }\n\n    currentDate.setHours(hours, minutes, 0, 0);\n\n    if (!this.isVirtualScrolling()) {\n      return this.getCoordinatesByDate(currentDate, groupIndex, allDay);\n    }\n\n    var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\n    var {\n      position: position,\n      cellData: cellData\n    } = cell;\n    return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, this.isDateAndTimeView, \"vertical\" === this.viewDirection);\n  }\n\n  _isOutsideScrollable(target, event) {\n    var $dateTableScrollableElement = this._dateTableScrollable.$element();\n\n    var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\n    var window = getWindow();\n    var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\n    var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\n    var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\n\n    if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\n      return false;\n    }\n\n    return isOutsideVerticalScrollable || isOutsideHorizontalScrollable;\n  }\n\n  setCellDataCache(cellCoordinates, groupIndex, $cell) {\n    var key = JSON.stringify({\n      rowIndex: cellCoordinates.rowIndex,\n      cellIndex: cellCoordinates.cellIndex,\n      groupIndex: groupIndex\n    });\n    this.cache.set(key, this.getCellData($cell));\n  }\n\n  setCellDataCacheAlias(appointment, geometry) {\n    var key = JSON.stringify({\n      rowIndex: appointment.rowIndex,\n      cellIndex: appointment.cellIndex,\n      groupIndex: appointment.groupIndex\n    });\n    var aliasKey = JSON.stringify({\n      top: geometry.top,\n      left: geometry.left\n    });\n    this.cache.set(aliasKey, this.cache.get(key));\n  }\n\n  _cleanAllowedPositions() {\n    this._maxAllowedVerticalPosition = [];\n    this._maxAllowedPosition = [];\n  }\n\n  supportAllDayRow() {\n    return true;\n  }\n\n  keepOriginalHours() {\n    return false;\n  }\n\n  getSelectedCellData() {\n    if (this.isVirtualScrolling()) {\n      return this.virtualSelectionState.getSelectedCells();\n    }\n\n    var $focusedCells = this._getAllFocusedCells();\n\n    var result = [];\n\n    if ($focusedCells.length > 1) {\n      result = this._getMultipleCellsData($focusedCells);\n    } else {\n      var data = this.getCellData($($focusedCells[0]));\n      data && result.push(data);\n    }\n\n    return result;\n  }\n\n  _getMultipleCellsData($cells) {\n    var data = [];\n\n    for (var i = 0; i < $cells.length; i++) {\n      data.push(this.getCellData($($cells[i])));\n    }\n\n    return data;\n  }\n\n  getCellData($cell) {\n    var data;\n    var currentCell = $cell[0];\n\n    if (currentCell) {\n      if (this.isRenovatedRender()) {\n        data = this._getCellDataInRenovatedView($cell);\n      } else {\n        data = elementData(currentCell, CELL_DATA);\n      }\n    }\n\n    return extend(true, {}, data);\n  }\n\n  _getVirtualRowOffset() {\n    var _this$virtualScrollin4;\n\n    return (null === (_this$virtualScrollin4 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin4 ? void 0 : _this$virtualScrollin4.virtualRowOffset) || 0;\n  }\n\n  _getVirtualCellOffset() {\n    var _this$virtualScrollin5;\n\n    return (null === (_this$virtualScrollin5 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin5 ? void 0 : _this$virtualScrollin5.virtualCellOffset) || 0;\n  }\n\n  _getCellDataInRenovatedView($cell) {\n    var rowIndex = $cell.parent().index();\n\n    if (this.isVirtualScrolling()) {\n      rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n\n    var columnIndex = $cell.index();\n\n    if (this.isVirtualScrolling()) {\n      columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    }\n\n    var {\n      viewDataProvider: viewDataProvider\n    } = this;\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\n    return cellData ? {\n      startDate: cellData.startDate,\n      endDate: cellData.endDate,\n      groups: cellData.groups,\n      groupIndex: cellData.groupIndex,\n      allDay: cellData.allDay\n    } : void 0;\n  }\n\n  _getHorizontalMax(groupIndex) {\n    if (this.isGroupedByDate()) {\n      var correctedGroupIndex = this._getGroupCount() - 1;\n      return Math.max(this._groupedStrategy.getHorizontalMax(groupIndex), this._groupedStrategy.getHorizontalMax(correctedGroupIndex));\n    }\n\n    return this._groupedStrategy.getHorizontalMax(groupIndex);\n  }\n\n  getCoordinatesByDate(date, groupIndex, inAllDayRow) {\n    groupIndex = groupIndex || 0;\n    var position;\n\n    if (this.isVirtualScrolling()) {\n      var cellInfo = {\n        groupIndex: groupIndex,\n        startDate: date,\n        isAllDay: inAllDayRow\n      };\n      var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\n\n      if (!positionByMap) {\n        return;\n      }\n\n      var $cell = this._dom_getDateCell(positionByMap);\n\n      position = this._getCellPositionWithCache($cell, positionByMap, groupIndex);\n    } else {\n      position = this.calculateCellPositionByView(date, groupIndex, inAllDayRow);\n    }\n\n    var shift = this.getPositionShift(inAllDayRow ? 0 : this.getTimeShift(date), inAllDayRow);\n\n    var horizontalHMax = this._getHorizontalMax(groupIndex, date);\n\n    if (!position) {\n      throw errors.Error(\"E1039\");\n    }\n\n    return {\n      cellPosition: position.left + shift.cellPosition,\n      top: position.top + shift.top,\n      left: position.left + shift.left,\n      rowIndex: position.rowIndex,\n      cellIndex: position.cellIndex,\n      hMax: horizontalHMax,\n      vMax: this.getVerticalMax(groupIndex),\n      groupIndex: groupIndex\n    };\n  }\n\n  calculateCellPositionByView(date, groupIndex, inAllDayRow) {\n    var index = this.getCellIndexByDate(date, inAllDayRow);\n    return this._getCellPositionByIndex(index, groupIndex, inAllDayRow);\n  }\n\n  getVerticalMax(groupIndex) {\n    return this._groupedStrategy.getVerticalMax(groupIndex);\n  }\n\n  _getOffsetByAllDayPanel(groupIndex) {\n    return this._groupedStrategy._getOffsetByAllDayPanel(groupIndex);\n  }\n\n  _getGroupTop(groupIndex) {\n    return this._groupedStrategy._getGroupTop(groupIndex);\n  }\n\n  isGroupedByDate() {\n    return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0;\n  }\n\n  getCellIndexByDate(date, inAllDayRow) {\n    var timeInterval = inAllDayRow ? 864e5 : this._getInterval();\n\n    var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + this._getTimeOffsetForStartViewDate();\n\n    var index = Math.floor(dateTimeStamp / timeInterval);\n\n    if (inAllDayRow) {\n      index = this._updateIndex(index);\n    }\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    return index;\n  }\n\n  getPositionShift(timeShift, isAllDay) {\n    return {\n      top: timeShift * this.getCellHeight(),\n      left: 0,\n      cellPosition: 0\n    };\n  }\n\n  getTimeShift(date) {\n    var currentDayStart = new Date(date);\n    var cellDuration = this.getCellDuration();\n    var currentDayEndHour = new Date(new Date(date).setHours(this.option(\"endDayHour\"), 0, 0));\n\n    if (date.getTime() <= currentDayEndHour.getTime()) {\n      currentDayStart.setHours(this.option(\"startDayHour\"), 0, 0, 0);\n    }\n\n    var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\n    var currentDateTime = date.getTime();\n    var currentDayStartTime = currentDayStart.getTime();\n\n    var minTime = this._firstViewDate.getTime();\n\n    return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % cellDuration / cellDuration : 0;\n  }\n\n  _isSkippedData() {\n    return false;\n  }\n\n  getCoordinatesByDateInGroup(startDate, appointmentResources, inAllDayRow, groupIndex) {\n    var result = [];\n\n    if (this._isSkippedData(startDate)) {\n      return result;\n    }\n\n    var groupIndices = [groupIndex];\n\n    if (!isDefined(groupIndex)) {\n      groupIndices = this._getGroupCount() ? this._getGroupIndexes(appointmentResources) : [0];\n    }\n\n    groupIndices.forEach(groupIndex => {\n      var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\n      coordinates && result.push(coordinates);\n    });\n    return result;\n  }\n\n  getDroppableCellIndex() {\n    var $droppableCell = this._getDroppableCell();\n\n    var $row = $droppableCell.parent();\n    var rowIndex = $row.index();\n    return rowIndex * $row.find(\"td\").length + $droppableCell.index();\n  }\n\n  getDataByDroppableCell() {\n    var cellData = this.getCellData($(this._getDroppableCell()));\n    var allDay = cellData.allDay;\n    var startDate = cellData.startDate;\n    var endDate = cellData.endDate;\n    return {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay,\n      groups: cellData.groups\n    };\n  }\n\n  getDateRange() {\n    return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()];\n  }\n\n  getCellWidth() {\n    return this.cache.get(\"cellWidth\", () => {\n      var cell = this._getCells().first().get(0);\n\n      return cell && getBoundingRect(cell).width;\n    });\n  }\n\n  getCellMinWidth() {\n    return DATE_TABLE_MIN_CELL_WIDTH;\n  }\n\n  getRoundedCellWidth(groupIndex, startIndex, cellCount) {\n    if (groupIndex < 0) {\n      return 0;\n    }\n\n    var $row = this.$element().find(\".\" + this._getDateTableRowClass()).eq(0);\n    var width = 0;\n    var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\n    var totalCellCount = this._getCellCount() * groupIndex;\n    cellCount = cellCount || this._getCellCount();\n\n    if (!isDefined(startIndex)) {\n      startIndex = totalCellCount;\n    }\n\n    for (var i = startIndex; i < totalCellCount + cellCount; i++) {\n      width += getBoundingRect($($cells).eq(i).get(0)).width;\n    }\n\n    return width / (totalCellCount + cellCount - startIndex);\n  }\n\n  getCellHeight() {\n    var useCache = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n    var callbackResult = () => {\n      var cell = this._getCells().first().get(0);\n\n      return cell && getBoundingRect(cell).height;\n    };\n\n    return useCache ? this.cache.get(\"cellHeight\", callbackResult) : callbackResult();\n  }\n\n  getAllDayHeight() {\n    var cell = this._getCells(true).first().get(0);\n\n    return this._isShowAllDayPanel() ? cell && getBoundingRect(cell).height || 0 : 0;\n  }\n\n  getAllDayOffset() {\n    return this._groupedStrategy.getAllDayOffset();\n  }\n\n  getMaxAllowedPosition(groupIndex) {\n    var validGroupIndex = groupIndex || 0;\n\n    if (this.isRenovatedRender()) {\n      return this.getRMaxAllowedHorizontalPosition(validGroupIndex);\n    }\n\n    return this.getMaxAllowedHorizontalPosition(validGroupIndex);\n  }\n\n  getMaxAllowedHorizontalPosition(groupIndex) {\n    if (0 === this._maxAllowedPosition.length) {\n      var isRtl = this.option(\"rtlEnabled\");\n      this._maxAllowedPosition = [];\n\n      this._$dateTable.find(\"tr\").first().find(\"td:nth-child(\".concat(this._getCellCount(), \"n)\")).each(function (_, cell) {\n        var maxPosition = $(cell).position().left;\n\n        if (!isRtl) {\n          maxPosition += getBoundingRect(cell).width;\n        }\n\n        this._maxAllowedPosition.push(Math.round(maxPosition));\n      }.bind(this));\n    }\n\n    return this._maxAllowedPosition[groupIndex];\n  }\n\n  getRMaxAllowedHorizontalPosition(groupIndex) {\n    if (!this._maxAllowedPosition[groupIndex]) {\n      var {\n        cellIndex: cellIndex\n      } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\n\n      (cellIndex => {\n        var cell = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).first().find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).get(cellIndex);\n\n        var maxPosition = $(cell).position().left;\n\n        if (!this.option(\"rtlEnabled\")) {\n          maxPosition += getBoundingRect(cell).width;\n        }\n\n        this._maxAllowedPosition[groupIndex] = Math.round(maxPosition);\n      })(cellIndex);\n    }\n\n    return this._maxAllowedPosition[groupIndex];\n  }\n\n  getMaxAllowedVerticalPosition(groupIndex) {\n    if (this.isRenovatedRender()) {\n      return this.getRMaxAllowedVerticalPosition(groupIndex);\n    }\n\n    return this.getMaxAllowedVerticalPositionStandard(groupIndex);\n  }\n\n  getMaxAllowedVerticalPositionStandard(groupIndex) {\n    if (0 === this._maxAllowedVerticalPosition.length) {\n      var rowCount = this._getRowCount();\n\n      this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \"):nth-child(\").concat(rowCount, \"n)\")).each((_, row) => {\n        var maxPosition = $(row).position().top + getBoundingRect(row).height;\n\n        this._maxAllowedVerticalPosition.push(Math.round(maxPosition));\n      });\n    }\n\n    return this._maxAllowedVerticalPosition[groupIndex];\n  }\n\n  getRMaxAllowedVerticalPosition(groupIndex) {\n    if (!this._maxAllowedVerticalPosition[groupIndex]) {\n      var {\n        rowIndex: rowIndex\n      } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\n\n      (rowIndex => {\n        var row = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).get(rowIndex);\n\n        var maxPosition = $(row).position().top + getBoundingRect(row).height;\n\n        if (this.isGroupedAllDayPanel()) {\n          maxPosition -= (groupIndex + 1) * this.getAllDayHeight();\n        }\n\n        this._maxAllowedVerticalPosition[groupIndex] = Math.round(maxPosition);\n      })(rowIndex);\n    }\n\n    return this._maxAllowedVerticalPosition[groupIndex];\n  }\n\n  getFixedContainer() {\n    return this._$fixedContainer;\n  }\n\n  getAllDayContainer() {\n    return this._$allDayContainer;\n  }\n\n  getCellIndexByCoordinates(coordinates, allDay) {\n    var cellCount = this._getTotalCellCount(this._getGroupCount());\n\n    var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\n    var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\n    var leftOffset = this._isRTL() || this.option(\"crossScrollingEnabled\") ? 0 : this.getWorkSpaceLeftOffset();\n    var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\n    var leftIndex = Math.floor((coordinates.left + 5 - leftOffset) / cellWidth);\n\n    if (this._isRTL()) {\n      leftIndex = cellCount - leftIndex - 1;\n    }\n\n    return cellCount * topIndex + leftIndex;\n  }\n\n  getStartViewDate() {\n    return this._firstViewDate;\n  }\n\n  getEndViewDate() {\n    var dateOfLastViewCell = this.getDateOfLastViewCell();\n    var endDateOfLastViewCell = this.calculateEndViewDate(dateOfLastViewCell);\n    return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell);\n  }\n\n  getEndViewDateByEndDayHour() {\n    var dateOfLastViewCell = this.getDateOfLastViewCell();\n    var endTime = dateUtils.dateTimeFromDecimal(this.option(\"endDayHour\"));\n    var endDateOfLastViewCell = new Date(dateOfLastViewCell.setHours(endTime.hours, endTime.minutes));\n    return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell);\n  }\n\n  calculateEndViewDate(dateOfLastViewCell) {\n    return new Date(dateOfLastViewCell.getTime() + this.getCellDuration());\n  }\n\n  _adjustEndViewDateByDaylightDiff(startDate, endDate) {\n    var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\n    var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\n    return new Date(endDateOfLastViewCell.getTime() - this._getEndViewDateTimeDiff());\n  }\n\n  _getEndViewDateTimeDiff() {\n    return toMs(\"minute\");\n  }\n\n  getDateOfLastViewCell() {\n    var rowIndex = this._getRowCount() - 1;\n\n    var cellIndex = this._getCellCount();\n\n    if (this.isGroupedByDate()) {\n      cellIndex = cellIndex * this._getGroupCount() - 1;\n    } else {\n      cellIndex -= 1;\n    }\n\n    return this._getDateByCellIndexes(rowIndex, cellIndex, true);\n  }\n\n  getCellDuration() {\n    return 36e5 * this.option(\"hoursInterval\");\n  }\n\n  getIntervalDuration(allDay) {\n    return allDay ? toMs(\"day\") : this.getCellDuration();\n  }\n\n  getVisibleDayDuration() {\n    return this.option(\"hoursInterval\") * this._getCellCountInDay() * HOUR_MS;\n  }\n\n  getGroupBounds(coordinates) {\n    var cellCount = this._getCellCount();\n\n    var $cells = this._getCells();\n\n    var cellWidth = this.getCellWidth();\n    var result;\n\n    if (this.isVirtualScrolling()) {\n      var groupedDataMap = this.viewDataProvider.groupedDataMap;\n      result = this._groupedStrategy.getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\n    } else {\n      result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates);\n    }\n\n    if (this._isRTL()) {\n      var startOffset = result.left;\n      result.left = result.right - 2 * cellWidth;\n      result.right = startOffset + 2 * cellWidth;\n    }\n\n    return result;\n  }\n\n  needRecalculateResizableArea() {\n    return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop();\n  }\n\n  getCellDataByCoordinates(coordinates, allDay) {\n    var key = JSON.stringify({\n      top: coordinates.top,\n      left: coordinates.left\n    });\n    return this.cache.get(key, () => {\n      var $cells = this._getCells(allDay);\n\n      var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\n      var $cell = $cells.eq(cellIndex);\n      return this.getCellData($cell);\n    });\n  }\n\n  getVisibleBounds() {\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\n    var totalCellCount = scrolledCellCount + $scrollable.height() / cellHeight;\n    result.top = {\n      hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: scrolledCellCount % 2 ? 30 : 0\n    };\n    result.bottom = {\n      hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\n    };\n    return result;\n  }\n\n  updateScrollPosition(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var scheduler = this.option(\"observer\");\n    var newDate = scheduler.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var inAllDayRow = allDay && this.isAllDayPanelVisible;\n\n    if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\n      this.scrollTo(newDate, groups, inAllDayRow, false);\n    }\n  }\n\n  needUpdateScrollPosition(date, groups, inAllDayRow) {\n    var cells = this._getCellsInViewport(inAllDayRow);\n\n    var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    return cells.reduce((currentResult, cell) => {\n      var {\n        startDate: cellStartDate,\n        endDate: cellEndDate,\n        groupIndex: cellGroupIndex\n      } = this.getCellData(cell);\n      var cellStartTime = cellStartDate.getTime();\n      var cellEndTime = cellEndDate.getTime();\n\n      if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\n        return false;\n      }\n\n      return currentResult;\n    }, true);\n  }\n\n  _getCellsInViewport(inAllDayRow) {\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var cellWidth = this.getCellWidth();\n\n    var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\n\n    var scrollableScrollTop = this.getScrollableScrollTop();\n    var scrollableScrollLeft = this.getScrollableScrollLeft();\n    var fullScrolledRowCount = scrollableScrollTop / cellHeight;\n\n    if (this.isVirtualScrolling()) {\n      fullScrolledRowCount -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n\n    var scrolledRowCount = Math.floor(fullScrolledRowCount);\n\n    if (scrollableScrollTop % cellHeight !== 0) {\n      scrolledRowCount += 1;\n    }\n\n    var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\n    var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\n\n    if (scrollableScrollLeft % cellWidth !== 0) {\n      scrolledColumnCount += 1;\n    }\n\n    var rowCount = Math.floor(fullScrolledRowCount + $scrollable.height() / cellHeight);\n    var columnCount = Math.floor(fullScrolledColumnCount + $scrollable.width() / cellWidth);\n\n    var $cells = this._getAllCells(inAllDayRow);\n\n    var result = [];\n    $cells.each(function (index) {\n      var $cell = $(this);\n      var columnIndex = index % totalColumnCount;\n      var rowIndex = index / totalColumnCount;\n\n      if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\n        result.push($cell);\n      }\n    });\n    return result;\n  }\n\n  getGroupWidth(groupIndex) {\n    var result = this._getCellCount() * this.getCellWidth();\n\n    if (this.isVirtualScrolling()) {\n      var groupedData = this.viewDataProvider.groupedDataMap.dateTableGroupedMap;\n      var groupLength = groupedData[groupIndex][0].length;\n      result = groupLength * this.getCellWidth();\n    }\n\n    var position = this.getMaxAllowedPosition(groupIndex);\n    var currentPosition = position[groupIndex];\n\n    if (currentPosition) {\n      if (this._isRTL()) {\n        result = currentPosition - position[groupIndex + 1];\n      } else if (0 === groupIndex) {\n        result = currentPosition;\n      } else {\n        result = currentPosition - position[groupIndex - 1];\n      }\n    }\n\n    return result;\n  }\n\n  scrollToTime(hours, minutes, date) {\n    if (!this._isValidScrollDate(date)) {\n      return;\n    }\n\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    scrollable.scrollBy({\n      top: coordinates.top - scrollable.scrollTop(),\n      left: 0\n    });\n  }\n\n  scrollTo(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n\n    if (!this._isValidScrollDate(date, throwWarning)) {\n      return;\n    }\n\n    var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\n    var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\n\n    var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\n\n    var scrollable = this.getScrollable();\n    var $scrollable = scrollable.$element();\n    var offset = this.option(\"rtlEnabled\") ? this.getCellWidth() : 0;\n    var scrollableHeight = $scrollable.height();\n    var scrollableWidth = $scrollable.width();\n    var cellWidth = this.getCellWidth();\n    var cellHeight = this.getCellHeight();\n    var xShift = (scrollableWidth - cellWidth) / 2;\n    var yShift = (scrollableHeight - cellHeight) / 2;\n    var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\n    var top = coordinates.top - scrollable.scrollTop() - yShift;\n\n    if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\n      top = 0;\n    }\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(() => {\n        scrollable.scrollBy({\n          left: left,\n          top: top\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: left,\n        top: top\n      });\n    }\n  }\n\n  _isValidScrollDate(date) {\n    var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n    var min = this.getStartViewDate();\n    var max = this.getEndViewDate();\n\n    if (date < min || date > max) {\n      throwWarning && errors.log(\"W1008\", date);\n      return false;\n    }\n\n    return true;\n  }\n\n  getDistanceBetweenCells(startIndex, endIndex) {\n    var result = 0;\n    this.$element().find(\".\" + this._getDateTableRowClass()).first().find(\".\" + DATE_TABLE_CELL_CLASS).each(function (index) {\n      if (index < startIndex || index > endIndex) {\n        return true;\n      }\n\n      result += getBoundingRect(this).width;\n    });\n    return result;\n  }\n\n  needApplyCollectorOffset() {\n    return false;\n  }\n\n  initDragBehavior(scheduler) {\n    if (!this.dragBehavior && scheduler) {\n      this.dragBehavior = new AppointmentDragBehavior(scheduler);\n\n      this._createDragBehavior(this.getWorkArea());\n\n      this._createDragBehavior(this.getAllDayContainer());\n\n      this._createDragBehavior(this._$allDayPanel);\n    }\n  }\n\n  _createDragBehavior($element) {\n    var options = {\n      getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\n      getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\n    };\n\n    this._createDragBehaviorBase($element, options);\n  }\n\n  _createDragBehaviorBase($element, options) {\n    var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\n    var element = this.$element();\n    var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\n    this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, () => this._attachDragEvents(element), () => this._detachDragEvents(element), () => this._getDroppableCell(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options));\n  }\n\n  _createDragAppointment(itemData, settings, appointments) {\n    var appointmentIndex = appointments.option(\"items\").length;\n    settings.isCompact = false;\n    settings.virtual = false;\n\n    var items = appointments._renderItem(appointmentIndex, {\n      itemData: itemData,\n      settings: [settings]\n    });\n\n    return items[0];\n  }\n\n  _isApplyCompactAppointmentOffset() {\n    return this._supportCompactDropDownAppointments();\n  }\n\n  _supportCompactDropDownAppointments() {\n    return true;\n  }\n\n  _formatWeekday(date) {\n    return formatWeekday(date);\n  }\n\n  _formatWeekdayAndDay(date) {\n    return formatWeekday(date) + \" \" + dateLocalization.format(date, \"day\");\n  }\n\n  removeDroppableCellClass($cellElement) {\n    ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getCoordinatesByCell($cell) {\n    var columnIndex = $cell.index();\n    var rowIndex = $cell.parent().index();\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n    if (this.isVirtualScrolling() && !(isAllDayCell && !isVerticalGrouping)) {\n      rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n\n    if (this.isVirtualScrolling()) {\n      columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    }\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n\n  _isShowAllDayPanel() {\n    return this.option(\"showAllDayPanel\");\n  }\n\n  updateAppointments() {\n    var _this$dragBehavior;\n\n    this.invoke(\"renderAppointments\");\n    null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource();\n  }\n\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS));\n  }\n\n  _getRDateTableProps() {\n    return {\n      viewData: this.viewDataProvider.viewData,\n      dataCellTemplate: this.option(\"dataCellTemplate\"),\n      addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\n      groupOrientation: this.option(\"groupOrientation\")\n    };\n  }\n\n  _getTimeOffsetForStartViewDate() {\n    var startViewDate = this.getStartViewDate();\n    var startDayHour = Math.floor(this.option(\"startDayHour\"));\n    var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\n\n    if (isDSTChange && startDayHour !== startViewDate.getHours()) {\n      return toMs(\"hour\");\n    }\n\n    return 0;\n  }\n\n}\n\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, removeDroppableCellClass, getCellWidth, options) => {\n  var state = {\n    dragElement: void 0,\n    itemData: void 0\n  };\n  var cursorOffset = options.isSetCursorOffset ? () => {\n    var $dragElement = $(state.dragElement);\n    return {\n      x: $dragElement.width() / 2,\n      y: $dragElement.height() / 2\n    };\n  } : void 0;\n  return {\n    container: container,\n    dragTemplate: () => state.dragElement,\n    onDragStart: e => {\n      if (!isDefaultDraggingMode) {\n        detachGeneralEvents();\n      }\n\n      var canceled = e.cancel;\n      var event = e.event;\n      var $itemElement = $(e.itemElement);\n      var appointments = e.component._appointments;\n      state.itemData = options.getItemData(e.itemElement, appointments);\n      var settings = options.getItemSettings($itemElement, e);\n      var initialPosition = options.initialPosition;\n\n      if (state.itemData && !state.itemData.disabled) {\n        event.data = event.data || {};\n\n        if (!canceled) {\n          if (!settings.isCompact) {\n            dragBehavior.updateDragSource(state.itemData, settings);\n          }\n\n          state.dragElement = ((itemData, settings, appointments) => {\n            var appointmentIndex = appointments.option(\"items\").length;\n            settings.isCompact = false;\n            settings.virtual = false;\n\n            var items = appointments._renderItem(appointmentIndex, {\n              itemData: itemData,\n              settings: [settings]\n            });\n\n            return items[0];\n          })(state.itemData, settings, appointments);\n\n          event.data.itemElement = state.dragElement;\n          event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\n          event.data.itemData = state.itemData;\n          event.data.itemSettings = settings;\n          dragBehavior.onDragStart(event.data);\n          resetPosition($(state.dragElement));\n        }\n      }\n    },\n    onDragMove: () => {\n      if (isDefaultDraggingMode) {\n        return;\n      }\n\n      var appointmentWidth = $(state.dragElement).width();\n      var isWideAppointment = appointmentWidth > getCellWidth();\n      var dragElementContainer = $(state.dragElement).parent();\n      var boundingRect = getBoundingRect(dragElementContainer.get(0));\n      var newX = boundingRect.left + 10;\n      var newY = boundingRect.top + 10;\n      var elements = isWideAppointment ? getElementsFromPoint(newX, newY) : getElementsFromPoint(newX + appointmentWidth / 2, newY);\n      var droppableCell = elements.filter(el => {\n        var classList = el.classList;\n        return classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS);\n      })[0];\n\n      if (droppableCell) {\n        var oldDroppableCell = getDroppableCell();\n\n        if (!oldDroppableCell.is(droppableCell)) {\n          removeDroppableCellClass();\n        }\n\n        $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    },\n    onDragEnd: e => {\n      var _state$dragElement;\n\n      if (!isDefaultDraggingMode) {\n        attachGeneralEvents();\n      }\n\n      if (state.itemData && !state.itemData.disabled) {\n        dragBehavior.onDragEnd(e);\n      }\n\n      null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\n      removeDroppableCellClass();\n    },\n    cursorOffset: cursorOffset,\n    filter: options.filter\n  };\n};\n\nexport default SchedulerWorkSpace;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.js"],"names":["_extends","$","domAdapter","eventsEngine","data","elementData","dateUtils","getWindow","hasWindow","getPublicElement","extend","each","getBoundingRect","getElementsFromPoint","messageLocalization","dateLocalization","noop","isDefined","addNamespace","isMouseEvent","pointerEvents","errors","name","clickEventName","contextMenuEventName","enter","dragEventEnter","leave","dragEventLeave","drop","dragEventDrop","Scrollable","HorizontalGroupedStrategy","VerticalGroupedStrategy","tableCreatorModule","tableCreator","VerticalShader","AppointmentDragBehavior","APPOINTMENT_SETTINGS_KEY","FIXED_CONTAINER_CLASS","VIRTUAL_CELL_CLASS","timeZoneUtils","WidgetObserver","resetPosition","locate","VirtualScrollingDispatcher","ViewDataProvider","dxrDateTableLayout","dxrAllDayPanelLayout","dxrAllDayPanelTitle","dxrTimePanelTableLayout","dxrGroupPanel","dxrDateHeader","VirtualSelectionState","Cache","isDateInRange","abstract","toMs","dateToMilliseconds","COMPONENT_CLASS","GROUPED_WORKSPACE_CLASS","VERTICAL_GROUPED_WORKSPACE_CLASS","WORKSPACE_VERTICAL_GROUP_TABLE_CLASS","WORKSPACE_WITH_BOTH_SCROLLS_CLASS","WORKSPACE_WITH_COUNT_CLASS","WORKSPACE_WITH_GROUP_BY_DATE_CLASS","WORKSPACE_WITH_ODD_CELLS_CLASS","TIME_PANEL_CLASS","TIME_PANEL_CELL_CLASS","TIME_PANEL_ROW_CLASS","ALL_DAY_PANEL_CLASS","ALL_DAY_TABLE_CLASS","ALL_DAY_CONTAINER_CLASS","ALL_DAY_TITLE_CLASS","ALL_DAY_TITLE_HIDDEN_CLASS","ALL_DAY_TABLE_CELL_CLASS","ALL_DAY_TABLE_ROW_CLASS","WORKSPACE_WITH_ALL_DAY_CLASS","WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS","WORKSPACE_WITH_MOUSE_SELECTION_CLASS","HORIZONTAL_SIZES_CLASS","VERTICAL_SIZES_CLASS","HEADER_PANEL_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CLASS","GROUP_HEADER_CONTENT_CLASS","DATE_TABLE_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_ROW_CLASS","DATE_TABLE_FOCUSED_CELL_CLASS","VIRTUAL_ROW_CLASS","DATE_TABLE_DROPPABLE_CELL_CLASS","SCHEDULER_HEADER_SCROLLABLE_CLASS","SCHEDULER_SIDEBAR_SCROLLABLE_CLASS","SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS","SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME","down","DragEventNames","ENTER","DROP","LEAVE","SCHEDULER_CELL_DXCLICK_EVENT_NAME","SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME","SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME","up","SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME","move","CELL_DATA","DATE_TABLE_CELL_BORDER","DATE_TABLE_MIN_CELL_WIDTH","DAY_MS","HOUR_MS","DRAG_AND_DROP_SELECTOR","concat","CELL_SELECTOR","ScrollSemaphore","constructor","counter","isFree","take","release","formatWeekday","date","getDayNames","getDay","SchedulerWorkSpace","viewDataProvider","_viewDataProvider","cache","_cache","virtualSelectionState","_virtualSelectionState","isAllDayPanelVisible","_isShowAllDayPanel","supportAllDayRow","isDateAndTimeView","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","_supportedKeys","clickHandler","e","preventDefault","stopPropagation","_selectedCells","length","$itemElement","option","$cellElement","target","_showPopup","_cellClickAction","event","cellElement","cellData","getCellData","arrowPressHandler","cell","_moveToCell","shiftKey","space","downArrow","$cell","_getCellFromNextRow","call","upArrow","rightArrow","$rightCell","_getCellFromNextColumn","leftArrow","$leftCell","_dispose","_this$virtualScrollin","virtualScrollingDispatcher","dispose","_isRTL","_getFocusedCell","_$focusedCell","_$dateTable","find","eq","_getAllFocusedCells","direction","$currentCell","cellIndex","index","$row","parent","children","_checkForViewBounds","$item","isMultiSelection","$focusedCell","$nextCell","nextColumnDirection","isDirectionNext","previousColumnDirection","isRTL","groupCount","_getGroupCount","isHorizontalGrouping","_isHorizontalGroupedWorkSpace","isGroupedByDate","totalCellCount","_getTotalCellCount","rowCellCount","_getCellCount","lastIndexInRow","currentIndex","step","isEdgeCell","_isEdgeCell","sign","directionSign","resultingSign","_isGroupEndCell","nextIndex","rowDirection","rightEdgeCellIndex","leftEdgeCellIndex","edgeCellIndex","isNextCellGreaterThanEdge","isNextCellLessThanEdge","isRightEdgeCell","isLeftEdgeCell","cellsInRow","currentCellIndex","result","endCell","startCell","_setSelectedAndFocusedCells","_dateTableScrollable","scrollToElement","updateViewData","isVirtualScrolling","$correctedCell","_correctCellForGroup","hasClass","_setSelectedCells","_setFocusedCell","arguments","_releaseFocusedCell","rowIndex","columnIndex","_getCoordinatesByCell","isAllDayCell","_hasAllDayClass","setFocusedCell","focusedCell","getFocusedCell","coordinates","allDay","_isVerticalGroupedWorkSpace","_dom_getAllDayPanelCell","_dom_getDateCell","_toggleFocusedCellClass","$firstCell","_releaseSelectedCells","_setSelectedCellsInVirtualMode","_setSelectedCellsInStandardMode","$selectedCells","_toggleFocusClass","setAria","selectedCellData","getSelectedCellData","map","_ref","startDate","endDate","groups","groupIndex","_selectionChangedAction","$previousCell","_$prevCell","orientation","$targetCells","_getCellsBetween","toArray","get","firstRow","firstColumn","isFirstAllDay","firstCell","setSelectedCells","_firstCell","_setSelectedCellsByCellData","getSelectedCells","isVirtualCell","isValidFocusedCell","cellGroupIndex","_getGroupIndexByCell","focusedCellGroupIndex","isDifferentTables","$first","$last","isAllDayTable","$cells","_getCells","firstIndex","lastIndex","buffer","slice","focusedGroupIndex","_","push","bind","_groupedStrategy","getGroupIndexByCell","isFocused","$element","$focusTarget","_focusTarget","toggleClass","_releaseSelectedAndFocusedCells","_focusInHandler","is","_isCellClick","_contextMenuHandled","apply","_focusOutHandler","_this$virtualSelectio","releaseSelectedAndFocusedCells","_getDefaultOptions","currentDate","Date","intervalCount","firstDayOfWeek","startDayHour","endDayHour","hoursInterval","activeStateEnabled","hoverStateEnabled","showAllDayPanel","allDayExpanded","onCellClick","crossScrollingEnabled","dataCellTemplate","timeCellTemplate","resourceCellTemplate","dateCellTemplate","allowMultipleCellSelection","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","groupOrientation","groupByDate","scrolling","mode","renovateRender","height","draggingMode","_optionChanged","args","invoke","_cleanWorkSpace","_cleanView","_removeAllDayElements","_initGrouping","repaint","_initGroupedStrategy","_createAllDayPanelElements","_toggleGroupByDateClass","isRenovatedRender","_toggleAllDayVisibility","renderRWorkspace","_changeAllDayVisibility","_attachTablesEvents","headerPanelOffsetRecalculate","_updateScrollable","_createSelectionChangedAction","_createCellClickAction","_attachContextMenuEvent","_toggleWorkSpaceCountClass","_toggleFixedScrollableClass","_toggleHorizontalScrollClass","_dateTableScrollableConfig","_dimensionChanged","_isVirtualModeOn","_this$virtualScrollin2","_toggleGroupedClass","_toggleWorkSpaceWithOddCells","updateDimensions","_renderView","_setTableSizes","clear","_init","_headerSemaphore","_sideBarSemaphore","_dataTableSemaphore","_activeStateUnit","_maxAllowedVerticalPosition","_maxAllowedPosition","addClass","_getElementClass","_toggleGroupingDirectionClass","strategyName","_getDefaultGroupStrategy","Strategy","_isWorkSpaceWithCount","_isWorkspaceWithOddCells","_getRealGroupOrientation","_getTimePanelClass","_getDateTableClass","_getDateTableRowClass","_getDateTableCellClass","i","j","cellClass","_needApplyLastGroupCellClass","addAdditionalGroupCellClasses","_getGroupRowClass","_getGroupHeaderClass","_getGroupHeaderContentClass","_initWorkSpaceUnits","_$headerPanel","_$thead","appendTo","_$fixedContainer","_$allDayContainer","_initAllDayPanelElements","createRAllDayPanelElements","_$timePanel","_$groupTable","_allDayTitles","_allDayTables","_allDayPanels","_$allDayPanel","_$allDayTitle","$allDayTitle","text","format","_$allDayTable","append","_initDateTableScrollable","$dateTableScrollable","_createComponent","config","useKeyboard","bounceEnabled","updateManually","_needCreateCrossScrolling","_createCrossScrollingConfig","onScroll","_sidebarScrollable","scrollTo","top","scrollOffset","_headerScrollable","left","onEnd","notifyObserver","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_createWorkSpaceStaticElements","$content","_createHeaderScrollable","_createSidebarScrollable","prepend","$headerScrollable","_headerScrollableConfig","showScrollbar","useNative","$timePanelScrollable","_visibilityChanged","visible","_updateGroupTableHeight","_attachTableClasses","_addTableClass","_attachHeaderTableClasses","$el","className","cellWidth","getCellWidth","getCellMinWidth","minWidth","getWorkSpaceMinWidth","width","_cleanAllowedPositions","_getRowCount","_getRowCountWithAllDayRows","allDayRowCount","_initMarkup","_initVirtualScrolling","_attachEvents","_setFocusOnCellByOption","renovatedRenderSupported","_render","_renderDateTimeIndication","_setIndicationUpdateInterval","_setFirstViewDate","renderRGroupPanel","_applyCellTemplates","_renderGroupHeader","_renderDateHeader","_renderTimePanel","_renderGroupAllDayPanel","_renderDateTable","_renderAllDayPanel","_shader","onDataSourceChanged","preRenderAppointments","options","isGroupedAllDayPanel","generateRenderOptions","isProvideVirtualCellsWidth","_this$_getToday","verticalGroupCount","horizontalGroupCount","allDayElements","_insertAllDayRowsIntoDateTable","rowCountInGroup","cellCount","rowCount","_getTotalRowCount","cellCountInGroupRow","cellDataGetters","_getCellData","startRowIndex","startCellIndex","totalRowCount","getDateHeaderText","_getHeaderText","getDateHeaderDate","_getDateByIndex","getTimeCellDate","_getTimeCellDate","today","_getToday","groupsList","_getAllGroups","isVerticalGrouping","getRenderState","_this$virtualScrollin3","isGenerateNewViewData","update","renderRHeaderPanel","renderRTimeTable","renderRDateTable","renderRAllDayPanel","updateRSelection","renderRComponent","_getRDateTableProps","baseColSpan","columnCountPerGroup","_attachGroupCountAttr","_getGroupHeaderContainer","_detachGroupCountAttr","viewData","horizontalVirtualScrolling","renderState","renovatedAllDayPanel","timePanelData","isRenderDateHeader","dateHeaderData","groupPanelCellBaseColSpan","parentElement","componentClass","componentName","viewModel","component","container","selectedCells","_setHorizontalGroupHeaderCellsHeight","_refreshDateTimeIndication","_data$","cells","_getAllCells","forEach","_isGroupsSpecified","_getGroupIndexByResourceId","findCellPositionInMap","isAllDay","getCoordinatesByDate","_index","resources","id","resourceTree","_getGroupIndexRecursively","currentKey","currentValue","reduce","prevIndex","_ref2","leafIndex","value","areValuesEqual","_getCalculatedFirstDayOfWeek","firstDayOfWeekOption","_firstDayOfWeek","firstDayOfWeekIndex","_firstViewDate","getFirstWeekDate","_getViewStartByOptions","_setStartDayHour","trimTime","_getStartViewDate","diff","getTime","_getIntervalDuration","_getHeaderDate","getStartViewDate","setHours","_attachClickEvent","that","pointerDownAction","_createAction","_pointerDownHandler","cellSelector","off","on","which","_createActionByOption","afterExecute","_cellClickHandler","$target","_hasFocusClass","_showAddAppointmentPopup","firstCellData","first","lastCellData","last","_createContextMenuAction","eventName","NAME","_contextMenuHandler","_contextMenuAction","_getDateHeaderContainer","$container","cellTemplates","groupRows","_makeGroupRows","elements","templates","template","groupedAttr","getGroupCountAttr","removeAttr","attr","count","headerPanelHeight","getHeaderPanelHeight","headerHeight","allDayPanelHeight","getAllDayTableHeight","css","paddingBottom","marginBottom","parseInt","tableCreatorStrategy","VERTICAL","HORIZONTAL","makeGroupedTable","groupHeaderRowClass","groupRowClass","groupHeaderClass","groupHeaderContentClass","_getDateHeaderTemplate","$headerRow","cellTemplate","repeatCount","_getCalculateHeaderCellRepeatCount","templateCallbacks","templateIndex","_renderDateHeaderTemplate","colSpan","_cellIndex","_templateIndex","panelCellIndex","_getHeaderPanelCellClass","render","model","_getGroupsForDateHeaderTemplate","indexMultiplier","_getGroupIndex","groupsArray","_getCellGroups","_getGroupsObjectFromGroupsArray","calculateHeaderCellRepeatCount","_renderTableBody","_getAllDayPanelCellClass","rowClass","_getAllDayCellData","_getDateByCellIndexes","key","isUpdateScrollable","toggle","calculateTimeCellRepeatCount","startViewDate","getDateWithoutTimezoneChange","_getTimePanelRowCount","_getTimeCellClass","getCellText","_getTimeCellDateCore","getCellDate","getTemplateData","_getCellCountInDay","skipRound","_calculateDayDuration","Math","ceil","timeCellDuration","round","getCellDuration","cellCountInDay","setMilliseconds","getMilliseconds","_getTimeOffsetForStartViewDate","insertAllDayRowsIntoDateTable","getTotalCellCount","includeAllDayPanelRows","getTotalRowCount","_prepareCellData","calculateEndDate","_getTableAllDay","getGroupIndex","_getInterval","len","items","_getPathToLeaf","tree","leaf","findLeafByIndex","_leaf","makeBranch","reverse","Array","path","currentGroups","_ref3","element","_attachDragEvents","_attachPointerEvents","_detachDragEvents","checkDropTarget","_isOutsideScrollable","removeDroppableCellClass","isPointerDown","getDocument","removeClass","_getDateTables","add","_getDateTable","_getAllDayTable","_interval","headerIndex","_getDateForHeaderText","_getFormat","_calculateCellIndex","calculateCellIndex","delayCellTemplateRendering","makeTable","remove","_this$virtualSelectio2","_this$_shader","_cleanTableWidths","_this$_$allDayTable","_this$_$sidebarTable","empty","_$sidebarTable","clean","_hiddenInterval","_clean","_disposeRenovatedComponents","_this$renovatedAllDay","_this$renovatedDateTa","_this$renovatedTimePa","_this$renovatedGroupP","_this$renovatedHeader","renovatedDateTable","renovatedTimePanel","renovatedGroupPanel","renovatedHeaderPanel","getWorkArea","getScrollable","getScrollableScrollTop","scrollTop","getGroupedScrollableScrollTop","getScrollableScrollLeft","scrollLeft","getScrollableOuterWidth","scrollWidth","getScrollableContainer","outerHeight","getTimePanelWidth","getGroupTableWidth","outerWidth","getWorkSpaceLeftOffset","getLeftOffset","getGroupedStrategy","_getCellCoordinatesByIndex","floor","patchedIndexes","_patchCellIndex","firstViewDate","firstViewDateTime","millisecondsOffset","_getMillisecondsOffset","offsetByCount","_getOffsetByCount","startViewDateOffset","setTime","getTimezonesDifference","_calculateHiddenInterval","dayCount","_getHiddenInterval","getVisibleDayDuration","_getIntervalBetween","startDayTime","timeZoneOffset","fullInterval","days","_getDaysOfInterval","weekendsCount","_getWeekendsCount","_getGroupIndexes","appointmentResources","_updateIndex","_getDroppableCell","_getWorkSpaceWidth","totalWidth","timePanelWidth","groupTableWidth","_getCellPositionByIndex","inAllDayRow","cellCoordinates","_getCellByCoordinates","_getCellPositionWithCache","_getCellPosition","setCellDataCache","position","indexes","prepareCellIndexes","_getDateTableBorder","_getDateTableBorderOffset","_getGroupHeaderCellsContent","_getGroupHeaderCells","_getScrollCoordinates","hours","minutes","findGlobalCellPosition","calculateCoordinatesByDataAndPosition","$dateTableScrollableElement","scrollableSize","window","isTargetInAllDayPanel","closest","isOutsideHorizontalScrollable","pageX","scrollX","isOutsideVerticalScrollable","pageY","scrollY","JSON","stringify","set","setCellDataCacheAlias","appointment","geometry","aliasKey","keepOriginalHours","$focusedCells","_getMultipleCellsData","currentCell","_getCellDataInRenovatedView","_getVirtualRowOffset","_this$virtualScrollin4","virtualRowOffset","_getVirtualCellOffset","_this$virtualScrollin5","virtualCellOffset","topVirtualRowsCount","leftVirtualCellsCount","_getHorizontalMax","correctedGroupIndex","max","getHorizontalMax","cellInfo","positionByMap","calculateCellPositionByView","shift","getPositionShift","getTimeShift","horizontalHMax","Error","cellPosition","hMax","vMax","getVerticalMax","getCellIndexByDate","_getOffsetByAllDayPanel","_getGroupTop","timeInterval","dateTimeStamp","timeShift","getCellHeight","currentDayStart","cellDuration","currentDayEndHour","timeZoneDifference","currentDateTime","currentDayStartTime","minTime","_isSkippedData","getCoordinatesByDateInGroup","groupIndices","getDroppableCellIndex","$droppableCell","getDataByDroppableCell","getDateRange","getEndViewDateByEndDayHour","getRoundedCellWidth","startIndex","useCache","callbackResult","getAllDayHeight","getAllDayOffset","getMaxAllowedPosition","validGroupIndex","getRMaxAllowedHorizontalPosition","getMaxAllowedHorizontalPosition","isRtl","maxPosition","getLastGroupCellPosition","getMaxAllowedVerticalPosition","getRMaxAllowedVerticalPosition","getMaxAllowedVerticalPositionStandard","row","getFixedContainer","getAllDayContainer","getCellIndexByCoordinates","cellHeight","leftOffset","topIndex","leftIndex","getEndViewDate","dateOfLastViewCell","getDateOfLastViewCell","endDateOfLastViewCell","calculateEndViewDate","_adjustEndViewDateByDaylightDiff","endTime","dateTimeFromDecimal","daylightDiff","getDaylightOffsetInMs","_getEndViewDateTimeDiff","getIntervalDuration","getGroupBounds","groupedDataMap","getVirtualScrollingGroupBoundsOffset","getGroupBoundsOffset","startOffset","right","needRecalculateResizableArea","getCellDataByCoordinates","getVisibleBounds","$scrollable","scrolledCellCount","bottom","updateScrollPosition","scheduler","newDate","timeZoneCalculator","createDate","needUpdateScrollPosition","_getCellsInViewport","time","trimmedTime","currentResult","cellStartDate","cellEndDate","cellStartTime","cellEndTime","totalColumnCount","scrollableScrollTop","scrollableScrollLeft","fullScrolledRowCount","scrolledRowCount","fullScrolledColumnCount","scrolledColumnCount","columnCount","getGroupWidth","groupedData","dateTableGroupedMap","groupLength","currentPosition","scrollToTime","_isValidScrollDate","scrollable","scrollBy","throwWarning","isScrollToAllDay","getHours","getMinutes","offset","scrollableHeight","scrollableWidth","xShift","yShift","setTimeout","min","log","getDistanceBetweenCells","endIndex","needApplyCollectorOffset","initDragBehavior","dragBehavior","_createDragBehavior","getItemData","itemElement","appointments","_getItemData","getItemSettings","_createDragBehaviorBase","isDefaultDraggingMode","addTo","createDragBehaviorConfig","_createDragAppointment","itemData","settings","appointmentIndex","isCompact","virtual","_renderItem","_isApplyCompactAppointmentOffset","_supportCompactDropDownAppointments","_formatWeekday","_formatWeekdayAndDay","updateAppointments","_this$dragBehavior","updateDragSource","_getTimePanelCells","addDateTableClass","isDSTChange","isTimezoneChangeInDate","attachGeneralEvents","detachGeneralEvents","getDroppableCell","state","dragElement","cursorOffset","isSetCursorOffset","$dragElement","x","y","dragTemplate","onDragStart","canceled","cancel","_appointments","initialPosition","disabled","itemSettings","onDragMove","appointmentWidth","isWideAppointment","dragElementContainer","boundingRect","newX","newY","droppableCell","filter","el","classList","contains","oldDroppableCell","onDragEnd","_state$dragElement"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    data as elementData\r\n} from \"../../../core/element_data\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect,\r\n    getElementsFromPoint\r\n} from \"../../../core/utils/position\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    isMouseEvent\r\n} from \"../../../events/utils/index\";\r\nimport pointerEvents from \"../../../events/pointer\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../events/click\";\r\nimport {\r\n    name as contextMenuEventName\r\n} from \"../../../events/contextmenu\";\r\nimport {\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    drop as dragEventDrop\r\n} from \"../../../events/drag\";\r\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\r\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\r\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\r\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\r\nimport {\r\n    APPOINTMENT_SETTINGS_KEY,\r\n    FIXED_CONTAINER_CLASS,\r\n    VIRTUAL_CELL_CLASS\r\n} from \"../constants\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nimport WidgetObserver from \"../base/widgetObserver\";\r\nimport {\r\n    resetPosition,\r\n    locate\r\n} from \"../../../animation/translator\";\r\nimport VirtualScrollingDispatcher from \"./ui.scheduler.virtual_scrolling\";\r\nimport ViewDataProvider from \"./view_data_provider\";\r\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\r\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\r\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\r\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\r\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport VirtualSelectionState from \"./virtual_selection_state\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nimport {\r\n    isDateInRange\r\n} from \"./utils/base\";\r\nvar abstract = WidgetObserver.abstract;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\r\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\r\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\r\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\r\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\r\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\r\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\r\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\r\nvar TIME_PANEL_CLASS = \"dx-scheduler-time-panel\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\r\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\r\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\r\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\r\nvar ALL_DAY_TITLE_HIDDEN_CLASS = \"dx-scheduler-all-day-title-hidden\";\r\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\r\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\r\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\r\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\r\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\r\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\r\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\r\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar GROUP_ROW_CLASS = \"dx-scheduler-group-row\";\r\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\r\nvar GROUP_HEADER_CONTENT_CLASS = \"dx-scheduler-group-header-content\";\r\nvar DATE_TABLE_CLASS = \"dx-scheduler-date-table\";\r\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\r\nvar DATE_TABLE_ROW_CLASS = \"dx-scheduler-date-table-row\";\r\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\r\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\r\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\r\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\r\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\r\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\r\nvar DragEventNames = {\r\n    ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\r\n    DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\r\n    LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\r\n};\r\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\r\nvar CELL_DATA = \"dxCellData\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nvar DAY_MS = toMs(\"day\");\r\nvar HOUR_MS = toMs(\"hour\");\r\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\r\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\r\nclass ScrollSemaphore {\r\n    constructor() {\r\n        this.counter = 0\r\n    }\r\n    isFree() {\r\n        return 0 === this.counter\r\n    }\r\n    take() {\r\n        this.counter++\r\n    }\r\n    release() {\r\n        this.counter--;\r\n        if (this.counter < 0) {\r\n            this.counter = 0\r\n        }\r\n    }\r\n}\r\nvar formatWeekday = function(date) {\r\n    return dateLocalization.getDayNames(\"abbreviated\")[date.getDay()]\r\n};\r\nclass SchedulerWorkSpace extends WidgetObserver {\r\n    get viewDataProvider() {\r\n        if (!this._viewDataProvider) {\r\n            this._viewDataProvider = new ViewDataProvider(this)\r\n        }\r\n        return this._viewDataProvider\r\n    }\r\n    get cache() {\r\n        if (!this._cache) {\r\n            this._cache = new Cache\r\n        }\r\n        return this._cache\r\n    }\r\n    get virtualSelectionState() {\r\n        if (!this._virtualSelectionState) {\r\n            this._virtualSelectionState = new VirtualSelectionState(this.viewDataProvider)\r\n        }\r\n        return this._virtualSelectionState\r\n    }\r\n    get isAllDayPanelVisible() {\r\n        return this._isShowAllDayPanel() && this.supportAllDayRow()\r\n    }\r\n    get isDateAndTimeView() {\r\n        return true\r\n    }\r\n    get verticalGroupTableClass() {\r\n        return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"vertical\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    _supportedKeys() {\r\n        var clickHandler = function(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            if (this._selectedCells && this._selectedCells.length) {\r\n                var $itemElement = $(this.option(\"focusedElement\"));\r\n                var $cellElement = $($itemElement.length ? $itemElement : this._selectedCells);\r\n                e.target = this._selectedCells;\r\n                this._showPopup = true;\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    cellElement: $(this._selectedCells),\r\n                    cellData: this.getCellData($cellElement)\r\n                })\r\n            }\r\n        };\r\n        var arrowPressHandler = function(e, cell) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this._moveToCell(cell, e.shiftKey)\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            enter: clickHandler,\r\n            space: clickHandler,\r\n            downArrow: function(e) {\r\n                var $cell = this._getCellFromNextRow(\"next\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $cell)\r\n            },\r\n            upArrow: function(e) {\r\n                var $cell = this._getCellFromNextRow(\"prev\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $cell)\r\n            },\r\n            rightArrow: function(e) {\r\n                var $rightCell = this._getCellFromNextColumn(\"next\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $rightCell)\r\n            },\r\n            leftArrow: function(e) {\r\n                var $leftCell = this._getCellFromNextColumn(\"prev\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $leftCell)\r\n            }\r\n        })\r\n    }\r\n    _dispose() {\r\n        var _this$virtualScrollin;\r\n        super._dispose();\r\n        null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.dispose()\r\n    }\r\n    _isRTL() {\r\n        return this.option(\"rtlEnabled\")\r\n    }\r\n    _getFocusedCell() {\r\n        return this._$focusedCell || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0)\r\n    }\r\n    _getAllFocusedCells() {\r\n        return this._selectedCells || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0)\r\n    }\r\n    _getCellFromNextRow(direction) {\r\n        var $currentCell = this._$focusedCell;\r\n        if (isDefined($currentCell)) {\r\n            var cellIndex = $currentCell.index();\r\n            var $row = $currentCell.parent();\r\n            var $cell = $row[direction]().children().eq(cellIndex);\r\n            $cell = this._checkForViewBounds($cell);\r\n            return $cell\r\n        }\r\n    }\r\n    _checkForViewBounds($item) {\r\n        if (!$item.length) {\r\n            $item = this._$focusedCell\r\n        }\r\n        return $item\r\n    }\r\n    _getCellFromNextColumn(direction, isMultiSelection) {\r\n        var $focusedCell = this._$focusedCell;\r\n        if (!isDefined($focusedCell)) {\r\n            return\r\n        }\r\n        var $nextCell;\r\n        var $row = $focusedCell.parent();\r\n        var nextColumnDirection = direction;\r\n        var isDirectionNext = \"next\" === direction;\r\n        var previousColumnDirection = isDirectionNext ? \"prev\" : \"next\";\r\n        var isRTL = this._isRTL();\r\n        var groupCount = this._getGroupCount();\r\n        var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\r\n        var isGroupedByDate = this.isGroupedByDate();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var rowCellCount = isMultiSelection && !isGroupedByDate ? this._getCellCount() : totalCellCount;\r\n        var lastIndexInRow = rowCellCount - 1;\r\n        var currentIndex = $focusedCell.index();\r\n        var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\r\n        var isEdgeCell = this._isEdgeCell(isHorizontalGrouping ? totalCellCount - 1 : lastIndexInRow, currentIndex, step, direction);\r\n        var sign = isRTL ? 1 : -1;\r\n        var directionSign = isDirectionNext ? 1 : -1;\r\n        var resultingSign = sign * directionSign;\r\n        if (isEdgeCell || isMultiSelection && this._isGroupEndCell($focusedCell, direction)) {\r\n            var nextIndex = currentIndex - resultingSign * step + resultingSign * rowCellCount;\r\n            var rowDirection = isRTL ? previousColumnDirection : nextColumnDirection;\r\n            $nextCell = $row[rowDirection]().children().eq(nextIndex);\r\n            $nextCell = this._checkForViewBounds($nextCell)\r\n        } else {\r\n            $nextCell = $row.children().eq(currentIndex - resultingSign * step)\r\n        }\r\n        return $nextCell\r\n    }\r\n    _isEdgeCell(lastIndexInRow, cellIndex, step, direction) {\r\n        var isRTL = this._isRTL();\r\n        var isDirectionNext = \"next\" === direction;\r\n        var rightEdgeCellIndex = isRTL ? 0 : lastIndexInRow;\r\n        var leftEdgeCellIndex = isRTL ? lastIndexInRow : 0;\r\n        var edgeCellIndex = isDirectionNext ? rightEdgeCellIndex : leftEdgeCellIndex;\r\n        var isNextCellGreaterThanEdge = cellIndex + step > edgeCellIndex;\r\n        var isNextCellLessThanEdge = cellIndex - step < edgeCellIndex;\r\n        var isRightEdgeCell = isRTL ? isNextCellLessThanEdge : isNextCellGreaterThanEdge;\r\n        var isLeftEdgeCell = isRTL ? isNextCellGreaterThanEdge : isNextCellLessThanEdge;\r\n        return isDirectionNext ? isRightEdgeCell : isLeftEdgeCell\r\n    }\r\n    _isGroupEndCell($cell, direction) {\r\n        if (this.isGroupedByDate()) {\r\n            return false\r\n        }\r\n        var isDirectionNext = \"next\" === direction;\r\n        var cellsInRow = this._getCellCount();\r\n        var currentCellIndex = $cell.index();\r\n        var result = currentCellIndex % cellsInRow;\r\n        var endCell = isDirectionNext ? cellsInRow - 1 : 0;\r\n        var startCell = isDirectionNext ? 0 : cellsInRow - 1;\r\n        return this._isRTL() ? result === startCell : result === endCell\r\n    }\r\n    _moveToCell($cell, isMultiSelection) {\r\n        isMultiSelection = isMultiSelection && this.option(\"allowMultipleCellSelection\");\r\n        this._setSelectedAndFocusedCells($cell, isMultiSelection);\r\n        this._dateTableScrollable.scrollToElement($cell)\r\n    }\r\n    _setSelectedAndFocusedCells($cell, isMultiSelection) {\r\n        if (!isDefined($cell) || !$cell.length) {\r\n            return\r\n        }\r\n        var updateViewData = this.isVirtualScrolling();\r\n        var $correctedCell = $cell;\r\n        if (isMultiSelection) {\r\n            $correctedCell = this._correctCellForGroup($cell)\r\n        }\r\n        if ($correctedCell.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            return\r\n        }\r\n        this._setSelectedCells($correctedCell, isMultiSelection);\r\n        this._setFocusedCell($correctedCell, updateViewData)\r\n    }\r\n    _setFocusedCell($cell) {\r\n        var updateViewData = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        this._releaseFocusedCell();\r\n        var $correctedCell = $cell;\r\n        if (updateViewData) {\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($cell);\r\n            var isAllDayCell = this._hasAllDayClass($cell);\r\n            this.virtualSelectionState.setFocusedCell(rowIndex, columnIndex, isAllDayCell);\r\n            var focusedCell = this.virtualSelectionState.getFocusedCell();\r\n            var {\r\n                cellData: cellData,\r\n                coordinates: coordinates\r\n            } = focusedCell;\r\n            var {\r\n                allDay: allDay\r\n            } = cellData;\r\n            $correctedCell = allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates)\r\n        }\r\n        this._toggleFocusedCellClass(true, $correctedCell);\r\n        this._$focusedCell = $correctedCell\r\n    }\r\n    _setSelectedCells($firstCell, isMultiSelection) {\r\n        this._releaseSelectedCells();\r\n        this._selectedCells = [];\r\n        if (this.isVirtualScrolling()) {\r\n            this._setSelectedCellsInVirtualMode($firstCell, isMultiSelection)\r\n        } else {\r\n            this._setSelectedCellsInStandardMode($firstCell, isMultiSelection)\r\n        }\r\n        var $selectedCells = $(this._selectedCells);\r\n        this._toggleFocusClass(true, $selectedCells);\r\n        this.setAria(\"label\", \"Add appointment\", $selectedCells);\r\n        var selectedCellData = this.getSelectedCellData().map(_ref => {\r\n            var {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            } = _ref;\r\n            return {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groups: groups,\r\n                groupIndex: groupIndex || 0\r\n            }\r\n        });\r\n        this.option(\"selectedCellData\", selectedCellData);\r\n        this._selectionChangedAction({\r\n            selectedCellData: selectedCellData\r\n        })\r\n    }\r\n    _setSelectedCellsInStandardMode($firstCell, isMultiSelection) {\r\n        if (isMultiSelection) {\r\n            var $previousCell = this._$prevCell;\r\n            var orientation = \"day\" === this.option(\"type\") && (!this.option(\"groups\").length || \"vertical\" === this.option(\"groupOrientation\")) ? \"vertical\" : \"horizontal\";\r\n            var $targetCells = this._getCellsBetween($firstCell, $previousCell, orientation);\r\n            this._selectedCells = $targetCells.toArray()\r\n        } else {\r\n            this._selectedCells = [$firstCell.get(0)];\r\n            this._$prevCell = $firstCell\r\n        }\r\n    }\r\n    _setSelectedCellsInVirtualMode($firstCell, isMultiSelection) {\r\n        if (isMultiSelection) {\r\n            var {\r\n                rowIndex: firstRow,\r\n                columnIndex: firstColumn\r\n            } = this._getCoordinatesByCell($firstCell);\r\n            var isFirstAllDay = this._hasAllDayClass($firstCell);\r\n            var firstCell = {\r\n                rowIndex: firstRow,\r\n                columnIndex: firstColumn,\r\n                allDay: isFirstAllDay\r\n            };\r\n            this.virtualSelectionState.setSelectedCells(firstCell)\r\n        } else {\r\n            this._selectedCells = [$firstCell.get(0)];\r\n            this._$prevCell = $firstCell;\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($firstCell);\r\n            var isAllDayCell = this._hasAllDayClass($firstCell);\r\n            var _firstCell = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex,\r\n                allDay: isAllDayCell\r\n            };\r\n            this.virtualSelectionState.setSelectedCells(_firstCell, _firstCell)\r\n        }\r\n        this._setSelectedCellsByCellData(this.virtualSelectionState.getSelectedCells())\r\n    }\r\n    _correctCellForGroup($cell) {\r\n        if (this.isVirtualScrolling()) {\r\n            var isVirtualCell = $cell.hasClass(VIRTUAL_CELL_CLASS);\r\n            if (isVirtualCell) {\r\n                return this._$focusedCell\r\n            }\r\n            var cellData = this.getCellData($cell);\r\n            var isValidFocusedCell = this.virtualSelectionState.isValidFocusedCell(cellData);\r\n            return isValidFocusedCell ? $cell : this._$focusedCell\r\n        }\r\n        var $focusedCell = this._$focusedCell;\r\n        var cellGroupIndex = this._getGroupIndexByCell($cell);\r\n        var focusedCellGroupIndex = this._getGroupIndexByCell($focusedCell);\r\n        var isDifferentTables = this._hasAllDayClass($cell) !== this._hasAllDayClass($focusedCell);\r\n        return focusedCellGroupIndex !== cellGroupIndex || isDifferentTables ? $focusedCell : $cell\r\n    }\r\n    _getCellsBetween($first, $last, direction) {\r\n        var isAllDayTable = this._hasAllDayClass($last);\r\n        var $cells = this._getCells(isAllDayTable, direction);\r\n        var firstIndex = $cells.index($first);\r\n        var lastIndex = $cells.index($last);\r\n        if (firstIndex > lastIndex) {\r\n            var buffer = firstIndex;\r\n            firstIndex = lastIndex;\r\n            lastIndex = buffer\r\n        }\r\n        $cells = $cells.slice(firstIndex, lastIndex + 1);\r\n        if (this._getGroupCount() > 1) {\r\n            var result = [];\r\n            var focusedGroupIndex = this._getGroupIndexByCell($first);\r\n            each($cells, function(_, cell) {\r\n                var groupIndex = this._getGroupIndexByCell($(cell));\r\n                if (focusedGroupIndex === groupIndex) {\r\n                    result.push(cell)\r\n                }\r\n            }.bind(this));\r\n            $cells = $(result)\r\n        }\r\n        return $cells\r\n    }\r\n    _hasAllDayClass($cell) {\r\n        return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS)\r\n    }\r\n    _getGroupIndexByCell($cell) {\r\n        if (this.isVirtualScrolling()) {\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($cell);\r\n            var isAllDayCell = $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\r\n            return this.viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell).groupIndex\r\n        }\r\n        return this._groupedStrategy.getGroupIndexByCell($cell)\r\n    }\r\n    _toggleFocusedCellClass(isFocused, $element) {\r\n        var $focusTarget = $element && $element.length ? $element : this._focusTarget();\r\n        $focusTarget.toggleClass(DATE_TABLE_FOCUSED_CELL_CLASS, isFocused)\r\n    }\r\n    _releaseSelectedAndFocusedCells() {\r\n        this._releaseFocusedCell();\r\n        this._releaseSelectedCells();\r\n        this.option(\"selectedCellData\", [])\r\n    }\r\n    _releaseFocusedCell() {\r\n        var $cell = this._$focusedCell;\r\n        if (isDefined($cell) && $cell.length) {\r\n            this._toggleFocusedCellClass(false, $cell);\r\n            this.setAria(\"label\", void 0, $cell)\r\n        }\r\n    }\r\n    _releaseSelectedCells() {\r\n        var $cells = $(this._selectedCells);\r\n        if (isDefined($cells) && $cells.length) {\r\n            this._toggleFocusClass(false, $cells);\r\n            this.setAria(\"label\", void 0, $cells)\r\n        }\r\n    }\r\n    _focusInHandler(e) {\r\n        if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\r\n            delete this._isCellClick;\r\n            delete this._contextMenuHandled;\r\n            super._focusInHandler.apply(this, arguments);\r\n            var $cell = this._getFocusedCell();\r\n            this._setSelectedAndFocusedCells($cell)\r\n        }\r\n    }\r\n    _focusOutHandler() {\r\n        super._focusOutHandler.apply(this, arguments);\r\n        if (!this._contextMenuHandled) {\r\n            var _this$virtualSelectio;\r\n            this._releaseSelectedAndFocusedCells();\r\n            null === (_this$virtualSelectio = this.virtualSelectionState) || void 0 === _this$virtualSelectio ? void 0 : _this$virtualSelectio.releaseSelectedAndFocusedCells()\r\n        }\r\n    }\r\n    _focusTarget() {\r\n        return this.$element()\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            currentDate: new Date,\r\n            intervalCount: 1,\r\n            startDate: null,\r\n            firstDayOfWeek: void 0,\r\n            startDayHour: 0,\r\n            endDayHour: 24,\r\n            hoursInterval: .5,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            groups: [],\r\n            showAllDayPanel: true,\r\n            allDayExpanded: false,\r\n            onCellClick: null,\r\n            crossScrollingEnabled: false,\r\n            dataCellTemplate: null,\r\n            timeCellTemplate: null,\r\n            resourceCellTemplate: null,\r\n            dateCellTemplate: null,\r\n            allowMultipleCellSelection: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true,\r\n            groupOrientation: \"horizontal\",\r\n            selectedCellData: [],\r\n            groupByDate: false,\r\n            scrolling: {\r\n                mode: \"standard\"\r\n            },\r\n            renovateRender: true,\r\n            height: void 0,\r\n            draggingMode: \"outlook\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"startDayHour\":\r\n            case \"endDayHour\":\r\n                this.invoke(\"validateDayHours\");\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"dateCellTemplate\":\r\n            case \"resourceCellTemplate\":\r\n            case \"dataCellTemplate\":\r\n            case \"timeCellTemplate\":\r\n            case \"hoursInterval\":\r\n            case \"firstDayOfWeek\":\r\n            case \"currentDate\":\r\n            case \"startDate\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"groups\":\r\n                this._cleanView();\r\n                this._removeAllDayElements();\r\n                this._initGrouping();\r\n                this.repaint();\r\n                break;\r\n            case \"groupOrientation\":\r\n                this._initGroupedStrategy();\r\n                this._createAllDayPanelElements();\r\n                this._removeAllDayElements();\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                if (this._isVerticalGroupedWorkSpace()) {\r\n                    this._cleanView();\r\n                    this._removeAllDayElements();\r\n                    this._initGrouping();\r\n                    this.repaint()\r\n                } else if (!this.isRenovatedRender()) {\r\n                    this._toggleAllDayVisibility(true)\r\n                } else {\r\n                    this.renderRWorkspace()\r\n                }\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this._changeAllDayVisibility();\r\n                this._attachTablesEvents();\r\n                this.headerPanelOffsetRecalculate();\r\n                this._updateScrollable();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellContextMenu\":\r\n                this._attachContextMenuEvent();\r\n                break;\r\n            case \"intervalCount\":\r\n                this._cleanWorkSpace();\r\n                this._toggleWorkSpaceCountClass();\r\n                this._toggleFixedScrollableClass();\r\n                break;\r\n            case \"groupByDate\":\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this._toggleHorizontalScrollClass();\r\n                this._dateTableScrollable.option(this._dateTableScrollableConfig());\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"allowMultipleCellSelection\":\r\n            case \"selectedCellData\":\r\n                break;\r\n            case \"scrolling\":\r\n                if (this._isVirtualModeOn()) {\r\n                    if (!this.option(\"renovateRender\")) {\r\n                        this.option(\"renovateRender\", true)\r\n                    } else {\r\n                        this.repaint()\r\n                    }\r\n                } else {\r\n                    this.option(\"renovateRender\", false)\r\n                }\r\n                break;\r\n            case \"renovateRender\":\r\n                this.repaint();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _cleanWorkSpace() {\r\n        var _this$virtualScrollin2;\r\n        this._cleanView();\r\n        this._toggleGroupedClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        null === (_this$virtualScrollin2 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin2 ? void 0 : _this$virtualScrollin2.updateDimensions(true);\r\n        this._renderView();\r\n        this.option(\"crossScrollingEnabled\") && this._setTableSizes();\r\n        this.cache.clear()\r\n    }\r\n    _init() {\r\n        this._headerSemaphore = new ScrollSemaphore;\r\n        this._sideBarSemaphore = new ScrollSemaphore;\r\n        this._dataTableSemaphore = new ScrollSemaphore;\r\n        this._viewDataProvider = null;\r\n        this._virtualSelectionState = null;\r\n        this._activeStateUnit = CELL_SELECTOR;\r\n        this._maxAllowedVerticalPosition = [];\r\n        this._maxAllowedPosition = [];\r\n        super._init();\r\n        this._initGrouping();\r\n        this._toggleHorizontalScrollClass();\r\n        this._toggleWorkSpaceCountClass();\r\n        this._toggleGroupByDateClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass())\r\n    }\r\n    _initGrouping() {\r\n        this._initGroupedStrategy();\r\n        this._toggleGroupingDirectionClass();\r\n        this._toggleGroupByDateClass()\r\n    }\r\n    _initGroupedStrategy() {\r\n        var strategyName = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var Strategy = \"vertical\" === strategyName ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\r\n        this._groupedStrategy = new Strategy(this)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"horizontal\"\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isHorizontalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\")\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"))\r\n    }\r\n    _toggleGroupByDateClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate())\r\n    }\r\n    _toggleWorkSpaceCountClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount())\r\n    }\r\n    _isWorkSpaceWithCount() {\r\n        return this.option(\"intervalCount\") > 1\r\n    }\r\n    _toggleWorkSpaceWithOddCells() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells())\r\n    }\r\n    _isWorkspaceWithOddCells() {\r\n        return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling()\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getRealGroupOrientation() {\r\n        return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\"\r\n    }\r\n    _getTimePanelClass() {\r\n        return TIME_PANEL_CLASS\r\n    }\r\n    _getDateTableClass() {\r\n        return DATE_TABLE_CLASS\r\n    }\r\n    _getDateTableRowClass() {\r\n        return DATE_TABLE_ROW_CLASS\r\n    }\r\n    _getDateTableCellClass(i, j) {\r\n        var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._needApplyLastGroupCellClass() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1, i, j) : cellClass\r\n    }\r\n    _needApplyLastGroupCellClass() {\r\n        return true\r\n    }\r\n    _getGroupRowClass() {\r\n        return GROUP_ROW_CLASS\r\n    }\r\n    _getGroupHeaderClass(i) {\r\n        var cellClass = GROUP_HEADER_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1)\r\n    }\r\n    _getGroupHeaderContentClass() {\r\n        return GROUP_HEADER_CONTENT_CLASS\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._$headerPanel = $(\"<table>\");\r\n        this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\r\n        this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\r\n        this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\r\n        this._initAllDayPanelElements();\r\n        if (this.isRenovatedRender()) {\r\n            this.createRAllDayPanelElements()\r\n        } else {\r\n            this._createAllDayPanelElements()\r\n        }\r\n        this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\r\n        this._$dateTable = $(\"<table>\");\r\n        this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS)\r\n    }\r\n    _initAllDayPanelElements() {\r\n        this._allDayTitles = [];\r\n        this._allDayTables = [];\r\n        this._allDayPanels = []\r\n    }\r\n    createRAllDayPanelElements() {\r\n        this._$allDayPanel = $(\"<div>\");\r\n        this._$allDayTitle = $(\"<div>\").appendTo(this.$element())\r\n    }\r\n    _createAllDayPanelElements() {\r\n        var groupCount = this._getGroupCount();\r\n        if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\r\n                this._allDayTitles.push($allDayTitle);\r\n                this._$allDayTable = $(\"<table>\");\r\n                this._allDayTables.push(this._$allDayTable);\r\n                this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\r\n                this._allDayPanels.push(this._$allDayPanel)\r\n            }\r\n        } else {\r\n            this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\r\n            this._$allDayTable = $(\"<table>\");\r\n            this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable)\r\n        }\r\n    }\r\n    _initDateTableScrollable() {\r\n        var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\r\n        this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig())\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            bounceEnabled: false,\r\n            updateManually: true\r\n        };\r\n        if (this._needCreateCrossScrolling()) {\r\n            config = extend(config, this._createCrossScrollingConfig())\r\n        }\r\n        return config\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        var config = {};\r\n        config.direction = \"both\";\r\n        config.onScroll = e => {\r\n            this._dataTableSemaphore.take();\r\n            this._sideBarSemaphore.isFree() && this._sidebarScrollable && this._sidebarScrollable.scrollTo({\r\n                top: e.scrollOffset.top\r\n            });\r\n            this._headerSemaphore.isFree() && this._headerScrollable && this._headerScrollable.scrollTo({\r\n                left: e.scrollOffset.left\r\n            });\r\n            this._dataTableSemaphore.release()\r\n        };\r\n        config.onEnd = () => {\r\n            this.notifyObserver(\"updateResizableArea\", {})\r\n        };\r\n        return config\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this._createWorkSpaceStaticElements()\r\n        }\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._dateTableScrollable.$content().append(this._$allDayContainer, this._$groupTable, this._$timePanel, this._$dateTable);\r\n            this.$element().append(this._$fixedContainer, this._$headerPanel, this._dateTableScrollable.$element())\r\n        } else {\r\n            this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\r\n            this.$element().append(this._$fixedContainer, this._$headerPanel, this._$allDayContainer, this._$allDayPanel, this._dateTableScrollable.$element())\r\n        }\r\n    }\r\n    _createWorkSpaceScrollableElements() {\r\n        this.$element().append(this._$fixedContainer);\r\n        this._createHeaderScrollable();\r\n        this._createSidebarScrollable();\r\n        this.$element().append(this._dateTableScrollable.$element());\r\n        this._headerScrollable.$content().append(this._$headerPanel);\r\n        this._dateTableScrollable.$content().append(this._$dateTable);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._dateTableScrollable.$content().prepend(this._$allDayContainer);\r\n            this._sidebarScrollable.$content().append(this._$groupTable, this._$timePanel)\r\n        } else {\r\n            this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel)\r\n        }\r\n        this._sidebarScrollable.$content().append(this._$timePanel)\r\n    }\r\n    _createHeaderScrollable() {\r\n        var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this.$element());\r\n        this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig())\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"horizontal\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._headerSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                });\r\n                this._headerSemaphore.release()\r\n            }\r\n        };\r\n        return config\r\n    }\r\n    _createSidebarScrollable() {\r\n        var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this.$element());\r\n        this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"vertical\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._sideBarSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    top: e.scrollOffset.top\r\n                });\r\n                this._sideBarSemaphore.release()\r\n            }\r\n        })\r\n    }\r\n    _visibilityChanged(visible) {\r\n        this.cache.clear();\r\n        if (visible) {\r\n            this._updateGroupTableHeight()\r\n        }\r\n        if (visible && this._needCreateCrossScrolling()) {\r\n            this._setTableSizes()\r\n        }\r\n    }\r\n    _attachTableClasses() {\r\n        this._addTableClass(this._$dateTable, this._getDateTableClass());\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS)\r\n            }\r\n        } else {\r\n            this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS)\r\n        }\r\n    }\r\n    _attachHeaderTableClasses() {\r\n        this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS)\r\n    }\r\n    _addTableClass($el, className) {\r\n        $el && !$el.hasClass(className) && $el.addClass(className)\r\n    }\r\n    _setTableSizes() {\r\n        this._attachTableClasses();\r\n        var cellWidth = this.getCellWidth();\r\n        if (cellWidth < this.getCellMinWidth()) {\r\n            cellWidth = this.getCellMinWidth()\r\n        }\r\n        var minWidth = this.getWorkSpaceMinWidth();\r\n        var groupCount = this._getGroupCount();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var width = cellWidth * totalCellCount;\r\n        if (width < minWidth) {\r\n            width = minWidth\r\n        }\r\n        this._$headerPanel.width(width);\r\n        this._$dateTable.width(width);\r\n        this._$allDayTable && this._$allDayTable.width(width);\r\n        this._attachHeaderTableClasses();\r\n        this._updateGroupTableHeight();\r\n        this._updateScrollable()\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return this._groupedStrategy.getWorkSpaceMinWidth()\r\n    }\r\n    _dimensionChanged() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._setTableSizes()\r\n        }\r\n        this.headerPanelOffsetRecalculate();\r\n        this.cache.clear();\r\n        this._cleanAllowedPositions()\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\")\r\n    }\r\n    _getElementClass() {\r\n        return noop()\r\n    }\r\n    _getRowCount() {\r\n        return noop()\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        var allDayRowCount = this._isShowAllDayPanel() ? 1 : 0;\r\n        return this._getRowCount() + allDayRowCount\r\n    }\r\n    _getCellCount() {\r\n        return noop()\r\n    }\r\n    _initMarkup() {\r\n        this.cache.clear();\r\n        this._initWorkSpaceUnits();\r\n        this._initDateTableScrollable();\r\n        this._createWorkSpaceElements();\r\n        this._initVirtualScrolling();\r\n        super._initMarkup();\r\n        if (!this.option(\"crossScrollingEnabled\")) {\r\n            this._attachTableClasses();\r\n            this._attachHeaderTableClasses()\r\n        }\r\n        this._toggleGroupedClass();\r\n        this._toggleFixedScrollableClass();\r\n        this._renderView();\r\n        this._attachEvents();\r\n        this._setFocusOnCellByOption(this.option(\"selectedCellData\"))\r\n    }\r\n    isRenovatedRender() {\r\n        return this.renovatedRenderSupported() && this.option(\"renovateRender\")\r\n    }\r\n    _isVirtualModeOn() {\r\n        return \"virtual\" === this.option(\"scrolling.mode\")\r\n    }\r\n    isVirtualScrolling() {\r\n        return this.isRenovatedRender() && this._isVirtualModeOn()\r\n    }\r\n    _initVirtualScrolling() {\r\n        if (this.virtualScrollingDispatcher) {\r\n            this.virtualScrollingDispatcher.dispose();\r\n            this.virtualScrollingDispatcher = null\r\n        }\r\n        if (this.isVirtualScrolling()) {\r\n            this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this)\r\n        }\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _toggleGroupedClass() {\r\n        this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0)\r\n    }\r\n    _toggleFixedScrollableClass() {\r\n        return noop()\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        if (this.isRenovatedRender()) {\r\n            if (this._isVerticalGroupedWorkSpace()) {\r\n                this.renderRGroupPanel()\r\n            }\r\n        } else {\r\n            this._applyCellTemplates(this._renderGroupHeader())\r\n        }\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkspace()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderGroupAllDayPanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._updateGroupTableHeight();\r\n        this._shader = new VerticalShader(this)\r\n    }\r\n    onDataSourceChanged() {}\r\n    preRenderAppointments(options) {\r\n        this.option(\"allDayExpanded\", options.allDayExpanded)\r\n    }\r\n    isGroupedAllDayPanel() {\r\n        return this._isShowAllDayPanel() && this._isVerticalGroupedWorkSpace()\r\n    }\r\n    generateRenderOptions(isProvideVirtualCellsWidth) {\r\n        var _this$_getToday;\r\n        var groupCount = this._getGroupCount();\r\n        var verticalGroupCount = !this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\r\n        var horizontalGroupCount = this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\r\n        var allDayElements = this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0;\r\n        var rowCountInGroup = this._getRowCount();\r\n        var cellCount = this._getTotalCellCount(groupCount);\r\n        var rowCount = this._getTotalRowCount(groupCount, this._isVerticalGroupedWorkSpace());\r\n        var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var options = {\r\n            horizontalGroupCount: horizontalGroupCount,\r\n            verticalGroupCount: verticalGroupCount,\r\n            rowCountInGroup: rowCountInGroup,\r\n            cellCount: cellCount,\r\n            cellCountInGroupRow: this._getCellCount(),\r\n            cellDataGetters: [this._getCellData.bind(this)],\r\n            allDayElements: allDayElements,\r\n            startRowIndex: 0,\r\n            startCellIndex: 0,\r\n            groupOrientation: groupOrientation,\r\n            rowCount: rowCount,\r\n            totalRowCount: rowCount,\r\n            totalCellCount: cellCount,\r\n            groupCount: groupCount,\r\n            getDateHeaderText: this._getHeaderText.bind(this),\r\n            getDateHeaderDate: this._getDateByIndex.bind(this),\r\n            getTimeCellDate: this._getTimeCellDate.bind(this),\r\n            today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupsList: this._getAllGroups(),\r\n            isHorizontalGrouping: this._isHorizontalGroupedWorkSpace(),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth\r\n        };\r\n        if (this.isVirtualScrolling()) {\r\n            extend(options, this.virtualScrollingDispatcher.getRenderState())\r\n        }\r\n        return options\r\n    }\r\n    renovatedRenderSupported() {\r\n        return false\r\n    }\r\n    renderRWorkspace() {\r\n        var _this$virtualScrollin3;\r\n        var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        this._cleanAllowedPositions();\r\n        this.viewDataProvider.update(isGenerateNewViewData);\r\n        this.renderRHeaderPanel();\r\n        this.renderRTimeTable();\r\n        this.renderRDateTable();\r\n        this.renderRAllDayPanel();\r\n        this.updateRSelection();\r\n        null === (_this$virtualScrollin3 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin3 ? void 0 : _this$virtualScrollin3.updateDimensions()\r\n    }\r\n    renderRDateTable() {\r\n        this.renderRComponent(this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    renderRGroupPanel() {\r\n        var options = {\r\n            groups: this.option(\"groups\"),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            baseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\r\n            columnCountPerGroup: this._getCellCount()\r\n        };\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountAttr();\r\n            this.renderRComponent(this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options)\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n    }\r\n    renderRAllDayPanel() {\r\n        var visible = this._isShowAllDayPanel() && !this.isGroupedAllDayPanel();\r\n        if (this.supportAllDayRow() && !this._isVerticalGroupedWorkSpace()) {\r\n            this._toggleAllDayVisibility(false);\r\n            var groupCount = this._getGroupCount();\r\n            var cellCount = this._getTotalCellCount(groupCount);\r\n            var options = {\r\n                viewData: this.viewDataProvider.viewData,\r\n                visible: visible,\r\n                dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n                startCellIndex: 0,\r\n                cellCount: cellCount\r\n            };\r\n            if (this.isVirtualScrolling()) {\r\n                var {\r\n                    horizontalVirtualScrolling: horizontalVirtualScrolling\r\n                } = this.virtualScrollingDispatcher;\r\n                var renderState = null === horizontalVirtualScrolling || void 0 === horizontalVirtualScrolling ? void 0 : horizontalVirtualScrolling.getRenderState();\r\n                extend(options, _extends({}, renderState))\r\n            }\r\n            this.renderRComponent(this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\r\n            this.renderRComponent(this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {\r\n                visible: visible\r\n            });\r\n            this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS))\r\n        }\r\n        this._toggleAllDayVisibility(true)\r\n    }\r\n    renderRTimeTable() {\r\n        this.renderRComponent(this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\r\n            timePanelData: this.viewDataProvider.timePanelData,\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        })\r\n    }\r\n    renderRHeaderPanel() {\r\n        var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountAttr()\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n        this.renderRComponent(this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\r\n            dateHeaderData: this.viewDataProvider.dateHeaderData,\r\n            dateCellTemplate: this.option(\"dateCellTemplate\"),\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groups: this.option(\"groups\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            groupPanelCellBaseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\r\n            columnCountPerGroup: this._getCellCount(),\r\n            isRenderDateHeader: isRenderDateHeader\r\n        })\r\n    }\r\n    renderRComponent(parentElement, componentClass, componentName, viewModel) {\r\n        var component = this[componentName];\r\n        if (!component) {\r\n            var container = getPublicElement(parentElement);\r\n            component = this._createComponent(container, componentClass, _extends({}, viewModel, {\r\n                groupOrientation: this.option(\"groupOrientation\")\r\n            }));\r\n            this[componentName] = component\r\n        } else {\r\n            component.option(viewModel)\r\n        }\r\n    }\r\n    updateRSelection() {\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        var focusedCell = this.virtualSelectionState.getFocusedCell();\r\n        var selectedCells = this.virtualSelectionState.getSelectedCells();\r\n        if (null !== focusedCell && void 0 !== focusedCell && focusedCell.coordinates) {\r\n            var {\r\n                coordinates: coordinates,\r\n                cellData: cellData\r\n            } = focusedCell;\r\n            var $cell = !isVerticalGrouping && cellData.allDay ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\r\n            $cell && this._setFocusedCell($cell)\r\n        }\r\n        selectedCells && this._setSelectedCellsByCellData(selectedCells)\r\n    }\r\n    _updateGroupTableHeight() {\r\n        if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            this._setHorizontalGroupHeaderCellsHeight()\r\n        }\r\n    }\r\n    _renderDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        return noop()\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setFocusOnCellByOption(data) {\r\n        this._releaseSelectedAndFocusedCells();\r\n        this._setSelectedCellsByCellData(data)\r\n    }\r\n    _setSelectedCellsByCellData(data) {\r\n        var _data$;\r\n        var cells = [];\r\n        var $cells = this._getAllCells(null === data || void 0 === data ? void 0 : null === (_data$ = data[0]) || void 0 === _data$ ? void 0 : _data$.allDay);\r\n        var cellsInRow = this._getTotalCellCount(this._getGroupCount());\r\n        if (this.isVirtualScrolling()) {\r\n            var renderState = this.virtualScrollingDispatcher.getRenderState();\r\n            cellsInRow = renderState.cellCount || cellsInRow\r\n        }\r\n        data.forEach(cellData => {\r\n            var {\r\n                groups: groups,\r\n                startDate: startDate,\r\n                allDay: allDay,\r\n                index: index\r\n            } = cellData;\r\n            var {\r\n                groupIndex: groupIndex\r\n            } = cellData;\r\n            if (!groupIndex) {\r\n                groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0\r\n            }\r\n            var coordinates = this.isVirtualScrolling() ? this.viewDataProvider.findCellPositionInMap({\r\n                groupIndex: groupIndex,\r\n                startDate: startDate,\r\n                isAllDay: allDay,\r\n                index: index\r\n            }) : this.getCoordinatesByDate(startDate, groupIndex, allDay);\r\n            if (coordinates) {\r\n                var {\r\n                    rowIndex: rowIndex,\r\n                    cellIndex: cellIndex\r\n                } = coordinates;\r\n                var _index = rowIndex * cellsInRow + cellIndex;\r\n                var $cell = $cells[_index];\r\n                if (isDefined($cell)) {\r\n                    this._toggleFocusClass(true, $($cell));\r\n                    cells.push($cell)\r\n                }\r\n            }\r\n        });\r\n        this._selectedCells = cells\r\n    }\r\n    _isGroupsSpecified(resources) {\r\n        return this.option(\"groups\").length && resources\r\n    }\r\n    _getGroupIndexByResourceId(id) {\r\n        var groups = this.option(\"groups\");\r\n        var resourceTree = this.invoke(\"createResourcesTree\", groups);\r\n        if (!resourceTree.length) {\r\n            return 0\r\n        }\r\n        return this._getGroupIndexRecursively(resourceTree, id)\r\n    }\r\n    _getGroupIndexRecursively(resourceTree, id) {\r\n        var currentKey = resourceTree[0].name;\r\n        var currentValue = id[currentKey];\r\n        return resourceTree.reduce((prevIndex, _ref2) => {\r\n            var {\r\n                leafIndex: leafIndex,\r\n                value: value,\r\n                children: children\r\n            } = _ref2;\r\n            var areValuesEqual = currentValue === value;\r\n            if (areValuesEqual && void 0 !== leafIndex) {\r\n                return leafIndex\r\n            }\r\n            if (areValuesEqual) {\r\n                return this._getGroupIndexRecursively(children, id)\r\n            }\r\n            return prevIndex\r\n        }, 0)\r\n    }\r\n    _getCalculatedFirstDayOfWeek() {\r\n        var firstDayOfWeekOption = this._firstDayOfWeek();\r\n        var firstDayOfWeek = isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\r\n        return firstDayOfWeek\r\n    }\r\n    _setFirstViewDate() {\r\n        var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\r\n        this._firstViewDate = dateUtils.getFirstWeekDate(this._getViewStartByOptions(), firstDayOfWeek);\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getViewStartByOptions() {\r\n        if (!this.option(\"startDate\")) {\r\n            return this.option(\"currentDate\")\r\n        } else {\r\n            var startDate = dateUtils.trimTime(this._getStartViewDate());\r\n            var currentDate = this.option(\"currentDate\");\r\n            var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n            var endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\r\n            while (!isDateInRange(currentDate, startDate, endDate, diff)) {\r\n                startDate = endDate;\r\n                endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff)\r\n            }\r\n            return diff > 0 ? startDate : endDate\r\n        }\r\n    }\r\n    _getHeaderDate() {\r\n        return this.getStartViewDate()\r\n    }\r\n    _getStartViewDate() {\r\n        return this.option(\"startDate\")\r\n    }\r\n    _getIntervalDuration() {\r\n        return toMs(\"day\") * this.option(\"intervalCount\")\r\n    }\r\n    _setStartDayHour(date) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        if (isDefined(startDayHour)) {\r\n            date.setHours(startDayHour, startDayHour % 1 * 60, 0, 0)\r\n        }\r\n    }\r\n    _firstDayOfWeek() {\r\n        return this.option(\"firstDayOfWeek\")\r\n    }\r\n    _attachEvents() {\r\n        this._createSelectionChangedAction();\r\n        this._attachClickEvent();\r\n        this._attachContextMenuEvent()\r\n    }\r\n    _attachClickEvent() {\r\n        var that = this;\r\n        var pointerDownAction = this._createAction((function(e) {\r\n            that._pointerDownHandler(e.event)\r\n        }));\r\n        this._createCellClickAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, (function(e) {\r\n            if (isMouseEvent(e) && e.which > 1) {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        }));\r\n        eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, (function(e) {\r\n            var $cell = $(e.target);\r\n            that._cellClickAction({\r\n                event: e,\r\n                cellElement: getPublicElement($cell),\r\n                cellData: that.getCellData($cell)\r\n            })\r\n        }))\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\", {\r\n            afterExecute: e => this._cellClickHandler(e.args[0].event)\r\n        })\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _cellClickHandler(e) {\r\n        var $target = $(e.target);\r\n        if (this._showPopup && this._hasFocusClass($target)) {\r\n            delete this._showPopup;\r\n            this._showAddAppointmentPopup($target)\r\n        }\r\n    }\r\n    _pointerDownHandler(e) {\r\n        var $target = $(e.target);\r\n        if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\r\n            this._isCellClick = false;\r\n            return\r\n        }\r\n        this._isCellClick = true;\r\n        if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            this._showPopup = true\r\n        } else {\r\n            this._setSelectedAndFocusedCells($target)\r\n        }\r\n    }\r\n    _showAddAppointmentPopup($cell) {\r\n        var firstCellData = this.getCellData($cell.first());\r\n        var lastCellData = this.getCellData($cell.last());\r\n        if (this.isVirtualScrolling()) {\r\n            var selectedCells = this.virtualSelectionState.getSelectedCells();\r\n            firstCellData = selectedCells[0];\r\n            lastCellData = selectedCells[selectedCells.length - 1]\r\n        }\r\n        var result = {\r\n            startDate: firstCellData.startDate,\r\n            endDate: lastCellData.endDate\r\n        };\r\n        if (void 0 !== lastCellData.allDay) {\r\n            result.allDay = lastCellData.allDay\r\n        }\r\n        this.invoke(\"showAddAppointmentPopup\", result, lastCellData.groups)\r\n    }\r\n    _attachContextMenuEvent() {\r\n        this._createContextMenuAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        var eventName = addNamespace(contextMenuEventName, this.NAME);\r\n        eventsEngine.off($element, eventName, cellSelector);\r\n        eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this))\r\n    }\r\n    _contextMenuHandler(e) {\r\n        var $cell = $(e.target);\r\n        this._contextMenuAction({\r\n            event: e,\r\n            cellElement: getPublicElement($cell),\r\n            cellData: this.getCellData($cell)\r\n        });\r\n        this._contextMenuHandled = true\r\n    }\r\n    _createContextMenuAction() {\r\n        this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\")\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$groupTable\r\n        }\r\n        return this._$thead\r\n    }\r\n    _getDateHeaderContainer() {\r\n        return this._$thead\r\n    }\r\n    _renderGroupHeader() {\r\n        var $container = this._getGroupHeaderContainer();\r\n        var groupCount = this._getGroupCount();\r\n        var cellTemplates = [];\r\n        if (groupCount) {\r\n            var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\r\n            this._attachGroupCountAttr();\r\n            $container.append(groupRows.elements);\r\n            cellTemplates = groupRows.cellTemplates\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n        return cellTemplates\r\n    }\r\n    _applyCellTemplates(templates) {\r\n        null === templates || void 0 === templates ? void 0 : templates.forEach((function(template) {\r\n            template()\r\n        }))\r\n    }\r\n    _detachGroupCountAttr() {\r\n        var groupedAttr = this._groupedStrategy.getGroupCountAttr();\r\n        this.$element().removeAttr(groupedAttr.attr)\r\n    }\r\n    _attachGroupCountAttr() {\r\n        var groupedAttr = this._groupedStrategy.getGroupCountAttr(this.option(\"groups\"));\r\n        this.$element().attr(groupedAttr.attr, groupedAttr.count)\r\n    }\r\n    headerPanelOffsetRecalculate() {\r\n        if (!this.option(\"resourceCellTemplate\") && !this.option(\"dateCellTemplate\")) {\r\n            return\r\n        }\r\n        var headerPanelHeight = this.getHeaderPanelHeight();\r\n        var headerHeight = this.invoke(\"getHeaderHeight\");\r\n        var allDayPanelHeight = this.isAllDayPanelVisible ? this._groupedStrategy.getAllDayTableHeight() : 0;\r\n        headerPanelHeight && this._headerScrollable && this._headerScrollable.$element().height(headerPanelHeight + allDayPanelHeight);\r\n        headerPanelHeight && this._dateTableScrollable.$element().css({\r\n            paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\r\n            marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\r\n        });\r\n        headerPanelHeight && this._sidebarScrollable && this._sidebarScrollable.$element().css({\r\n            paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\r\n            marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\r\n        });\r\n        this._$allDayTitle && this._$allDayTitle.css(\"top\", headerHeight + headerPanelHeight + \"px\")\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupHeaderRowClass: this._getGroupRowClass(),\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: this._getGroupHeaderContentClass()\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate)\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _renderDateHeader() {\r\n        var container = this._getDateHeaderContainer();\r\n        var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\r\n        var count = this._getCellCount();\r\n        var cellTemplate = this._getDateHeaderTemplate();\r\n        var repeatCount = this._getCalculateHeaderCellRepeatCount();\r\n        var templateCallbacks = [];\r\n        var groupByDate = this.isGroupedByDate();\r\n        if (!groupByDate) {\r\n            for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\r\n                for (var cellIndex = 0; cellIndex < count; cellIndex++) {\r\n                    var templateIndex = rowIndex * count + cellIndex;\r\n                    this._renderDateHeaderTemplate($headerRow, cellIndex, templateIndex, cellTemplate, templateCallbacks)\r\n                }\r\n            }\r\n            container.append($headerRow)\r\n        } else {\r\n            var colSpan = groupByDate ? this._getGroupCount() : 1;\r\n            for (var _cellIndex = 0; _cellIndex < count; _cellIndex++) {\r\n                var _templateIndex = _cellIndex * repeatCount;\r\n                var cellElement = this._renderDateHeaderTemplate($headerRow, _cellIndex, _templateIndex, cellTemplate, templateCallbacks);\r\n                cellElement.attr(\"colSpan\", colSpan)\r\n            }\r\n            container.prepend($headerRow)\r\n        }\r\n        this._applyCellTemplates(templateCallbacks);\r\n        return $headerRow\r\n    }\r\n    _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\r\n        var text = this._getHeaderText(panelCellIndex);\r\n        var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\r\n        if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\r\n            templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\r\n                model: _extends({\r\n                    text: text,\r\n                    date: this._getDateByIndex(panelCellIndex)\r\n                }, this._getGroupsForDateHeaderTemplate(templateIndex)),\r\n                index: templateIndex,\r\n                container: getPublicElement($cell)\r\n            }))\r\n        } else {\r\n            $cell.text(text)\r\n        }\r\n        container.append($cell);\r\n        return $cell\r\n    }\r\n    _getGroupsForDateHeaderTemplate(templateIndex) {\r\n        var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\r\n        var groupIndex;\r\n        var groups;\r\n        if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\r\n            groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\r\n            var groupsArray = this._getCellGroups(groupIndex);\r\n            groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            groups: groups,\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate())\r\n    }\r\n    _getCalculateHeaderCellRepeatCount() {\r\n        return this._groupedStrategy.calculateHeaderCellRepeatCount()\r\n    }\r\n    _renderAllDayPanel(index) {\r\n        var cellCount = this._getCellCount();\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            cellCount *= this._getGroupCount() || 1\r\n        }\r\n        var cellTemplates = this._renderTableBody({\r\n            container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\r\n            rowCount: 1,\r\n            cellCount: cellCount,\r\n            cellClass: this._getAllDayPanelCellClass.bind(this),\r\n            rowClass: ALL_DAY_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._getAllDayCellData.bind(this),\r\n            groupIndex: index\r\n        }, true);\r\n        this._toggleAllDayVisibility(true);\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _renderGroupAllDayPanel() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._renderAllDayPanel(i)\r\n            }\r\n        }\r\n    }\r\n    _getAllDayPanelCellClass(i, j) {\r\n        var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1)\r\n    }\r\n    _getAllDayCellData(cell, rowIndex, cellIndex, groupIndex) {\r\n        var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\r\n        var cellGroupIndex = groupIndex || this._getGroupIndex(rowIndex, cellIndex);\r\n        startDate = dateUtils.trimTime(startDate);\r\n        var data = {\r\n            startDate: startDate,\r\n            endDate: startDate,\r\n            allDay: true,\r\n            groupIndex: cellGroupIndex\r\n        };\r\n        var groupsArray = this._getCellGroups(cellGroupIndex);\r\n        if (groupsArray.length) {\r\n            data.groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            key: CELL_DATA,\r\n            value: data\r\n        }\r\n    }\r\n    _toggleAllDayVisibility(isUpdateScrollable) {\r\n        var showAllDayPanel = this._isShowAllDayPanel();\r\n        this._$allDayPanel.toggle(showAllDayPanel);\r\n        this._$allDayTitle && this._$allDayTitle.toggleClass(ALL_DAY_TITLE_HIDDEN_CLASS, !showAllDayPanel);\r\n        this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\r\n        this._changeAllDayVisibility();\r\n        isUpdateScrollable && this._updateScrollable()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel())\r\n    }\r\n    _updateScrollable() {\r\n        this._dateTableScrollable.update();\r\n        this._headerScrollable && this._headerScrollable.update();\r\n        this._sidebarScrollable && this._sidebarScrollable.update()\r\n    }\r\n    _renderTimePanel() {\r\n        var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\r\n        var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount() * repeatCount,\r\n            cellCount: 1,\r\n            cellClass: this._getTimeCellClass.bind(this),\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellTemplate: this.option(\"timeCellTemplate\"),\r\n            getCellText: (i => {\r\n                var index = i % this._getRowCount();\r\n                if (index % 2 === 0) {\r\n                    return dateLocalization.format(this._getTimeCellDateCore(startViewDate, i), \"shorttime\")\r\n                }\r\n                return \"\"\r\n            }).bind(this),\r\n            getCellDate: this._getTimeCellDate.bind(this),\r\n            groupCount: this._getGroupCount(),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\r\n            getTemplateData: (rowIndex => {\r\n                if (!this._isVerticalGroupedWorkSpace()) {\r\n                    return {}\r\n                }\r\n                var groupIndex = this._getGroupIndex(rowIndex, 0);\r\n                var groupsArray = this._getCellGroups(groupIndex);\r\n                var groups = this._getGroupsObjectFromGroupsArray(groupsArray);\r\n                return {\r\n                    groupIndex: groupIndex,\r\n                    groups: groups\r\n                }\r\n            }).bind(this)\r\n        })\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this._getCellCountInDay()\r\n    }\r\n    _getCellCountInDay(skipRound) {\r\n        var result = this._calculateDayDuration() / this.option(\"hoursInterval\");\r\n        return skipRound ? result : Math.ceil(result)\r\n    }\r\n    _calculateDayDuration() {\r\n        return this.option(\"endDayHour\") - this.option(\"startDayHour\")\r\n    }\r\n    _getTimeCellClass(i) {\r\n        var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass\r\n    }\r\n    _getTimeCellDate(i) {\r\n        return this._getTimeCellDateCore(this.getStartViewDate(), i)\r\n    }\r\n    _getTimeCellDateCore(startViewDate, i) {\r\n        var result = new Date(startViewDate);\r\n        var timeCellDuration = Math.round(this.getCellDuration());\r\n        var cellCountInDay = this._getCellCountInDay(true);\r\n        result.setMilliseconds(result.getMilliseconds() + timeCellDuration * (i % cellCountInDay) - this._getTimeOffsetForStartViewDate());\r\n        return result\r\n    }\r\n    _renderDateTable() {\r\n        var groupCount = this._getGroupCount();\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowCount: this._getTotalRowCount(groupCount),\r\n            cellCount: this._getTotalCellCount(groupCount),\r\n            cellClass: this._getDateTableCellClass.bind(this),\r\n            rowClass: this._getDateTableRowClass(),\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._getCellData.bind(this),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\r\n            groupCount: groupCount,\r\n            groupByDate: this.option(\"groupByDate\")\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return this._groupedStrategy.insertAllDayRowsIntoDateTable()\r\n    }\r\n    _getTotalCellCount(groupCount) {\r\n        return this._groupedStrategy.getTotalCellCount(groupCount)\r\n    }\r\n    _getTotalRowCount(groupCount, includeAllDayPanelRows) {\r\n        var result = this._groupedStrategy.getTotalRowCount(groupCount);\r\n        if (includeAllDayPanelRows && groupCount > 1 && this.isAllDayPanelVisible) {\r\n            result += groupCount\r\n        }\r\n        return result\r\n    }\r\n    _getCellData(cell, rowIndex, cellIndex) {\r\n        var data = this._prepareCellData(rowIndex, cellIndex, cell);\r\n        return {\r\n            key: CELL_DATA,\r\n            value: data\r\n        }\r\n    }\r\n    _prepareCellData(rowIndex, cellIndex) {\r\n        var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\r\n        var endDate = this.calculateEndDate(startDate);\r\n        var groupIndex = this._getGroupIndex(rowIndex, cellIndex);\r\n        var data = {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: this._getTableAllDay(),\r\n            groupIndex: groupIndex\r\n        };\r\n        var groupsArray = this._getCellGroups(groupIndex);\r\n        if (groupsArray.length) {\r\n            data.groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return data\r\n    }\r\n    _getGroupIndex(rowIndex, cellIndex) {\r\n        return this._groupedStrategy.getGroupIndex(rowIndex, cellIndex)\r\n    }\r\n    _getTableAllDay() {\r\n        return false\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var result = new Date(startDate);\r\n        result.setMilliseconds(result.getMilliseconds() + Math.round(this._getInterval()));\r\n        return result\r\n    }\r\n    _getGroupCount() {\r\n        var groups = this.option(\"groups\");\r\n        var result = 0;\r\n        for (var i = 0, len = groups.length; i < len; i++) {\r\n            if (!i) {\r\n                result = groups[i].items.length\r\n            } else {\r\n                result *= groups[i].items.length\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getPathToLeaf(leafIndex) {\r\n        var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\r\n        var leaf = function findLeafByIndex(data, index) {\r\n            for (var i = 0; i < data.length; i++) {\r\n                if (data[i].leafIndex === index) {\r\n                    return data[i]\r\n                } else {\r\n                    var _leaf = findLeafByIndex(data[i].children, index);\r\n                    if (_leaf) {\r\n                        return _leaf\r\n                    }\r\n                }\r\n            }\r\n        }(tree, leafIndex);\r\n        return function makeBranch(leaf, result) {\r\n            result = result || [];\r\n            result.push(leaf.value);\r\n            if (leaf.parent) {\r\n                makeBranch(leaf.parent, result)\r\n            }\r\n            return result\r\n        }(leaf).reverse()\r\n    }\r\n    _getAllGroups() {\r\n        var groupCount = this._getGroupCount();\r\n        return [...new Array(groupCount)].map((_, groupIndex) => {\r\n            var groupsArray = this._getCellGroups(groupIndex);\r\n            return this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        })\r\n    }\r\n    _getCellGroups(groupIndex) {\r\n        var result = [];\r\n        if (this._getGroupCount()) {\r\n            var groups = this.option(\"groups\");\r\n            if (groupIndex < 0) {\r\n                return\r\n            }\r\n            var path = this._getPathToLeaf(groupIndex);\r\n            for (var i = 0; i < groups.length; i++) {\r\n                result.push({\r\n                    name: groups[i].name,\r\n                    id: path[i]\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getGroupsObjectFromGroupsArray(groupsArray) {\r\n        return groupsArray.reduce((currentGroups, _ref3) => {\r\n            var {\r\n                name: name,\r\n                id: id\r\n            } = _ref3;\r\n            return _extends({}, currentGroups, {\r\n                [name]: id\r\n            })\r\n        }, {})\r\n    }\r\n    _attachTablesEvents() {\r\n        var element = this.$element();\r\n        this._attachDragEvents(element);\r\n        this._attachPointerEvents(element)\r\n    }\r\n    _detachDragEvents(element) {\r\n        eventsEngine.off(element, DragEventNames.ENTER);\r\n        eventsEngine.off(element, DragEventNames.LEAVE);\r\n        eventsEngine.off(element, DragEventNames.DROP)\r\n    }\r\n    _attachDragEvents(element) {\r\n        this._detachDragEvents(element);\r\n        eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\r\n            checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\r\n        }, e => {\r\n            this.removeDroppableCellClass();\r\n            $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n        });\r\n        eventsEngine.on(element, DragEventNames.LEAVE, () => this.removeDroppableCellClass());\r\n        eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => this.removeDroppableCellClass())\r\n    }\r\n    _attachPointerEvents(element) {\r\n        var isPointerDown = false;\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isMouseEvent(e) && 1 === e.which) {\r\n                isPointerDown = true;\r\n                this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\r\n                eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n                eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\r\n                    isPointerDown = false;\r\n                    this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS)\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._moveToCell($(e.target), true)\r\n            }\r\n        })\r\n    }\r\n    _getDateTables() {\r\n        return this._$dateTable.add(this._$allDayTable)\r\n    }\r\n    _getDateTable() {\r\n        return this._$dateTable\r\n    }\r\n    _getAllDayTable() {\r\n        return this._$allDayTable\r\n    }\r\n    _getInterval() {\r\n        if (void 0 === this._interval) {\r\n            this._interval = this.option(\"hoursInterval\") * HOUR_MS\r\n        }\r\n        return this._interval\r\n    }\r\n    _getHeaderText(headerIndex) {\r\n        return dateLocalization.format(this._getDateForHeaderText(headerIndex), this._getFormat())\r\n    }\r\n    _getDateForHeaderText(index) {\r\n        return this._getDateByIndex(index)\r\n    }\r\n    _getDateByIndex() {\r\n        return abstract()\r\n    }\r\n    _getFormat() {\r\n        return abstract()\r\n    }\r\n    _calculateCellIndex(rowIndex, cellIndex) {\r\n        return this._groupedStrategy.calculateCellIndex(rowIndex, cellIndex)\r\n    }\r\n    _renderTableBody(options, delayCellTemplateRendering) {\r\n        var result = [];\r\n        if (!delayCellTemplateRendering) {\r\n            this._applyCellTemplates(tableCreator.makeTable(options))\r\n        } else {\r\n            result = tableCreator.makeTable(options)\r\n        }\r\n        return result\r\n    }\r\n    _removeAllDayElements() {\r\n        this._$allDayTable && this._$allDayTable.remove();\r\n        this._$allDayTitle && this._$allDayTitle.remove()\r\n    }\r\n    _cleanView() {\r\n        var _this$virtualSelectio2, _this$_shader;\r\n        this.cache.clear();\r\n        this._cleanTableWidths();\r\n        this._cleanAllowedPositions();\r\n        null === (_this$virtualSelectio2 = this.virtualSelectionState) || void 0 === _this$virtualSelectio2 ? void 0 : _this$virtualSelectio2.releaseSelectedAndFocusedCells();\r\n        if (!this.isRenovatedRender()) {\r\n            var _this$_$allDayTable, _this$_$sidebarTable;\r\n            this._$thead.empty();\r\n            this._$dateTable.empty();\r\n            this._$timePanel.empty();\r\n            this._$groupTable.empty();\r\n            null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\r\n            null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty()\r\n        }\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        delete this._hiddenInterval;\r\n        delete this._interval\r\n    }\r\n    _clean() {\r\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n        this._disposeRenovatedComponents();\r\n        super._clean()\r\n    }\r\n    _cleanTableWidths() {\r\n        this._$headerPanel.css(\"width\", \"\");\r\n        this._$dateTable.css(\"width\", \"\");\r\n        this._$allDayTable && this._$allDayTable.css(\"width\", \"\")\r\n    }\r\n    _disposeRenovatedComponents() {\r\n        var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\r\n        null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\r\n        this.renovatedAllDayPanel = void 0;\r\n        null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\r\n        this.renovatedDateTable = void 0;\r\n        null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\r\n        this.renovatedTimePanel = void 0;\r\n        null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\r\n        this.renovatedGroupPanel = void 0;\r\n        null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\r\n        this.renovatedHeaderPanel = void 0\r\n    }\r\n    getWorkArea() {\r\n        return this._dateTableScrollable.$content()\r\n    }\r\n    getScrollable() {\r\n        return this._dateTableScrollable\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._dateTableScrollable.scrollTop()\r\n    }\r\n    getGroupedScrollableScrollTop(allDay) {\r\n        return this._groupedStrategy.getScrollableScrollTop(allDay)\r\n    }\r\n    getScrollableScrollLeft() {\r\n        return this._dateTableScrollable.scrollLeft()\r\n    }\r\n    getScrollableOuterWidth() {\r\n        return this._dateTableScrollable.scrollWidth()\r\n    }\r\n    getScrollableContainer() {\r\n        return $(this._dateTableScrollable.container())\r\n    }\r\n    getHeaderPanelHeight() {\r\n        return this._$headerPanel && this._$headerPanel.outerHeight(true)\r\n    }\r\n    getTimePanelWidth() {\r\n        return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$groupTable ? this._$groupTable.outerWidth() : 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return this._groupedStrategy.getLeftOffset()\r\n    }\r\n    getGroupedStrategy() {\r\n        return this._groupedStrategy\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var cellIndex = Math.floor(index / this._getRowCount());\r\n        var rowIndex = index - this._getRowCount() * cellIndex;\r\n        return {\r\n            cellIndex: cellIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex, patchedIndexes) {\r\n        cellIndex = !patchedIndexes ? this._patchCellIndex(cellIndex) : cellIndex;\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var millisecondsOffset = this._getMillisecondsOffset(rowIndex, cellIndex);\r\n        var offsetByCount = this._getOffsetByCount(cellIndex);\r\n        var startViewDateOffset = this._getTimeOffsetForStartViewDate();\r\n        var currentDate = new Date(firstViewDateTime + millisecondsOffset + offsetByCount - startViewDateOffset);\r\n        currentDate.setTime(currentDate.getTime() + dateUtils.getTimezonesDifference(firstViewDate, currentDate));\r\n        return currentDate\r\n    }\r\n    _patchCellIndex(cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        }\r\n        return cellIndex\r\n    }\r\n    _getOffsetByCount() {\r\n        return 0\r\n    }\r\n    _getMillisecondsOffset(rowIndex, cellIndex) {\r\n        return this._getInterval() * this._calculateCellIndex(rowIndex, cellIndex) + this._calculateHiddenInterval(rowIndex, cellIndex)\r\n    }\r\n    _calculateHiddenInterval(rowIndex, cellIndex) {\r\n        var dayCount = cellIndex % this._getCellCount();\r\n        return dayCount * this._getHiddenInterval()\r\n    }\r\n    _getHiddenInterval() {\r\n        if (void 0 === this._hiddenInterval) {\r\n            this._hiddenInterval = DAY_MS - this.getVisibleDayDuration()\r\n        }\r\n        return this._hiddenInterval\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\r\n        var days = this._getDaysOfInterval(fullInterval, startDayTime);\r\n        var weekendsCount = this._getWeekendsCount(days);\r\n        var result = (days - weekendsCount) * DAY_MS;\r\n        if (!allDay) {\r\n            result = fullInterval - days * this._getHiddenInterval() - weekendsCount * this.getVisibleDayDuration()\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    _getDaysOfInterval(fullInterval, startDayTime) {\r\n        return Math.floor((fullInterval + startDayTime) / DAY_MS)\r\n    }\r\n    _getGroupIndexes(appointmentResources) {\r\n        var result = [];\r\n        if (this._isGroupsSpecified(appointmentResources)) {\r\n            var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\r\n            result = this.invoke(\"getResourceTreeLeaves\", tree, appointmentResources)\r\n        }\r\n        return result\r\n    }\r\n    _updateIndex(index) {\r\n        return index * this._getRowCount()\r\n    }\r\n    _getDroppableCell() {\r\n        return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this.cache.get(\"workspaceWidth\", () => {\r\n            if (this._needCreateCrossScrolling()) {\r\n                return getBoundingRect(this._$dateTable.get(0)).width\r\n            }\r\n            var totalWidth = getBoundingRect(this.$element().get(0)).width;\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupTableWidth = this.getGroupTableWidth();\r\n            return totalWidth - timePanelWidth - groupTableWidth\r\n        })\r\n    }\r\n    _getCellPositionByIndex(index, groupIndex, inAllDayRow) {\r\n        var cellCoordinates = this._getCellCoordinatesByIndex(index);\r\n        var $cell = this._getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._getCellPositionWithCache($cell, cellCoordinates, groupIndex)\r\n    }\r\n    _getCellPositionWithCache($cell, cellCoordinates, groupIndex) {\r\n        var result = this._getCellPosition($cell);\r\n        this.setCellDataCache(cellCoordinates, groupIndex, $cell);\r\n        if (result) {\r\n            result.rowIndex = cellCoordinates.rowIndex;\r\n            result.cellIndex = cellCoordinates.cellIndex\r\n        }\r\n        return result\r\n    }\r\n    _getCellPosition($cell) {\r\n        var position = $cell.position();\r\n        if (this.option(\"rtlEnabled\")) {\r\n            position.left += getBoundingRect($cell.get(0)).width\r\n        }\r\n        return position\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._dom_getDateCell(indexes)\r\n    }\r\n    _dom_getDateCell(position) {\r\n        return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.cellIndex)\r\n    }\r\n    _dom_getAllDayPanelCell(cellIndex) {\r\n        return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(cellIndex)\r\n    }\r\n    _getCells(allDay, direction) {\r\n        var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        if (\"vertical\" === direction) {\r\n            var result = [];\r\n            for (var i = 1;; i++) {\r\n                var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\r\n                if (!cells.length) {\r\n                    break\r\n                }\r\n                result = result.concat(cells.toArray())\r\n            }\r\n            return $(result)\r\n        } else {\r\n            return this.$element().find(\".\" + cellClass)\r\n        }\r\n    }\r\n    _getAllCells(allDay) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"))\r\n        }\r\n        var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        return this.$element().find(\".\" + cellClass)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        var height = getBoundingRect(this._$dateTable.get(0)).height;\r\n        this._$groupTable.outerHeight(height)\r\n    }\r\n    _getDateTableBorder() {\r\n        return DATE_TABLE_CELL_BORDER\r\n    }\r\n    _getDateTableBorderOffset() {\r\n        return 2 * this._getDateTableBorder()\r\n    }\r\n    _getGroupHeaderCellsContent() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CONTENT_CLASS)\r\n    }\r\n    _getGroupHeaderCells() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CLASS)\r\n    }\r\n    _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\r\n        var currentDate = date || new Date(this.option(\"currentDate\"));\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        if (hours < startDayHour) {\r\n            hours = startDayHour\r\n        }\r\n        if (hours >= endDayHour) {\r\n            hours = endDayHour - 1\r\n        }\r\n        currentDate.setHours(hours, minutes, 0, 0);\r\n        if (!this.isVirtualScrolling()) {\r\n            return this.getCoordinatesByDate(currentDate, groupIndex, allDay)\r\n        }\r\n        var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\r\n        var {\r\n            position: position,\r\n            cellData: cellData\r\n        } = cell;\r\n        return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, this.isDateAndTimeView, \"vertical\" === this.viewDirection)\r\n    }\r\n    _isOutsideScrollable(target, event) {\r\n        var $dateTableScrollableElement = this._dateTableScrollable.$element();\r\n        var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\r\n        var window = getWindow();\r\n        var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\r\n        var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\r\n        var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\r\n        if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\r\n            return false\r\n        }\r\n        return isOutsideVerticalScrollable || isOutsideHorizontalScrollable\r\n    }\r\n    setCellDataCache(cellCoordinates, groupIndex, $cell) {\r\n        var key = JSON.stringify({\r\n            rowIndex: cellCoordinates.rowIndex,\r\n            cellIndex: cellCoordinates.cellIndex,\r\n            groupIndex: groupIndex\r\n        });\r\n        this.cache.set(key, this.getCellData($cell))\r\n    }\r\n    setCellDataCacheAlias(appointment, geometry) {\r\n        var key = JSON.stringify({\r\n            rowIndex: appointment.rowIndex,\r\n            cellIndex: appointment.cellIndex,\r\n            groupIndex: appointment.groupIndex\r\n        });\r\n        var aliasKey = JSON.stringify({\r\n            top: geometry.top,\r\n            left: geometry.left\r\n        });\r\n        this.cache.set(aliasKey, this.cache.get(key))\r\n    }\r\n    _cleanAllowedPositions() {\r\n        this._maxAllowedVerticalPosition = [];\r\n        this._maxAllowedPosition = []\r\n    }\r\n    supportAllDayRow() {\r\n        return true\r\n    }\r\n    keepOriginalHours() {\r\n        return false\r\n    }\r\n    getSelectedCellData() {\r\n        if (this.isVirtualScrolling()) {\r\n            return this.virtualSelectionState.getSelectedCells()\r\n        }\r\n        var $focusedCells = this._getAllFocusedCells();\r\n        var result = [];\r\n        if ($focusedCells.length > 1) {\r\n            result = this._getMultipleCellsData($focusedCells)\r\n        } else {\r\n            var data = this.getCellData($($focusedCells[0]));\r\n            data && result.push(data)\r\n        }\r\n        return result\r\n    }\r\n    _getMultipleCellsData($cells) {\r\n        var data = [];\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            data.push(this.getCellData($($cells[i])))\r\n        }\r\n        return data\r\n    }\r\n    getCellData($cell) {\r\n        var data;\r\n        var currentCell = $cell[0];\r\n        if (currentCell) {\r\n            if (this.isRenovatedRender()) {\r\n                data = this._getCellDataInRenovatedView($cell)\r\n            } else {\r\n                data = elementData(currentCell, CELL_DATA)\r\n            }\r\n        }\r\n        return extend(true, {}, data)\r\n    }\r\n    _getVirtualRowOffset() {\r\n        var _this$virtualScrollin4;\r\n        return (null === (_this$virtualScrollin4 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin4 ? void 0 : _this$virtualScrollin4.virtualRowOffset) || 0\r\n    }\r\n    _getVirtualCellOffset() {\r\n        var _this$virtualScrollin5;\r\n        return (null === (_this$virtualScrollin5 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin5 ? void 0 : _this$virtualScrollin5.virtualCellOffset) || 0\r\n    }\r\n    _getCellDataInRenovatedView($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        if (this.isVirtualScrolling()) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        var columnIndex = $cell.index();\r\n        if (this.isVirtualScrolling()) {\r\n            columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount\r\n        }\r\n        var {\r\n            viewDataProvider: viewDataProvider\r\n        } = this;\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\r\n        return cellData ? {\r\n            startDate: cellData.startDate,\r\n            endDate: cellData.endDate,\r\n            groups: cellData.groups,\r\n            groupIndex: cellData.groupIndex,\r\n            allDay: cellData.allDay\r\n        } : void 0\r\n    }\r\n    _getHorizontalMax(groupIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            var correctedGroupIndex = this._getGroupCount() - 1;\r\n            return Math.max(this._groupedStrategy.getHorizontalMax(groupIndex), this._groupedStrategy.getHorizontalMax(correctedGroupIndex))\r\n        }\r\n        return this._groupedStrategy.getHorizontalMax(groupIndex)\r\n    }\r\n    getCoordinatesByDate(date, groupIndex, inAllDayRow) {\r\n        groupIndex = groupIndex || 0;\r\n        var position;\r\n        if (this.isVirtualScrolling()) {\r\n            var cellInfo = {\r\n                groupIndex: groupIndex,\r\n                startDate: date,\r\n                isAllDay: inAllDayRow\r\n            };\r\n            var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\r\n            if (!positionByMap) {\r\n                return\r\n            }\r\n            var $cell = this._dom_getDateCell(positionByMap);\r\n            position = this._getCellPositionWithCache($cell, positionByMap, groupIndex)\r\n        } else {\r\n            position = this.calculateCellPositionByView(date, groupIndex, inAllDayRow)\r\n        }\r\n        var shift = this.getPositionShift(inAllDayRow ? 0 : this.getTimeShift(date), inAllDayRow);\r\n        var horizontalHMax = this._getHorizontalMax(groupIndex, date);\r\n        if (!position) {\r\n            throw errors.Error(\"E1039\")\r\n        }\r\n        return {\r\n            cellPosition: position.left + shift.cellPosition,\r\n            top: position.top + shift.top,\r\n            left: position.left + shift.left,\r\n            rowIndex: position.rowIndex,\r\n            cellIndex: position.cellIndex,\r\n            hMax: horizontalHMax,\r\n            vMax: this.getVerticalMax(groupIndex),\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    calculateCellPositionByView(date, groupIndex, inAllDayRow) {\r\n        var index = this.getCellIndexByDate(date, inAllDayRow);\r\n        return this._getCellPositionByIndex(index, groupIndex, inAllDayRow)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        return this._groupedStrategy.getVerticalMax(groupIndex)\r\n    }\r\n    _getOffsetByAllDayPanel(groupIndex) {\r\n        return this._groupedStrategy._getOffsetByAllDayPanel(groupIndex)\r\n    }\r\n    _getGroupTop(groupIndex) {\r\n        return this._groupedStrategy._getGroupTop(groupIndex)\r\n    }\r\n    isGroupedByDate() {\r\n        return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0\r\n    }\r\n    getCellIndexByDate(date, inAllDayRow) {\r\n        var timeInterval = inAllDayRow ? 864e5 : this._getInterval();\r\n        var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + this._getTimeOffsetForStartViewDate();\r\n        var index = Math.floor(dateTimeStamp / timeInterval);\r\n        if (inAllDayRow) {\r\n            index = this._updateIndex(index)\r\n        }\r\n        if (index < 0) {\r\n            index = 0\r\n        }\r\n        return index\r\n    }\r\n    getPositionShift(timeShift, isAllDay) {\r\n        return {\r\n            top: timeShift * this.getCellHeight(),\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n    getTimeShift(date) {\r\n        var currentDayStart = new Date(date);\r\n        var cellDuration = this.getCellDuration();\r\n        var currentDayEndHour = new Date(new Date(date).setHours(this.option(\"endDayHour\"), 0, 0));\r\n        if (date.getTime() <= currentDayEndHour.getTime()) {\r\n            currentDayStart.setHours(this.option(\"startDayHour\"), 0, 0, 0)\r\n        }\r\n        var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\r\n        var currentDateTime = date.getTime();\r\n        var currentDayStartTime = currentDayStart.getTime();\r\n        var minTime = this._firstViewDate.getTime();\r\n        return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % cellDuration / cellDuration : 0\r\n    }\r\n    _isSkippedData() {\r\n        return false\r\n    }\r\n    getCoordinatesByDateInGroup(startDate, appointmentResources, inAllDayRow, groupIndex) {\r\n        var result = [];\r\n        if (this._isSkippedData(startDate)) {\r\n            return result\r\n        }\r\n        var groupIndices = [groupIndex];\r\n        if (!isDefined(groupIndex)) {\r\n            groupIndices = this._getGroupCount() ? this._getGroupIndexes(appointmentResources) : [0]\r\n        }\r\n        groupIndices.forEach(groupIndex => {\r\n            var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\r\n            coordinates && result.push(coordinates)\r\n        });\r\n        return result\r\n    }\r\n    getDroppableCellIndex() {\r\n        var $droppableCell = this._getDroppableCell();\r\n        var $row = $droppableCell.parent();\r\n        var rowIndex = $row.index();\r\n        return rowIndex * $row.find(\"td\").length + $droppableCell.index()\r\n    }\r\n    getDataByDroppableCell() {\r\n        var cellData = this.getCellData($(this._getDroppableCell()));\r\n        var allDay = cellData.allDay;\r\n        var startDate = cellData.startDate;\r\n        var endDate = cellData.endDate;\r\n        return {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay,\r\n            groups: cellData.groups\r\n        }\r\n    }\r\n    getDateRange() {\r\n        return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()]\r\n    }\r\n    getCellWidth() {\r\n        return this.cache.get(\"cellWidth\", () => {\r\n            var cell = this._getCells().first().get(0);\r\n            return cell && getBoundingRect(cell).width\r\n        })\r\n    }\r\n    getCellMinWidth() {\r\n        return DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    getRoundedCellWidth(groupIndex, startIndex, cellCount) {\r\n        if (groupIndex < 0) {\r\n            return 0\r\n        }\r\n        var $row = this.$element().find(\".\" + this._getDateTableRowClass()).eq(0);\r\n        var width = 0;\r\n        var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\r\n        var totalCellCount = this._getCellCount() * groupIndex;\r\n        cellCount = cellCount || this._getCellCount();\r\n        if (!isDefined(startIndex)) {\r\n            startIndex = totalCellCount\r\n        }\r\n        for (var i = startIndex; i < totalCellCount + cellCount; i++) {\r\n            width += getBoundingRect($($cells).eq(i).get(0)).width\r\n        }\r\n        return width / (totalCellCount + cellCount - startIndex)\r\n    }\r\n    getCellHeight() {\r\n        var useCache = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        var callbackResult = () => {\r\n            var cell = this._getCells().first().get(0);\r\n            return cell && getBoundingRect(cell).height\r\n        };\r\n        return useCache ? this.cache.get(\"cellHeight\", callbackResult) : callbackResult()\r\n    }\r\n    getAllDayHeight() {\r\n        var cell = this._getCells(true).first().get(0);\r\n        return this._isShowAllDayPanel() ? cell && getBoundingRect(cell).height || 0 : 0\r\n    }\r\n    getAllDayOffset() {\r\n        return this._groupedStrategy.getAllDayOffset()\r\n    }\r\n    getMaxAllowedPosition(groupIndex) {\r\n        var validGroupIndex = groupIndex || 0;\r\n        if (this.isRenovatedRender()) {\r\n            return this.getRMaxAllowedHorizontalPosition(validGroupIndex)\r\n        }\r\n        return this.getMaxAllowedHorizontalPosition(validGroupIndex)\r\n    }\r\n    getMaxAllowedHorizontalPosition(groupIndex) {\r\n        if (0 === this._maxAllowedPosition.length) {\r\n            var isRtl = this.option(\"rtlEnabled\");\r\n            this._maxAllowedPosition = [];\r\n            this._$dateTable.find(\"tr\").first().find(\"td:nth-child(\".concat(this._getCellCount(), \"n)\")).each(function(_, cell) {\r\n                var maxPosition = $(cell).position().left;\r\n                if (!isRtl) {\r\n                    maxPosition += getBoundingRect(cell).width\r\n                }\r\n                this._maxAllowedPosition.push(Math.round(maxPosition))\r\n            }.bind(this))\r\n        }\r\n        return this._maxAllowedPosition[groupIndex]\r\n    }\r\n    getRMaxAllowedHorizontalPosition(groupIndex) {\r\n        if (!this._maxAllowedPosition[groupIndex]) {\r\n            var {\r\n                cellIndex: cellIndex\r\n            } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\r\n            (cellIndex => {\r\n                var cell = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).first().find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).get(cellIndex);\r\n                var maxPosition = $(cell).position().left;\r\n                if (!this.option(\"rtlEnabled\")) {\r\n                    maxPosition += getBoundingRect(cell).width\r\n                }\r\n                this._maxAllowedPosition[groupIndex] = Math.round(maxPosition)\r\n            })(cellIndex)\r\n        }\r\n        return this._maxAllowedPosition[groupIndex]\r\n    }\r\n    getMaxAllowedVerticalPosition(groupIndex) {\r\n        if (this.isRenovatedRender()) {\r\n            return this.getRMaxAllowedVerticalPosition(groupIndex)\r\n        }\r\n        return this.getMaxAllowedVerticalPositionStandard(groupIndex)\r\n    }\r\n    getMaxAllowedVerticalPositionStandard(groupIndex) {\r\n        if (0 === this._maxAllowedVerticalPosition.length) {\r\n            var rowCount = this._getRowCount();\r\n            this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \"):nth-child(\").concat(rowCount, \"n)\")).each((_, row) => {\r\n                var maxPosition = $(row).position().top + getBoundingRect(row).height;\r\n                this._maxAllowedVerticalPosition.push(Math.round(maxPosition))\r\n            })\r\n        }\r\n        return this._maxAllowedVerticalPosition[groupIndex]\r\n    }\r\n    getRMaxAllowedVerticalPosition(groupIndex) {\r\n        if (!this._maxAllowedVerticalPosition[groupIndex]) {\r\n            var {\r\n                rowIndex: rowIndex\r\n            } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\r\n            (rowIndex => {\r\n                var row = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).get(rowIndex);\r\n                var maxPosition = $(row).position().top + getBoundingRect(row).height;\r\n                if (this.isGroupedAllDayPanel()) {\r\n                    maxPosition -= (groupIndex + 1) * this.getAllDayHeight()\r\n                }\r\n                this._maxAllowedVerticalPosition[groupIndex] = Math.round(maxPosition)\r\n            })(rowIndex)\r\n        }\r\n        return this._maxAllowedVerticalPosition[groupIndex]\r\n    }\r\n    getFixedContainer() {\r\n        return this._$fixedContainer\r\n    }\r\n    getAllDayContainer() {\r\n        return this._$allDayContainer\r\n    }\r\n    getCellIndexByCoordinates(coordinates, allDay) {\r\n        var cellCount = this._getTotalCellCount(this._getGroupCount());\r\n        var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\r\n        var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\r\n        var leftOffset = this._isRTL() || this.option(\"crossScrollingEnabled\") ? 0 : this.getWorkSpaceLeftOffset();\r\n        var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\r\n        var leftIndex = Math.floor((coordinates.left + 5 - leftOffset) / cellWidth);\r\n        if (this._isRTL()) {\r\n            leftIndex = cellCount - leftIndex - 1\r\n        }\r\n        return cellCount * topIndex + leftIndex\r\n    }\r\n    getStartViewDate() {\r\n        return this._firstViewDate\r\n    }\r\n    getEndViewDate() {\r\n        var dateOfLastViewCell = this.getDateOfLastViewCell();\r\n        var endDateOfLastViewCell = this.calculateEndViewDate(dateOfLastViewCell);\r\n        return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        var dateOfLastViewCell = this.getDateOfLastViewCell();\r\n        var endTime = dateUtils.dateTimeFromDecimal(this.option(\"endDayHour\"));\r\n        var endDateOfLastViewCell = new Date(dateOfLastViewCell.setHours(endTime.hours, endTime.minutes));\r\n        return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell)\r\n    }\r\n    calculateEndViewDate(dateOfLastViewCell) {\r\n        return new Date(dateOfLastViewCell.getTime() + this.getCellDuration())\r\n    }\r\n    _adjustEndViewDateByDaylightDiff(startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\r\n        var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\r\n        return new Date(endDateOfLastViewCell.getTime() - this._getEndViewDateTimeDiff())\r\n    }\r\n    _getEndViewDateTimeDiff() {\r\n        return toMs(\"minute\")\r\n    }\r\n    getDateOfLastViewCell() {\r\n        var rowIndex = this._getRowCount() - 1;\r\n        var cellIndex = this._getCellCount();\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = cellIndex * this._getGroupCount() - 1\r\n        } else {\r\n            cellIndex -= 1\r\n        }\r\n        return this._getDateByCellIndexes(rowIndex, cellIndex, true)\r\n    }\r\n    getCellDuration() {\r\n        return 36e5 * this.option(\"hoursInterval\")\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return allDay ? toMs(\"day\") : this.getCellDuration()\r\n    }\r\n    getVisibleDayDuration() {\r\n        return this.option(\"hoursInterval\") * this._getCellCountInDay() * HOUR_MS\r\n    }\r\n    getGroupBounds(coordinates) {\r\n        var cellCount = this._getCellCount();\r\n        var $cells = this._getCells();\r\n        var cellWidth = this.getCellWidth();\r\n        var result;\r\n        if (this.isVirtualScrolling()) {\r\n            var groupedDataMap = this.viewDataProvider.groupedDataMap;\r\n            result = this._groupedStrategy.getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap)\r\n        } else {\r\n            result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates)\r\n        }\r\n        if (this._isRTL()) {\r\n            var startOffset = result.left;\r\n            result.left = result.right - 2 * cellWidth;\r\n            result.right = startOffset + 2 * cellWidth\r\n        }\r\n        return result\r\n    }\r\n    needRecalculateResizableArea() {\r\n        return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop()\r\n    }\r\n    getCellDataByCoordinates(coordinates, allDay) {\r\n        var key = JSON.stringify({\r\n            top: coordinates.top,\r\n            left: coordinates.left\r\n        });\r\n        return this.cache.get(key, () => {\r\n            var $cells = this._getCells(allDay);\r\n            var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\r\n            var $cell = $cells.eq(cellIndex);\r\n            return this.getCellData($cell)\r\n        })\r\n    }\r\n    getVisibleBounds() {\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\r\n        var totalCellCount = scrolledCellCount + $scrollable.height() / cellHeight;\r\n        result.top = {\r\n            hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: scrolledCellCount % 2 ? 30 : 0\r\n        };\r\n        result.bottom = {\r\n            hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\r\n        };\r\n        return result\r\n    }\r\n    updateScrollPosition(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var scheduler = this.option(\"observer\");\r\n        var newDate = scheduler.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var inAllDayRow = allDay && this.isAllDayPanelVisible;\r\n        if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\r\n            this.scrollTo(newDate, groups, inAllDayRow, false)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(date, groups, inAllDayRow) {\r\n        var cells = this._getCellsInViewport(inAllDayRow);\r\n        var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        return cells.reduce((currentResult, cell) => {\r\n            var {\r\n                startDate: cellStartDate,\r\n                endDate: cellEndDate,\r\n                groupIndex: cellGroupIndex\r\n            } = this.getCellData(cell);\r\n            var cellStartTime = cellStartDate.getTime();\r\n            var cellEndTime = cellEndDate.getTime();\r\n            if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\r\n                return false\r\n            }\r\n            return currentResult\r\n        }, true)\r\n    }\r\n    _getCellsInViewport(inAllDayRow) {\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var cellWidth = this.getCellWidth();\r\n        var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\r\n        var scrollableScrollTop = this.getScrollableScrollTop();\r\n        var scrollableScrollLeft = this.getScrollableScrollLeft();\r\n        var fullScrolledRowCount = scrollableScrollTop / cellHeight;\r\n        if (this.isVirtualScrolling()) {\r\n            fullScrolledRowCount -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        var scrolledRowCount = Math.floor(fullScrolledRowCount);\r\n        if (scrollableScrollTop % cellHeight !== 0) {\r\n            scrolledRowCount += 1\r\n        }\r\n        var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\r\n        var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\r\n        if (scrollableScrollLeft % cellWidth !== 0) {\r\n            scrolledColumnCount += 1\r\n        }\r\n        var rowCount = Math.floor(fullScrolledRowCount + $scrollable.height() / cellHeight);\r\n        var columnCount = Math.floor(fullScrolledColumnCount + $scrollable.width() / cellWidth);\r\n        var $cells = this._getAllCells(inAllDayRow);\r\n        var result = [];\r\n        $cells.each((function(index) {\r\n            var $cell = $(this);\r\n            var columnIndex = index % totalColumnCount;\r\n            var rowIndex = index / totalColumnCount;\r\n            if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\r\n                result.push($cell)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    getGroupWidth(groupIndex) {\r\n        var result = this._getCellCount() * this.getCellWidth();\r\n        if (this.isVirtualScrolling()) {\r\n            var groupedData = this.viewDataProvider.groupedDataMap.dateTableGroupedMap;\r\n            var groupLength = groupedData[groupIndex][0].length;\r\n            result = groupLength * this.getCellWidth()\r\n        }\r\n        var position = this.getMaxAllowedPosition(groupIndex);\r\n        var currentPosition = position[groupIndex];\r\n        if (currentPosition) {\r\n            if (this._isRTL()) {\r\n                result = currentPosition - position[groupIndex + 1]\r\n            } else if (0 === groupIndex) {\r\n                result = currentPosition\r\n            } else {\r\n                result = currentPosition - position[groupIndex - 1]\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        if (!this._isValidScrollDate(date)) {\r\n            return\r\n        }\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        scrollable.scrollBy({\r\n            top: coordinates.top - scrollable.scrollTop(),\r\n            left: 0\r\n        })\r\n    }\r\n    scrollTo(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\r\n        if (!this._isValidScrollDate(date, throwWarning)) {\r\n            return\r\n        }\r\n        var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\r\n        var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\r\n        var scrollable = this.getScrollable();\r\n        var $scrollable = scrollable.$element();\r\n        var offset = this.option(\"rtlEnabled\") ? this.getCellWidth() : 0;\r\n        var scrollableHeight = $scrollable.height();\r\n        var scrollableWidth = $scrollable.width();\r\n        var cellWidth = this.getCellWidth();\r\n        var cellHeight = this.getCellHeight();\r\n        var xShift = (scrollableWidth - cellWidth) / 2;\r\n        var yShift = (scrollableHeight - cellHeight) / 2;\r\n        var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\r\n        var top = coordinates.top - scrollable.scrollTop() - yShift;\r\n        if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\r\n            top = 0\r\n        }\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(() => {\r\n                scrollable.scrollBy({\r\n                    left: left,\r\n                    top: top\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: left,\r\n                top: top\r\n            })\r\n        }\r\n    }\r\n    _isValidScrollDate(date) {\r\n        var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        var min = this.getStartViewDate();\r\n        var max = this.getEndViewDate();\r\n        if (date < min || date > max) {\r\n            throwWarning && errors.log(\"W1008\", date);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    getDistanceBetweenCells(startIndex, endIndex) {\r\n        var result = 0;\r\n        this.$element().find(\".\" + this._getDateTableRowClass()).first().find(\".\" + DATE_TABLE_CELL_CLASS).each((function(index) {\r\n            if (index < startIndex || index > endIndex) {\r\n                return true\r\n            }\r\n            result += getBoundingRect(this).width\r\n        }));\r\n        return result\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return false\r\n    }\r\n    initDragBehavior(scheduler) {\r\n        if (!this.dragBehavior && scheduler) {\r\n            this.dragBehavior = new AppointmentDragBehavior(scheduler);\r\n            this._createDragBehavior(this.getWorkArea());\r\n            this._createDragBehavior(this.getAllDayContainer());\r\n            this._createDragBehavior(this._$allDayPanel)\r\n        }\r\n    }\r\n    _createDragBehavior($element) {\r\n        var options = {\r\n            getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\r\n            getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\r\n        };\r\n        this._createDragBehaviorBase($element, options)\r\n    }\r\n    _createDragBehaviorBase($element, options) {\r\n        var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\r\n        var element = this.$element();\r\n        var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\r\n        this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, () => this._attachDragEvents(element), () => this._detachDragEvents(element), () => this._getDroppableCell(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options))\r\n    }\r\n    _createDragAppointment(itemData, settings, appointments) {\r\n        var appointmentIndex = appointments.option(\"items\").length;\r\n        settings.isCompact = false;\r\n        settings.virtual = false;\r\n        var items = appointments._renderItem(appointmentIndex, {\r\n            itemData: itemData,\r\n            settings: [settings]\r\n        });\r\n        return items[0]\r\n    }\r\n    _isApplyCompactAppointmentOffset() {\r\n        return this._supportCompactDropDownAppointments()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return true\r\n    }\r\n    _formatWeekday(date) {\r\n        return formatWeekday(date)\r\n    }\r\n    _formatWeekdayAndDay(date) {\r\n        return formatWeekday(date) + \" \" + dateLocalization.format(date, \"day\")\r\n    }\r\n    removeDroppableCellClass($cellElement) {\r\n        ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getCoordinatesByCell($cell) {\r\n        var columnIndex = $cell.index();\r\n        var rowIndex = $cell.parent().index();\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        if (this.isVirtualScrolling() && !(isAllDayCell && !isVerticalGrouping)) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        if (this.isVirtualScrolling()) {\r\n            columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _isShowAllDayPanel() {\r\n        return this.option(\"showAllDayPanel\")\r\n    }\r\n    updateAppointments() {\r\n        var _this$dragBehavior;\r\n        this.invoke(\"renderAppointments\");\r\n        null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource()\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS))\r\n    }\r\n    _getRDateTableProps() {\r\n        return {\r\n            viewData: this.viewDataProvider.viewData,\r\n            dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n            addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        }\r\n    }\r\n    _getTimeOffsetForStartViewDate() {\r\n        var startViewDate = this.getStartViewDate();\r\n        var startDayHour = Math.floor(this.option(\"startDayHour\"));\r\n        var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\r\n        if (isDSTChange && startDayHour !== startViewDate.getHours()) {\r\n            return toMs(\"hour\")\r\n        }\r\n        return 0\r\n    }\r\n}\r\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, removeDroppableCellClass, getCellWidth, options) => {\r\n    var state = {\r\n        dragElement: void 0,\r\n        itemData: void 0\r\n    };\r\n    var cursorOffset = options.isSetCursorOffset ? () => {\r\n        var $dragElement = $(state.dragElement);\r\n        return {\r\n            x: $dragElement.width() / 2,\r\n            y: $dragElement.height() / 2\r\n        }\r\n    } : void 0;\r\n    return {\r\n        container: container,\r\n        dragTemplate: () => state.dragElement,\r\n        onDragStart: e => {\r\n            if (!isDefaultDraggingMode) {\r\n                detachGeneralEvents()\r\n            }\r\n            var canceled = e.cancel;\r\n            var event = e.event;\r\n            var $itemElement = $(e.itemElement);\r\n            var appointments = e.component._appointments;\r\n            state.itemData = options.getItemData(e.itemElement, appointments);\r\n            var settings = options.getItemSettings($itemElement, e);\r\n            var initialPosition = options.initialPosition;\r\n            if (state.itemData && !state.itemData.disabled) {\r\n                event.data = event.data || {};\r\n                if (!canceled) {\r\n                    if (!settings.isCompact) {\r\n                        dragBehavior.updateDragSource(state.itemData, settings)\r\n                    }\r\n                    state.dragElement = ((itemData, settings, appointments) => {\r\n                        var appointmentIndex = appointments.option(\"items\").length;\r\n                        settings.isCompact = false;\r\n                        settings.virtual = false;\r\n                        var items = appointments._renderItem(appointmentIndex, {\r\n                            itemData: itemData,\r\n                            settings: [settings]\r\n                        });\r\n                        return items[0]\r\n                    })(state.itemData, settings, appointments);\r\n                    event.data.itemElement = state.dragElement;\r\n                    event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\r\n                    event.data.itemData = state.itemData;\r\n                    event.data.itemSettings = settings;\r\n                    dragBehavior.onDragStart(event.data);\r\n                    resetPosition($(state.dragElement))\r\n                }\r\n            }\r\n        },\r\n        onDragMove: () => {\r\n            if (isDefaultDraggingMode) {\r\n                return\r\n            }\r\n            var appointmentWidth = $(state.dragElement).width();\r\n            var isWideAppointment = appointmentWidth > getCellWidth();\r\n            var dragElementContainer = $(state.dragElement).parent();\r\n            var boundingRect = getBoundingRect(dragElementContainer.get(0));\r\n            var newX = boundingRect.left + 10;\r\n            var newY = boundingRect.top + 10;\r\n            var elements = isWideAppointment ? getElementsFromPoint(newX, newY) : getElementsFromPoint(newX + appointmentWidth / 2, newY);\r\n            var droppableCell = elements.filter(el => {\r\n                var classList = el.classList;\r\n                return classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS)\r\n            })[0];\r\n            if (droppableCell) {\r\n                var oldDroppableCell = getDroppableCell();\r\n                if (!oldDroppableCell.is(droppableCell)) {\r\n                    removeDroppableCellClass()\r\n                }\r\n                $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        },\r\n        onDragEnd: e => {\r\n            var _state$dragElement;\r\n            if (!isDefaultDraggingMode) {\r\n                attachGeneralEvents()\r\n            }\r\n            if (state.itemData && !state.itemData.disabled) {\r\n                dragBehavior.onDragEnd(e)\r\n            }\r\n            null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\r\n            removeDroppableCellClass()\r\n        },\r\n        cursorOffset: cursorOffset,\r\n        filter: options.filter\r\n    }\r\n};\r\nexport default SchedulerWorkSpace;\r\n"]},"metadata":{},"sourceType":"module"}