{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerTimeline from \"./ui.scheduler.timeline\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport { getViewStartByOptions } from \"./utils/month\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerTimelineMonth extends SchedulerTimeline {\n  get isDateAndTimeView() {\n    return false;\n  }\n\n  get viewDirection() {\n    return \"horizontal\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrDateHeader;\n  }\n\n  _renderView() {\n    super._renderView();\n\n    this._updateScrollable();\n  }\n\n  _getElementClass() {\n    return TIMELINE_CLASS;\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  }\n\n  _getHiddenInterval() {\n    return 0;\n  }\n\n  _calculateDurationInCells(timeDiff) {\n    return timeDiff / this.getCellDuration();\n  }\n\n  getCellDuration() {\n    return toMs(\"day\");\n  }\n\n  calculateEndViewDate(dateOfLastViewCell) {\n    return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"));\n  }\n\n  isIndicatorVisible() {\n    return true;\n  }\n\n  _getCellCount() {\n    var currentDate = this.option(\"currentDate\");\n    var cellCount = 0;\n\n    if (this._isWorkSpaceWithCount()) {\n      var intervalCount = this.option(\"intervalCount\");\n\n      for (var i = 1; i <= intervalCount; i++) {\n        cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate();\n      }\n    } else {\n      cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n    }\n\n    return cellCount;\n  }\n\n  _setFirstViewDate() {\n    this._firstViewDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n\n    this._setStartDayHour(this._firstViewDate);\n  }\n\n  _getFormat() {\n    return this._formatWeekdayAndDay;\n  }\n\n  _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  }\n\n  _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  }\n\n  _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  }\n\n  calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  }\n\n  _calculateHiddenInterval() {\n    return 0;\n  }\n\n  _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = super._getDateByCellIndexes(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  }\n\n  getPositionShift() {\n    return {\n      top: 0,\n      left: 0,\n      cellPosition: 0\n    };\n  }\n\n  _getStartViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n    return firstMonthDate;\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), this._getStartViewDate());\n  }\n\n}\n\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\nexport default SchedulerTimelineMonth;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js"],"names":["registerComponent","SchedulerTimeline","dateUtils","dxrDateHeader","getViewStartByOptions","TIMELINE_CLASS","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerTimelineMonth","isDateAndTimeView","viewDirection","renovatedHeaderPanelComponent","_renderView","_updateScrollable","_getElementClass","_getDateHeaderTemplate","option","_getHiddenInterval","_calculateDurationInCells","timeDiff","getCellDuration","calculateEndViewDate","dateOfLastViewCell","Date","getTime","_calculateDayDuration","isIndicatorVisible","_getCellCount","currentDate","cellCount","_isWorkSpaceWithCount","intervalCount","i","getFullYear","getMonth","getDate","_setFirstViewDate","_firstViewDate","getFirstMonthDate","_getViewStartByOptions","_setStartDayHour","_getFormat","_formatWeekdayAndDay","_getDateByIndex","headerIndex","resultDate","setDate","_getInterval","_getIntervalBetween","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","calculateEndDate","startDate","startDateCopy","setHours","_calculateHiddenInterval","_getDateByCellIndexes","rowIndex","cellIndex","date","getPositionShift","top","left","cellPosition","_getStartViewDate","firstMonthDate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,aAAP,MAA0B,wEAA1B;AACA,SACIC,qBADJ,QAEO,eAFP;AAGA,IAAIC,cAAc,GAAG,6BAArB;AACA,IAAIC,mBAAmB,GAAG,KAA1B;AACA,IAAIC,IAAI,GAAGL,SAAS,CAACM,kBAArB;;AACA,MAAMC,sBAAN,SAAqCR,iBAArC,CAAuD;AAC9B,MAAjBS,iBAAiB,GAAG;AACpB,WAAO,KAAP;AACH;;AACgB,MAAbC,aAAa,GAAG;AAChB,WAAO,YAAP;AACH;;AACgC,MAA7BC,6BAA6B,GAAG;AAChC,WAAOT,aAAP;AACH;;AACDU,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN;;AACA,SAAKC,iBAAL;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAOV,cAAP;AACH;;AACDW,EAAAA,sBAAsB,GAAG;AACrB,WAAO,KAAKC,MAAL,CAAY,kBAAZ,CAAP;AACH;;AACDC,EAAAA,kBAAkB,GAAG;AACjB,WAAO,CAAP;AACH;;AACDC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAChC,WAAOA,QAAQ,GAAG,KAAKC,eAAL,EAAlB;AACH;;AACDA,EAAAA,eAAe,GAAG;AACd,WAAOd,IAAI,CAAC,KAAD,CAAX;AACH;;AACDe,EAAAA,oBAAoB,CAACC,kBAAD,EAAqB;AACrC,WAAO,IAAIC,IAAJ,CAASD,kBAAkB,CAACE,OAAnB,KAA+B,KAAKC,qBAAL,KAA+BnB,IAAI,CAAC,MAAD,CAA3E,CAAP;AACH;;AACDoB,EAAAA,kBAAkB,GAAG;AACjB,WAAO,IAAP;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,QAAIC,WAAW,GAAG,KAAKZ,MAAL,CAAY,aAAZ,CAAlB;AACA,QAAIa,SAAS,GAAG,CAAhB;;AACA,QAAI,KAAKC,qBAAL,EAAJ,EAAkC;AAC9B,UAAIC,aAAa,GAAG,KAAKf,MAAL,CAAY,eAAZ,CAApB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,aAArB,EAAoCC,CAAC,EAArC,EAAyC;AACrCH,QAAAA,SAAS,IAAI,IAAIN,IAAJ,CAASK,WAAW,CAACK,WAAZ,EAAT,EAAoCL,WAAW,CAACM,QAAZ,KAAyBF,CAA7D,EAAgE,CAAhE,EAAmEG,OAAnE,EAAb;AACH;AACJ,KALD,MAKO;AACHN,MAAAA,SAAS,GAAG,IAAIN,IAAJ,CAASK,WAAW,CAACK,WAAZ,EAAT,EAAoCL,WAAW,CAACM,QAAZ,KAAyB,CAA7D,EAAgE,CAAhE,EAAmEC,OAAnE,EAAZ;AACH;;AACD,WAAON,SAAP;AACH;;AACDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,cAAL,GAAsBpC,SAAS,CAACqC,iBAAV,CAA4B,KAAKC,sBAAL,EAA5B,CAAtB;;AACA,SAAKC,gBAAL,CAAsB,KAAKH,cAA3B;AACH;;AACDI,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKC,oBAAZ;AACH;;AACDC,EAAAA,eAAe,CAACC,WAAD,EAAc;AACzB,QAAIC,UAAU,GAAG,IAAItB,IAAJ,CAAS,KAAKc,cAAd,CAAjB;AACAQ,IAAAA,UAAU,CAACC,OAAX,CAAmB,KAAKT,cAAL,CAAoBF,OAApB,KAAgCS,WAAnD;AACA,WAAOC,UAAP;AACH;;AACDE,EAAAA,YAAY,GAAG;AACX,WAAO1C,mBAAP;AACH;;AACD2C,EAAAA,mBAAmB,CAACpB,WAAD,EAAc;AAC7B,QAAIqB,aAAa,GAAG,KAAKC,gBAAL,EAApB;AACA,QAAIC,cAAc,GAAGlD,SAAS,CAACmD,sBAAV,CAAiCH,aAAjC,EAAgDrB,WAAhD,CAArB;AACA,WAAOA,WAAW,CAACJ,OAAZ,MAAyByB,aAAa,CAACzB,OAAd,KAA0B,OAAO,KAAKR,MAAL,CAAY,cAAZ,CAA1D,IAAyFmC,cAAhG;AACH;;AACDE,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,QAAIC,aAAa,GAAG,IAAIhC,IAAJ,CAAS+B,SAAT,CAApB;AACA,WAAO,IAAI/B,IAAJ,CAASgC,aAAa,CAACC,QAAd,CAAuB,KAAKxC,MAAL,CAAY,YAAZ,CAAvB,CAAT,CAAP;AACH;;AACDyC,EAAAA,wBAAwB,GAAG;AACvB,WAAO,CAAP;AACH;;AACDC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,SAAX,EAAsB;AACvC,QAAIC,IAAI,GAAG,MAAMH,qBAAN,CAA4BC,QAA5B,EAAsCC,SAAtC,CAAX;;AACA,SAAKpB,gBAAL,CAAsBqB,IAAtB;;AACA,WAAOA,IAAP;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO;AACHC,MAAAA,GAAG,EAAE,CADF;AAEHC,MAAAA,IAAI,EAAE,CAFH;AAGHC,MAAAA,YAAY,EAAE;AAHX,KAAP;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,cAAc,GAAGlE,SAAS,CAACqC,iBAAV,CAA4B,KAAKtB,MAAL,CAAY,WAAZ,CAA5B,CAArB;AACA,WAAOmD,cAAP;AACH;;AACD5B,EAAAA,sBAAsB,GAAG;AACrB,WAAOpC,qBAAqB,CAAC,KAAKa,MAAL,CAAY,WAAZ,CAAD,EAA2B,KAAKA,MAAL,CAAY,aAAZ,CAA3B,EAAuD,KAAKA,MAAL,CAAY,eAAZ,CAAvD,EAAqF,KAAKkD,iBAAL,EAArF,CAA5B;AACH;;AA7FkD;;AA+FvDnE,iBAAiB,CAAC,0BAAD,EAA6BS,sBAA7B,CAAjB;AACA,eAAeA,sBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerTimeline from \"./ui.scheduler.timeline\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport {\r\n    getViewStartByOptions\r\n} from \"./utils/month\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimelineMonth extends SchedulerTimeline {\r\n    get isDateAndTimeView() {\r\n        return false\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    _renderView() {\r\n        super._renderView();\r\n        this._updateScrollable()\r\n    }\r\n    _getElementClass() {\r\n        return TIMELINE_CLASS\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _getHiddenInterval() {\r\n        return 0\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        return timeDiff / this.getCellDuration()\r\n    }\r\n    getCellDuration() {\r\n        return toMs(\"day\")\r\n    }\r\n    calculateEndViewDate(dateOfLastViewCell) {\r\n        return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"))\r\n    }\r\n    isIndicatorVisible() {\r\n        return true\r\n    }\r\n    _getCellCount() {\r\n        var currentDate = this.option(\"currentDate\");\r\n        var cellCount = 0;\r\n        if (this._isWorkSpaceWithCount()) {\r\n            var intervalCount = this.option(\"intervalCount\");\r\n            for (var i = 1; i <= intervalCount; i++) {\r\n                cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate()\r\n            }\r\n        } else {\r\n            cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()\r\n        }\r\n        return cellCount\r\n    }\r\n    _setFirstViewDate() {\r\n        this._firstViewDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getFormat() {\r\n        return this._formatWeekdayAndDay\r\n    }\r\n    _getDateByIndex(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    }\r\n    _getInterval() {\r\n        return DAY_IN_MILLISECONDS\r\n    }\r\n    _getIntervalBetween(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    }\r\n    _calculateHiddenInterval() {\r\n        return 0\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex) {\r\n        var date = super._getDateByCellIndexes(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    }\r\n    getPositionShift() {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n    _getStartViewDate() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\r\n        return firstMonthDate\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), this._getStartViewDate())\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\r\nexport default SchedulerTimelineMonth;\r\n"]},"metadata":{},"sourceType":"module"}