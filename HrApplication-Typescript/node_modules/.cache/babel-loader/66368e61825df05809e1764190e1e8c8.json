{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\nimport { Cache } from \"./cache\";\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\n\nclass VerticalGroupedStrategy extends GroupedStrategy {\n  constructor(workSpace) {\n    super(workSpace);\n    this.cache = new Cache();\n  }\n\n  prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n    var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      rowIndex += groupIndex;\n\n      if (!inAllDayRow) {\n        rowIndex += 1;\n      }\n    }\n\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellCoordinates.cellIndex\n    };\n  }\n\n  calculateCellIndex(rowIndex, cellIndex) {\n    rowIndex %= this._workSpace._getRowCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  }\n\n  getGroupIndex(rowIndex) {\n    return Math.floor(rowIndex / this._workSpace._getRowCount());\n  }\n\n  calculateHeaderCellRepeatCount() {\n    return 1;\n  }\n\n  insertAllDayRowsIntoDateTable() {\n    return this._workSpace.option(\"showAllDayPanel\");\n  }\n\n  getTotalCellCount() {\n    return this._workSpace._getCellCount();\n  }\n\n  getTotalRowCount() {\n    return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n  }\n\n  addAdditionalGroupCellClasses(cellClass, index, i, j) {\n    cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n    return this._addFirstGroupCellClass(cellClass, i + 1);\n  }\n\n  _addLastGroupCellClass(cellClass, index) {\n    if (index % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getLastGroupCellClass();\n    }\n\n    return cellClass;\n  }\n\n  _addFirstGroupCellClass(cellClass, index) {\n    if ((index - 1) % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getFirstGroupCellClass();\n    }\n\n    return cellClass;\n  }\n\n  getHorizontalMax(groupIndex) {\n    if (this._workSpace.isRenovatedRender()) {\n      return this._workSpace.getMaxAllowedPosition(groupIndex);\n    }\n\n    return this._workSpace.getMaxAllowedPosition(0);\n  }\n\n  getVerticalMax(groupIndex) {\n    var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition(groupIndex);\n\n    maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\n    return maxAllowedPosition;\n  }\n\n  _getOffsetByAllDayPanel(groupIndex) {\n    var result = 0;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      result = this._workSpace.getAllDayHeight() * (groupIndex + 1);\n    }\n\n    return result;\n  }\n\n  _getGroupTop(groupIndex) {\n    var workspace = this._workSpace;\n    var rowCount = workspace.isVirtualScrolling() ? workspace.viewDataProvider.getRowCountInGroup(groupIndex) : workspace._getRowCount();\n    return workspace.getMaxAllowedVerticalPosition(groupIndex) - workspace.getCellHeight() * rowCount;\n  }\n\n  calculateTimeCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  }\n\n  getWorkSpaceMinWidth() {\n    var minWidth = this._workSpace._getWorkSpaceWidth();\n\n    var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n    if (minWidth < workspaceContainerWidth) {\n      minWidth = workspaceContainerWidth;\n    }\n\n    return minWidth;\n  }\n\n  getAllDayOffset() {\n    return 0;\n  }\n\n  getAllDayTableHeight() {\n    return 0;\n  }\n\n  getGroupCountAttr(groups) {\n    return {\n      attr: VERTICAL_GROUPED_ATTR,\n      count: null === groups || void 0 === groups ? void 0 : groups.length\n    };\n  }\n\n  getLeftOffset() {\n    return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n  }\n\n  getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex = coordinates.groupIndex;\n    return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), () => {\n      var startOffset = $cells.eq(0).offset().left;\n      var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\n\n      var dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight();\n\n      var scrollTop = this.getScrollableScrollTop();\n      var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\n\n      if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\n        topOffset += this._workSpace.getCellHeight() * (groupIndex + 1);\n      }\n\n      var bottomOffset = topOffset + dayHeight;\n      return this._groupBoundsOffset = {\n        left: startOffset,\n        right: endOffset,\n        top: topOffset,\n        bottom: bottomOffset\n      };\n    });\n  }\n\n  getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    return this.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates);\n  }\n\n  shiftIndicator($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace.getIndicatorOffset(0);\n\n    var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n    }\n\n    $indicator.css(\"left\", horizontalOffset + tableOffset);\n    $indicator.css(\"top\", height + verticalOffset);\n  }\n\n  getShaderOffset(i, width) {\n    var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n  }\n\n  getShaderTopOffset(i) {\n    return 0;\n  }\n\n  getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderMaxHeight() {\n    var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderWidth() {\n    return this._workSpace.getIndicationWidth(0);\n  }\n\n  getScrollableScrollTop() {\n    return this._workSpace.getScrollable().scrollTop();\n  }\n\n  getGroupIndexByCell($cell) {\n    var rowIndex = $cell.parent().index();\n\n    var rowCount = this._workSpace._getRowCountWithAllDayRows();\n\n    return Math.ceil((rowIndex + 1) / rowCount);\n  }\n\n}\n\nexport default VerticalGroupedStrategy;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js"],"names":["getBoundingRect","GroupedStrategy","Cache","VERTICAL_GROUPED_ATTR","DATE_HEADER_OFFSET","WORK_SPACE_BORDER","VerticalGroupedStrategy","constructor","workSpace","cache","prepareCellIndexes","cellCoordinates","groupIndex","inAllDayRow","rowIndex","_workSpace","_getRowCount","supportAllDayRow","option","cellIndex","calculateCellIndex","getGroupIndex","Math","floor","calculateHeaderCellRepeatCount","insertAllDayRowsIntoDateTable","getTotalCellCount","_getCellCount","getTotalRowCount","_getGroupCount","addAdditionalGroupCellClasses","cellClass","index","i","j","_addLastGroupCellClass","_addFirstGroupCellClass","getLastGroupCellClass","getFirstGroupCellClass","getHorizontalMax","isRenovatedRender","getMaxAllowedPosition","getVerticalMax","maxAllowedPosition","getMaxAllowedVerticalPosition","_getOffsetByAllDayPanel","result","getAllDayHeight","_getGroupTop","workspace","rowCount","isVirtualScrolling","viewDataProvider","getRowCountInGroup","getCellHeight","calculateTimeCellRepeatCount","getWorkSpaceMinWidth","minWidth","_getWorkSpaceWidth","workspaceContainerWidth","$element","get","width","getTimePanelWidth","getGroupTableWidth","getAllDayOffset","getAllDayTableHeight","getGroupCountAttr","groups","attr","count","length","getLeftOffset","getGroupBoundsOffset","cellCount","$cells","cellWidth","coordinates","concat","startOffset","eq","offset","left","endOffset","dayHeight","_calculateDayDuration","scrollTop","getScrollableScrollTop","topOffset","_$thead","height","invoke","bottomOffset","_groupBoundsOffset","right","top","bottom","getVirtualScrollingGroupBoundsOffset","shiftIndicator","$indicator","rtlOffset","getIndicatorOffset","tableOffset","horizontalOffset","verticalOffset","css","getShaderOffset","_$container","getWorkSpaceLeftOffset","getShaderTopOffset","getShaderHeight","getIndicationHeight","getShaderMaxHeight","getShaderWidth","getIndicationWidth","getScrollable","getGroupIndexByCell","$cell","parent","_getRowCountWithAllDayRows","ceil"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\r\nvar DATE_HEADER_OFFSET = 10;\r\nvar WORK_SPACE_BORDER = 1;\r\nclass VerticalGroupedStrategy extends GroupedStrategy {\r\n    constructor(workSpace) {\r\n        super(workSpace);\r\n        this.cache = new Cache\r\n    }\r\n    prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            rowIndex += groupIndex;\r\n            if (!inAllDayRow) {\r\n                rowIndex += 1\r\n            }\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellCoordinates.cellIndex\r\n        }\r\n    }\r\n    calculateCellIndex(rowIndex, cellIndex) {\r\n        rowIndex %= this._workSpace._getRowCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    }\r\n    getGroupIndex(rowIndex) {\r\n        return Math.floor(rowIndex / this._workSpace._getRowCount())\r\n    }\r\n    calculateHeaderCellRepeatCount() {\r\n        return 1\r\n    }\r\n    insertAllDayRowsIntoDateTable() {\r\n        return this._workSpace.option(\"showAllDayPanel\")\r\n    }\r\n    getTotalCellCount() {\r\n        return this._workSpace._getCellCount()\r\n    }\r\n    getTotalRowCount() {\r\n        return this._workSpace._getRowCount() * this._workSpace._getGroupCount()\r\n    }\r\n    addAdditionalGroupCellClasses(cellClass, index, i, j) {\r\n        cellClass = this._addLastGroupCellClass(cellClass, i + 1);\r\n        return this._addFirstGroupCellClass(cellClass, i + 1)\r\n    }\r\n    _addLastGroupCellClass(cellClass, index) {\r\n        if (index % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getLastGroupCellClass()\r\n        }\r\n        return cellClass\r\n    }\r\n    _addFirstGroupCellClass(cellClass, index) {\r\n        if ((index - 1) % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getFirstGroupCellClass()\r\n        }\r\n        return cellClass\r\n    }\r\n    getHorizontalMax(groupIndex) {\r\n        if (this._workSpace.isRenovatedRender()) {\r\n            return this._workSpace.getMaxAllowedPosition(groupIndex)\r\n        }\r\n        return this._workSpace.getMaxAllowedPosition(0)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition(groupIndex);\r\n        maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\r\n        return maxAllowedPosition\r\n    }\r\n    _getOffsetByAllDayPanel(groupIndex) {\r\n        var result = 0;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            result = this._workSpace.getAllDayHeight() * (groupIndex + 1)\r\n        }\r\n        return result\r\n    }\r\n    _getGroupTop(groupIndex) {\r\n        var workspace = this._workSpace;\r\n        var rowCount = workspace.isVirtualScrolling() ? workspace.viewDataProvider.getRowCountInGroup(groupIndex) : workspace._getRowCount();\r\n        return workspace.getMaxAllowedVerticalPosition(groupIndex) - workspace.getCellHeight() * rowCount\r\n    }\r\n    calculateTimeCellRepeatCount() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        var minWidth = this._workSpace._getWorkSpaceWidth();\r\n        var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\r\n        if (minWidth < workspaceContainerWidth) {\r\n            minWidth = workspaceContainerWidth\r\n        }\r\n        return minWidth\r\n    }\r\n    getAllDayOffset() {\r\n        return 0\r\n    }\r\n    getAllDayTableHeight() {\r\n        return 0\r\n    }\r\n    getGroupCountAttr(groups) {\r\n        return {\r\n            attr: VERTICAL_GROUPED_ATTR,\r\n            count: null === groups || void 0 === groups ? void 0 : groups.length\r\n        }\r\n    }\r\n    getLeftOffset() {\r\n        return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth()\r\n    }\r\n    getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        var groupIndex = coordinates.groupIndex;\r\n        return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), () => {\r\n            var startOffset = $cells.eq(0).offset().left;\r\n            var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\r\n            var dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight();\r\n            var scrollTop = this.getScrollableScrollTop();\r\n            var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\r\n            if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\r\n                topOffset += this._workSpace.getCellHeight() * (groupIndex + 1)\r\n            }\r\n            var bottomOffset = topOffset + dayHeight;\r\n            return this._groupBoundsOffset = {\r\n                left: startOffset,\r\n                right: endOffset,\r\n                top: topOffset,\r\n                bottom: bottomOffset\r\n            }\r\n        })\r\n    }\r\n    getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        return this.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates)\r\n    }\r\n    shiftIndicator($indicator, height, rtlOffset, i) {\r\n        var offset = this._workSpace.getIndicatorOffset(0);\r\n        var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            verticalOffset += this._workSpace.getAllDayHeight() * (i + 1)\r\n        }\r\n        $indicator.css(\"left\", horizontalOffset + tableOffset);\r\n        $indicator.css(\"top\", height + verticalOffset)\r\n    }\r\n    getShaderOffset(i, width) {\r\n        var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset\r\n    }\r\n    getShaderTopOffset(i) {\r\n        return 0\r\n    }\r\n    getShaderHeight() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderMaxHeight() {\r\n        var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderWidth() {\r\n        return this._workSpace.getIndicationWidth(0)\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._workSpace.getScrollable().scrollTop()\r\n    }\r\n    getGroupIndexByCell($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        var rowCount = this._workSpace._getRowCountWithAllDayRows();\r\n        return Math.ceil((rowIndex + 1) / rowCount)\r\n    }\r\n}\r\nexport default VerticalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"module"}