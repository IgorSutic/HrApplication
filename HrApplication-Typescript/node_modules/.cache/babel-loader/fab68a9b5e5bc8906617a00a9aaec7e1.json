{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointmentFilter.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar HOUR_MS = toMs(\"hour\");\nexport default class AppointmentFilter {\n  constructor(scheduler) {\n    this.scheduler = scheduler;\n  }\n\n  get filterStrategy() {\n    return this.scheduler.isVirtualScrolling() ? new AppointmentFilterVirtualStrategy(this.scheduler) : new AppointmentFilterBaseStrategy(this.scheduler);\n  }\n\n  filter() {\n    return this.filterStrategy.filter();\n  }\n\n  hasAllDayAppointments(appointments) {\n    return this.filterStrategy.hasAllDayAppointments(appointments);\n  }\n\n}\n\nclass AppointmentFilterBaseStrategy {\n  constructor(scheduler) {\n    this.scheduler = scheduler;\n  }\n\n  get workspace() {\n    return this.scheduler.getWorkSpace();\n  }\n\n  get viewDataProvider() {\n    return this.workspace.viewDataProvider;\n  }\n\n  get resourcesManager() {\n    return this.scheduler._resourcesManager;\n  }\n\n  get appointmentModel() {\n    return this.scheduler.getAppointmentModel();\n  }\n\n  get timeZoneCalculator() {\n    return this.scheduler.timeZoneCalculator;\n  }\n\n  get viewStartDayHour() {\n    return this.scheduler._getCurrentViewOption(\"startDayHour\");\n  }\n\n  get viewEndDayHour() {\n    return this.scheduler._getCurrentViewOption(\"endDayHour\");\n  }\n\n  get firstDayOfWeek() {\n    return this.scheduler.getFirstDayOfWeek();\n  }\n\n  get recurrenceExceptionGenerator() {\n    return this.scheduler._getRecurrenceException.bind(this.scheduler);\n  }\n\n  filter() {\n    var dateRange = this.workspace.getDateRange();\n    var resources = this.resourcesManager.getResourcesData();\n    var allDay;\n\n    if (!this.scheduler.option(\"showAllDayPanel\") && this.workspace.supportAllDayRow()) {\n      allDay = false;\n    }\n\n    return this.appointmentModel.filterLoadedAppointments({\n      startDayHour: this.viewStartDayHour,\n      endDayHour: this.viewEndDayHour,\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour,\n      min: dateRange[0],\n      max: dateRange[1],\n      resources: resources,\n      allDay: allDay,\n      firstDayOfWeek: this.firstDayOfWeek,\n      recurrenceException: this.recurrenceExceptionGenerator\n    }, this.timeZoneCalculator);\n  }\n\n  hasAllDayAppointments(appointments) {\n    return this.appointmentModel.hasAllDayAppointments(appointments, this.viewStartDayHour, this.viewEndDayHour);\n  }\n\n}\n\nclass AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\n  constructor(scheduler) {\n    super(scheduler);\n  }\n\n  filter() {\n    var isCalculateStartAndEndDayHour = this.workspace.isDateAndTimeView;\n    var checkIntersectViewport = this.workspace.isDateAndTimeView && \"horizontal\" === this.workspace.viewDirection;\n    var isAllDayWorkspace = !this.workspace.supportAllDayRow();\n    var showAllDayAppointments = this.scheduler.option(\"showAllDayPanel\") || isAllDayWorkspace;\n    var endViewDate = this.workspace.getEndViewDateByEndDayHour();\n    var filterOptions = [];\n    var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n    groupsInfo.forEach(item => {\n      var groupIndex = item.groupIndex;\n      var groupStartDate = item.startDate;\n      var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n      var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\n      var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / HOUR_MS : this.viewEndDayHour;\n\n      var resources = this._getPrerenderFilterResources(groupIndex);\n\n      var allDayPanel = this.viewDataProvider.getAllDayPanel(groupIndex);\n      var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\n      filterOptions.push({\n        isVirtualScrolling: true,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: groupStartDate,\n        max: groupEndDate,\n        allDay: supportAllDayAppointment,\n        resources: resources,\n        firstDayOfWeek: this.firstDayOfWeek,\n        recurrenceException: this.recurrenceExceptionGenerator,\n        checkIntersectViewport: checkIntersectViewport\n      });\n    });\n    return this.appointmentModel.filterLoadedVirtualAppointments(filterOptions, this.timeZoneCalculator, this.workspace._getGroupCount());\n  }\n\n  hasAllDayAppointments() {\n    return this.appointmentModel.filterAllDayAppointments({\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour\n    }).length > 0;\n  }\n\n  _getPrerenderFilterResources(groupIndex) {\n    var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n    return this.resourcesManager.getResourcesDataByGroups([cellGroup]);\n  }\n\n}","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/appointments/appointmentFilter.js"],"names":["dateUtils","toMs","dateToMilliseconds","HOUR_MS","AppointmentFilter","constructor","scheduler","filterStrategy","isVirtualScrolling","AppointmentFilterVirtualStrategy","AppointmentFilterBaseStrategy","filter","hasAllDayAppointments","appointments","workspace","getWorkSpace","viewDataProvider","resourcesManager","_resourcesManager","appointmentModel","getAppointmentModel","timeZoneCalculator","viewStartDayHour","_getCurrentViewOption","viewEndDayHour","firstDayOfWeek","getFirstDayOfWeek","recurrenceExceptionGenerator","_getRecurrenceException","bind","dateRange","getDateRange","resources","getResourcesData","allDay","option","supportAllDayRow","filterLoadedAppointments","startDayHour","endDayHour","min","max","recurrenceException","isCalculateStartAndEndDayHour","isDateAndTimeView","checkIntersectViewport","viewDirection","isAllDayWorkspace","showAllDayAppointments","endViewDate","getEndViewDateByEndDayHour","filterOptions","groupsInfo","getCompletedGroupsInfo","forEach","item","groupIndex","groupStartDate","startDate","groupEndDate","Date","Math","endDate","getHours","getMinutes","_getPrerenderFilterResources","allDayPanel","getAllDayPanel","supportAllDayAppointment","length","push","filterLoadedVirtualAppointments","_getGroupCount","filterAllDayAppointments","cellGroup","getCellsGroup","getResourcesDataByGroups"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointmentFilter.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar HOUR_MS = toMs(\"hour\");\r\nexport default class AppointmentFilter {\r\n    constructor(scheduler) {\r\n        this.scheduler = scheduler\r\n    }\r\n    get filterStrategy() {\r\n        return this.scheduler.isVirtualScrolling() ? new AppointmentFilterVirtualStrategy(this.scheduler) : new AppointmentFilterBaseStrategy(this.scheduler)\r\n    }\r\n    filter() {\r\n        return this.filterStrategy.filter()\r\n    }\r\n    hasAllDayAppointments(appointments) {\r\n        return this.filterStrategy.hasAllDayAppointments(appointments)\r\n    }\r\n}\r\nclass AppointmentFilterBaseStrategy {\r\n    constructor(scheduler) {\r\n        this.scheduler = scheduler\r\n    }\r\n    get workspace() {\r\n        return this.scheduler.getWorkSpace()\r\n    }\r\n    get viewDataProvider() {\r\n        return this.workspace.viewDataProvider\r\n    }\r\n    get resourcesManager() {\r\n        return this.scheduler._resourcesManager\r\n    }\r\n    get appointmentModel() {\r\n        return this.scheduler.getAppointmentModel()\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.scheduler.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.scheduler._getCurrentViewOption(\"startDayHour\")\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.scheduler._getCurrentViewOption(\"endDayHour\")\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.scheduler.getFirstDayOfWeek()\r\n    }\r\n    get recurrenceExceptionGenerator() {\r\n        return this.scheduler._getRecurrenceException.bind(this.scheduler)\r\n    }\r\n    filter() {\r\n        var dateRange = this.workspace.getDateRange();\r\n        var resources = this.resourcesManager.getResourcesData();\r\n        var allDay;\r\n        if (!this.scheduler.option(\"showAllDayPanel\") && this.workspace.supportAllDayRow()) {\r\n            allDay = false\r\n        }\r\n        return this.appointmentModel.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: resources,\r\n            allDay: allDay,\r\n            firstDayOfWeek: this.firstDayOfWeek,\r\n            recurrenceException: this.recurrenceExceptionGenerator\r\n        }, this.timeZoneCalculator)\r\n    }\r\n    hasAllDayAppointments(appointments) {\r\n        return this.appointmentModel.hasAllDayAppointments(appointments, this.viewStartDayHour, this.viewEndDayHour)\r\n    }\r\n}\r\nclass AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    constructor(scheduler) {\r\n        super(scheduler)\r\n    }\r\n    filter() {\r\n        var isCalculateStartAndEndDayHour = this.workspace.isDateAndTimeView;\r\n        var checkIntersectViewport = this.workspace.isDateAndTimeView && \"horizontal\" === this.workspace.viewDirection;\r\n        var isAllDayWorkspace = !this.workspace.supportAllDayRow();\r\n        var showAllDayAppointments = this.scheduler.option(\"showAllDayPanel\") || isAllDayWorkspace;\r\n        var endViewDate = this.workspace.getEndViewDateByEndDayHour();\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var groupIndex = item.groupIndex;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / HOUR_MS : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var allDayPanel = this.viewDataProvider.getAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                recurrenceException: this.recurrenceExceptionGenerator,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.appointmentModel.filterLoadedVirtualAppointments(filterOptions, this.timeZoneCalculator, this.workspace._getGroupCount())\r\n    }\r\n    hasAllDayAppointments() {\r\n        return this.appointmentModel.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return this.resourcesManager.getResourcesDataByGroups([cellGroup])\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}