{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\n\nclass AppointmentLayoutManager {\n  constructor(instance, renderingStrategy) {\n    this.instance = instance;\n    renderingStrategy && this.initRenderingStrategy(renderingStrategy);\n  }\n\n  getCellDimensions(options) {\n    if (this.instance._workSpace) {\n      return {\n        width: this.instance._workSpace.getCellWidth(),\n        height: this.instance._workSpace.getCellHeight(),\n        allDayHeight: this.instance._workSpace.getAllDayHeight()\n      };\n    }\n  }\n\n  getGroupOrientation(options) {\n    if (this.instance._workSpace) {\n      options.callback(this.instance._workSpace._getRealGroupOrientation());\n    }\n  }\n\n  initRenderingStrategy(renderingStrategy) {\n    var Strategy = RENDERING_STRATEGIES[renderingStrategy];\n    this._renderingStrategyInstance = new Strategy(this.instance);\n    this.renderingStrategy = renderingStrategy;\n  }\n\n  createAppointmentsMap(items) {\n    var {\n      allDayHeight: allDayHeight\n    } = this.getCellDimensions();\n    this.instance._allDayCellHeight = allDayHeight;\n    this.getGroupOrientation({\n      callback: groupOrientation => this.instance._groupOrientation = groupOrientation\n    });\n    var appointments = items ? items.slice() : [];\n    this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(appointments);\n    return this._createAppointmentsMapCore(appointments, this._positionMap);\n  }\n\n  _createAppointmentsMapCore(list, positionMap) {\n    var {\n      virtualScrollingDispatcher: virtualScrollingDispatcher\n    } = this.instance.getWorkSpace();\n    var cellCountInsideTopVirtualRow = (null === virtualScrollingDispatcher || void 0 === virtualScrollingDispatcher ? void 0 : virtualScrollingDispatcher.cellCountInsideTopVirtualRow) || 0;\n    var cellCountInsideLeftVirtualCell = (null === virtualScrollingDispatcher || void 0 === virtualScrollingDispatcher ? void 0 : virtualScrollingDispatcher.cellCountInsideLeftVirtualCell) || 0;\n    return list.map((data, index) => {\n      if (!this._renderingStrategyInstance.keepAppointmentSettings()) {\n        delete data.settings;\n      }\n\n      var appointmentSettings = positionMap[index];\n      appointmentSettings.forEach(settings => {\n        settings.direction = \"vertical\" === this.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\";\n        settings.topVirtualCellCount = cellCountInsideTopVirtualRow;\n        settings.leftVirtualCellCount = cellCountInsideLeftVirtualCell;\n      });\n      return {\n        itemData: data,\n        settings: appointmentSettings,\n        needRepaint: true,\n        needRemove: false\n      };\n    });\n  }\n\n  _isDataChanged(data) {\n    var updatedData = this.instance.getUpdatedAppointment();\n    return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value);\n  }\n\n  _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n    return currentAppointment.needRepaint && sourceAppointment.needRemove;\n  }\n\n  _isSettingChanged(settings, sourceSetting) {\n    if (settings.length !== sourceSetting.length) {\n      return true;\n    }\n\n    var createSettingsToCompare = (settings, index) => {\n      var currentSetting = settings[index];\n      var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\n      var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\n      var cellIndex = currentSetting.cellIndex + leftVirtualCellCount;\n      var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\n      var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\n      var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\n      return _extends({}, currentSetting, {\n        cellIndex: cellIndex,\n        rowIndex: rowIndex,\n        topVirtualCellCount: void 0,\n        leftVirtualCellCount: void 0,\n        hMax: hMax,\n        vMax: vMax,\n        info: {}\n      });\n    };\n\n    for (var i = 0; i < settings.length; i++) {\n      var newSettings = createSettingsToCompare(settings, i);\n      var oldSettings = createSettingsToCompare(sourceSetting, i);\n\n      if (oldSettings) {\n        oldSettings.sortedIndex = newSettings.sortedIndex;\n      }\n\n      if (!equalByValue(newSettings, oldSettings)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var item = sourceAppointments[i];\n\n      if (item.itemData === currentAppointment.itemData) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  _getDeletedAppointments(currentAppointments, sourceAppointments) {\n    var result = [];\n\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var sourceAppointment = sourceAppointments[i];\n\n      var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n      if (!currentAppointment) {\n        sourceAppointment.needRemove = true;\n        result.push(sourceAppointment);\n      }\n    }\n\n    return result;\n  }\n\n  getRepaintedAppointments(currentAppointments, sourceAppointments) {\n    if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\n      return currentAppointments;\n    }\n\n    currentAppointments.forEach(appointment => {\n      var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n      if (sourceAppointment) {\n        appointment.needRepaint = this._isDataChanged(appointment.itemData) || this._isSettingChanged(appointment.settings, sourceAppointment.settings) || this._isAppointmentShouldAppear(appointment, sourceAppointment);\n      }\n    });\n    return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n  }\n\n  getRenderingStrategyInstance() {\n    return this._renderingStrategyInstance;\n  }\n\n}\n\nexport default AppointmentLayoutManager;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/appointments.layout_manager.js"],"names":["_extends","equalByValue","VerticalAppointmentsStrategy","HorizontalAppointmentsStrategy","HorizontalMonthLineAppointmentsStrategy","HorizontalMonthAppointmentsStrategy","AgendaAppointmentsStrategy","RENDERING_STRATEGIES","horizontal","horizontalMonth","horizontalMonthLine","vertical","agenda","AppointmentLayoutManager","constructor","instance","renderingStrategy","initRenderingStrategy","getCellDimensions","options","_workSpace","width","getCellWidth","height","getCellHeight","allDayHeight","getAllDayHeight","getGroupOrientation","callback","_getRealGroupOrientation","Strategy","_renderingStrategyInstance","createAppointmentsMap","items","_allDayCellHeight","groupOrientation","_groupOrientation","appointments","slice","_positionMap","createTaskPositionMap","_createAppointmentsMapCore","list","positionMap","virtualScrollingDispatcher","getWorkSpace","cellCountInsideTopVirtualRow","cellCountInsideLeftVirtualCell","map","data","index","keepAppointmentSettings","settings","appointmentSettings","forEach","direction","allDay","topVirtualCellCount","leftVirtualCellCount","itemData","needRepaint","needRemove","_isDataChanged","updatedData","getUpdatedAppointment","getUpdatedAppointmentKeys","some","item","key","value","_isAppointmentShouldAppear","currentAppointment","sourceAppointment","_isSettingChanged","sourceSetting","length","createSettingsToCompare","currentSetting","cellIndex","rowIndex","hMax","reduced","vMax","info","i","newSettings","oldSettings","sortedIndex","_getAssociatedSourceAppointment","sourceAppointments","_getDeletedAppointments","currentAppointments","result","push","getRepaintedAppointments","appointment","concat","getRenderingStrategyInstance"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\";\r\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\";\r\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\";\r\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\";\r\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\";\r\nvar RENDERING_STRATEGIES = {\r\n    horizontal: HorizontalAppointmentsStrategy,\r\n    horizontalMonth: HorizontalMonthAppointmentsStrategy,\r\n    horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\r\n    vertical: VerticalAppointmentsStrategy,\r\n    agenda: AgendaAppointmentsStrategy\r\n};\r\nclass AppointmentLayoutManager {\r\n    constructor(instance, renderingStrategy) {\r\n        this.instance = instance;\r\n        renderingStrategy && this.initRenderingStrategy(renderingStrategy)\r\n    }\r\n    getCellDimensions(options) {\r\n        if (this.instance._workSpace) {\r\n            return {\r\n                width: this.instance._workSpace.getCellWidth(),\r\n                height: this.instance._workSpace.getCellHeight(),\r\n                allDayHeight: this.instance._workSpace.getAllDayHeight()\r\n            }\r\n        }\r\n    }\r\n    getGroupOrientation(options) {\r\n        if (this.instance._workSpace) {\r\n            options.callback(this.instance._workSpace._getRealGroupOrientation())\r\n        }\r\n    }\r\n    initRenderingStrategy(renderingStrategy) {\r\n        var Strategy = RENDERING_STRATEGIES[renderingStrategy];\r\n        this._renderingStrategyInstance = new Strategy(this.instance);\r\n        this.renderingStrategy = renderingStrategy\r\n    }\r\n    createAppointmentsMap(items) {\r\n        var {\r\n            allDayHeight: allDayHeight\r\n        } = this.getCellDimensions();\r\n        this.instance._allDayCellHeight = allDayHeight;\r\n        this.getGroupOrientation({\r\n            callback: groupOrientation => this.instance._groupOrientation = groupOrientation\r\n        });\r\n        var appointments = items ? items.slice() : [];\r\n        this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(appointments);\r\n        return this._createAppointmentsMapCore(appointments, this._positionMap)\r\n    }\r\n    _createAppointmentsMapCore(list, positionMap) {\r\n        var {\r\n            virtualScrollingDispatcher: virtualScrollingDispatcher\r\n        } = this.instance.getWorkSpace();\r\n        var cellCountInsideTopVirtualRow = (null === virtualScrollingDispatcher || void 0 === virtualScrollingDispatcher ? void 0 : virtualScrollingDispatcher.cellCountInsideTopVirtualRow) || 0;\r\n        var cellCountInsideLeftVirtualCell = (null === virtualScrollingDispatcher || void 0 === virtualScrollingDispatcher ? void 0 : virtualScrollingDispatcher.cellCountInsideLeftVirtualCell) || 0;\r\n        return list.map((data, index) => {\r\n            if (!this._renderingStrategyInstance.keepAppointmentSettings()) {\r\n                delete data.settings\r\n            }\r\n            var appointmentSettings = positionMap[index];\r\n            appointmentSettings.forEach(settings => {\r\n                settings.direction = \"vertical\" === this.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\";\r\n                settings.topVirtualCellCount = cellCountInsideTopVirtualRow;\r\n                settings.leftVirtualCellCount = cellCountInsideLeftVirtualCell\r\n            });\r\n            return {\r\n                itemData: data,\r\n                settings: appointmentSettings,\r\n                needRepaint: true,\r\n                needRemove: false\r\n            }\r\n        })\r\n    }\r\n    _isDataChanged(data) {\r\n        var updatedData = this.instance.getUpdatedAppointment();\r\n        return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value)\r\n    }\r\n    _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\r\n        return currentAppointment.needRepaint && sourceAppointment.needRemove\r\n    }\r\n    _isSettingChanged(settings, sourceSetting) {\r\n        if (settings.length !== sourceSetting.length) {\r\n            return true\r\n        }\r\n        var createSettingsToCompare = (settings, index) => {\r\n            var currentSetting = settings[index];\r\n            var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\r\n            var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\r\n            var cellIndex = currentSetting.cellIndex + leftVirtualCellCount;\r\n            var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\r\n            var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\r\n            var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\r\n            return _extends({}, currentSetting, {\r\n                cellIndex: cellIndex,\r\n                rowIndex: rowIndex,\r\n                topVirtualCellCount: void 0,\r\n                leftVirtualCellCount: void 0,\r\n                hMax: hMax,\r\n                vMax: vMax,\r\n                info: {}\r\n            })\r\n        };\r\n        for (var i = 0; i < settings.length; i++) {\r\n            var newSettings = createSettingsToCompare(settings, i);\r\n            var oldSettings = createSettingsToCompare(sourceSetting, i);\r\n            if (oldSettings) {\r\n                oldSettings.sortedIndex = newSettings.sortedIndex\r\n            }\r\n            if (!equalByValue(newSettings, oldSettings)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var item = sourceAppointments[i];\r\n            if (item.itemData === currentAppointment.itemData) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDeletedAppointments(currentAppointments, sourceAppointments) {\r\n        var result = [];\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var sourceAppointment = sourceAppointments[i];\r\n            var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\r\n            if (!currentAppointment) {\r\n                sourceAppointment.needRemove = true;\r\n                result.push(sourceAppointment)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    getRepaintedAppointments(currentAppointments, sourceAppointments) {\r\n        if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\r\n            return currentAppointments\r\n        }\r\n        currentAppointments.forEach(appointment => {\r\n            var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\r\n            if (sourceAppointment) {\r\n                appointment.needRepaint = this._isDataChanged(appointment.itemData) || this._isSettingChanged(appointment.settings, sourceAppointment.settings) || this._isAppointmentShouldAppear(appointment, sourceAppointment)\r\n            }\r\n        });\r\n        return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments))\r\n    }\r\n    getRenderingStrategyInstance() {\r\n        return this._renderingStrategyInstance\r\n    }\r\n}\r\nexport default AppointmentLayoutManager;\r\n"]},"metadata":{},"sourceType":"module"}