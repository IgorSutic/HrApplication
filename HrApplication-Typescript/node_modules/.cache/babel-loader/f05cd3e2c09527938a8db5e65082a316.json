{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\n\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n\n    for (var i = 0; i < groupCount; i++) {\n      var isFirstShader = 0 === i;\n      var $shader = isFirstShader ? this._$shader : this.createShader();\n      this.applyShaderMargin($shader);\n\n      if (this._workSpace.isGroupedByDate()) {\n        this._customizeGroupedByDateShader($shader, i);\n      } else {\n        this._customizeShader($shader, i);\n      }\n\n      !isFirstShader && this._shader.push($shader);\n    }\n  }\n\n  _customizeShader($shader, groupIndex) {\n    var shaderWidth = this._workSpace.getIndicationWidth();\n\n    this._applyShaderWidth($shader, shaderWidth);\n\n    if (groupIndex >= 1) {\n      var workSpace = this._workSpace;\n      var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n      $shader.css(\"left\", indicationWidth);\n    } else {\n      $shader.css(\"left\", 0);\n    }\n  }\n\n  _applyShaderWidth($shader, width) {\n    var maxWidth = getBoundingRect(this._$container.get(0)).width;\n\n    if (width > maxWidth) {\n      width = maxWidth;\n    }\n\n    if (width > 0) {\n      $shader.width(width);\n    }\n  }\n\n  _customizeGroupedByDateShader($shader, groupIndex) {\n    var cellCount = this._workSpace.getIndicationCellCount();\n\n    var integerPart = Math.floor(cellCount);\n    var fractionPart = cellCount - integerPart;\n    var isFirstShaderPart = 0 === groupIndex;\n    var workSpace = this._workSpace;\n    var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n    var shaderLeft;\n\n    this._applyShaderWidth($shader, shaderWidth);\n\n    if (isFirstShaderPart) {\n      shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n    } else {\n      shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n    }\n\n    $shader.css(\"left\", shaderLeft);\n  }\n\n}\n\nexport default HorizontalCurrentTimeShader;","map":{"version":3,"sources":["/home/igor/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js"],"names":["getBoundingRect","CurrentTimeShader","HorizontalCurrentTimeShader","renderShader","groupCount","_workSpace","_isHorizontalGroupedWorkSpace","_getGroupCount","i","isFirstShader","$shader","_$shader","createShader","applyShaderMargin","isGroupedByDate","_customizeGroupedByDateShader","_customizeShader","_shader","push","groupIndex","shaderWidth","getIndicationWidth","_applyShaderWidth","workSpace","indicationWidth","_getCellCount","getCellWidth","css","width","maxWidth","_$container","get","cellCount","getIndicationCellCount","integerPart","Math","floor","fractionPart","isFirstShaderPart","shaderLeft"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 21.1.6\r\n * Build date: Mon Sep 27 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var isFirstShader = 0 === i;\r\n            var $shader = isFirstShader ? this._$shader : this.createShader();\r\n            this.applyShaderMargin($shader);\r\n            if (this._workSpace.isGroupedByDate()) {\r\n                this._customizeGroupedByDateShader($shader, i)\r\n            } else {\r\n                this._customizeShader($shader, i)\r\n            }!isFirstShader && this._shader.push($shader)\r\n        }\r\n    }\r\n    _customizeShader($shader, groupIndex) {\r\n        var shaderWidth = this._workSpace.getIndicationWidth();\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (groupIndex >= 1) {\r\n            var workSpace = this._workSpace;\r\n            var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\r\n            $shader.css(\"left\", indicationWidth)\r\n        } else {\r\n            $shader.css(\"left\", 0)\r\n        }\r\n    }\r\n    _applyShaderWidth($shader, width) {\r\n        var maxWidth = getBoundingRect(this._$container.get(0)).width;\r\n        if (width > maxWidth) {\r\n            width = maxWidth\r\n        }\r\n        if (width > 0) {\r\n            $shader.width(width)\r\n        }\r\n    }\r\n    _customizeGroupedByDateShader($shader, groupIndex) {\r\n        var cellCount = this._workSpace.getIndicationCellCount();\r\n        var integerPart = Math.floor(cellCount);\r\n        var fractionPart = cellCount - integerPart;\r\n        var isFirstShaderPart = 0 === groupIndex;\r\n        var workSpace = this._workSpace;\r\n        var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\r\n        var shaderLeft;\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (isFirstShaderPart) {\r\n            shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex\r\n        } else {\r\n            shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth()\r\n        }\r\n        $shader.css(\"left\", shaderLeft)\r\n    }\r\n}\r\nexport default HorizontalCurrentTimeShader;\r\n"]},"metadata":{},"sourceType":"module"}